using System;

namespace LiveForensics.Symbols
{
	#region HEADER
	public class CatalogueInformation
	{
		 public Guid Guid { get { return new Guid("30B5FB31-AE7E-4ACA-ABA7-50AA241FF331"); } }
		 public uint Age { get { return 1; } }
		 public string MachineType { get { return @"Unknown"; } }
		 public string SymbolsFileName { get { return @"ntkrnlpa.pdb"; } }
		 public uint Signature { get { return 1208111466; } }
		 public string Contents { get { return @"[""LIST_ENTRY64"",""LIST_ENTRY32"",""_LIST_ENTRY"",""_IMAGE_NT_HEADERS"",""__unnamed"",""_LARGE_INTEGER"",""_ULARGE_INTEGER"",""_LUID"",""_KAPC"",""_SINGLE_LIST_ENTRY"",""_HARDWARE_PTE"",""_SLIST_HEADER"",""_NPAGED_LOOKASIDE_LIST"",""_PAGED_LOOKASIDE_LIST"",""_GENERAL_LOOKASIDE"",""_KPRCB"",""_EX_RUNDOWN_REF"",""_EX_FAST_REF"",""_EX_PUSH_LOCK"",""_EX_PUSH_LOCK_WAIT_BLOCK"",""_EX_PUSH_LOCK_CACHE_AWARE"",""_ETHREAD"",""_EPROCESS"",""_OBJECT_ATTRIBUTES"",""_OBJECT_TYPE"",""_OBJECT_HANDLE_INFORMATION"",""_KTHREAD"",""_FX_SAVE_AREA"",""_MMPTE"",""_EXCEPTION_RECORD64"",""_EXCEPTION_RECORD32"",""_DBGKM_EXCEPTION64"",""_DBGKM_EXCEPTION32"",""_DBGKD_LOAD_SYMBOLS64"",""_DBGKD_LOAD_SYMBOLS32"",""_DBGKD_READ_MEMORY64"",""_DBGKD_READ_MEMORY32"",""_DBGKD_WRITE_MEMORY64"",""_DBGKD_WRITE_MEMORY32"",""_DBGKD_WRITE_BREAKPOINT64"",""_DBGKD_WRITE_BREAKPOINT32"",""_DBGKD_READ_WRITE_IO64"",""_DBGKD_READ_WRITE_IO32"",""_DBGKD_READ_WRITE_IO_EXTENDED64"",""_DBGKD_READ_WRITE_IO_EXTENDED32"",""_DBGKD_SET_SPECIAL_CALL32"",""_DBGKD_SET_SPECIAL_CALL64"",""_DBGKD_SET_INTERNAL_BREAKPOINT32"",""_DBGKD_SET_INTERNAL_BREAKPOINT64"",""_DBGKD_GET_INTERNAL_BREAKPOINT64"",""_DBGKD_GET_INTERNAL_BREAKPOINT32"",""_DBGKD_MANIPULATE_STATE64"",""_DBGKD_MANIPULATE_STATE32"",""_VACB"",""_SHARED_CACHE_MAP"",""_VACB_LEVEL_REFERENCE"",""_HEAP_ENTRY"",""_HEAP"",""_HEAP_SEGMENT"",""_HEAP_USERDATA_HEADER"",""_HEAP_SUBSEGMENT"",""_HEAP_UCR_SEGMENT"",""_HMAP_TABLE"",""_OBJECT_SYMBOLIC_LINK"",""_POOL_BLOCK_HEAD"",""_DISPATCHER_HEADER"",""_LDR_DATA_TABLE_ENTRY"",""_HEAP_UNCOMMMTTED_RANGE"",""_VI_DEADLOCK_GLOBALS"",""_THERMAL_INFORMATION"",""_DBGKD_SEARCH_MEMORY"",""_SECTION_OBJECT"",""_POWER_STATE"",""_WMI_LOGGER_CONTEXT"",""_SEGMENT_OBJECT"",""_CONTROL_AREA"",""_HANDLE_TABLE"",""_POOL_HEADER"",""_KWAIT_BLOCK"",""_MMPTE_PROTOTYPE"",""_MMSUPPORT"",""_EX_WORK_QUEUE"",""_MMSUBSECTION_FLAGS"",""_KMUTANT"",""_HEAP_TAG_ENTRY"",""_MMPTE_HIGHLOW"",""_KEVENT"",""_EPROCESS_QUOTA_BLOCK"",""_UNICODE_STRING"",""_EVENT_COUNTER"",""_EJOB"",""_LARGE_CONTROL_AREA"",""_GUID"",""_PS_JOB_TOKEN_FILTER"",""_FAST_MUTEX"",""_MM_DRIVER_VERIFIER_DATA"",""_IMAGE_FILE_HEADER"",""_FILE_OBJECT"",""_MMPTE_HARDWARE"",""_IO_COMPLETION_CONTEXT"",""_CALL_HASH_ENTRY"",""_HMAP_ENTRY"",""_DBGKD_SET_CONTEXT"",""_KLOCK_QUEUE_HANDLE"",""_MMSECTION_FLAGS"",""_DEFERRED_WRITE"",""_TRACE_ENABLE_FLAG_EXTENSION"",""_SID_AND_ATTRIBUTES"",""_HIVE_LIST_ENTRY"",""_KSPIN_LOCK_QUEUE"",""_PS_IMPERSONATION_INFORMATION"",""_DEVICE_NODE"",""_HEAP_LOCK"",""_KPCR"",""_MMCOLOR_TABLES"",""_DBGKD_FILL_MEMORY"",""_PP_LOOKASIDE_LIST"",""_PHYSICAL_MEMORY_RUN"",""_MMPFN"",""_MM_SESSION_SPACE"",""_PEB"",""_HEAP_FREE_ENTRY"",""_ERESOURCE"",""_DBGKD_GET_CONTEXT"",""_MMPTE_SOFTWARE"",""_IO_RESOURCE_REQUIREMENTS_LIST"",""_CACHE_UNINITIALIZE_EVENT"",""_CM_RESOURCE_LIST"",""_CM_FULL_RESOURCE_DESCRIPTOR"",""_EPROCESS_QUOTA_ENTRY"",""_CM_CACHED_VALUE_INDEX"",""_WMI_BUFFER_HEADER"",""_KSEMAPHORE"",""_PROCESSOR_POWER_STATE"",""_DBGKD_READ_WRITE_MSR"",""_MMPFNENTRY"",""_IO_COUNTERS"",""_KTSS"",""_DBGKD_QUERY_MEMORY"",""_KIDTENTRY"",""_DEVICE_OBJECT_POWER_EXTENSION"",""_MMSUPPORT_FLAGS"",""_TERMINATION_PORT"",""_SYSTEM_POWER_POLICY"",""_POP_THERMAL_ZONE"",""_DBGKD_CONTINUE2"",""_PROCESSOR_POWER_POLICY"",""_IMAGE_DOS_HEADER"",""_OWNER_ENTRY"",""_HEAP_VIRTUAL_ALLOC_ENTRY"",""_RTL_ATOM_TABLE"",""_FNSAVE_FORMAT"",""EX_QUEUE_WORKER_INFO"",""SYSTEM_POWER_LEVEL"",""POWER_ACTION_POLICY"",""PROCESSOR_PERF_STATE"",""PROCESSOR_IDLE_TIMES"",""_IMAGE_ROM_OPTIONAL_HEADER"",""_MMPTE_LIST"",""_CMHIVE"",""_HANDLE_TRACE_DEBUG_INFO"",""_HHIVE"",""_PAGEFAULT_HISTORY"",""_RTL_ATOM_TABLE_ENTRY"",""_MM_SESSION_SPACE_FLAGS"",""_CM_PARTIAL_RESOURCE_LIST"",""_DRIVER_OBJECT"",""_WMI_BUFFER_STATE"",""_MMFREE_POOL_ENTRY"",""_DEVICE_OBJECT"",""_SECTION_OBJECT_POINTERS"",""_RTL_BITMAP"",""_MBCB"",""_POWER_CHANNEL_SUMMARY"",""_CM_VIEW_OF_FILE"",""_KDEVICE_QUEUE"",""_KSYSTEM_TIME"",""_KUSER_SHARED_DATA"",""_OBJECT_TYPE_INITIALIZER"",""_SUBSECTION"",""_WMI_LOGGER_MODE"",""_NT_TIB"",""_MMVAD_LONG"",""_MMVAD_FLAGS"",""_POOL_DESCRIPTOR"",""_PEB_LDR_DATA"",""_DBGKD_GET_VERSION32"",""_MM_PAGED_POOL_INFO"",""_INTERLOCK_SEQ"",""_VPB"",""_MMSESSION"",""_GENERIC_MAPPING"",""_KiIoAccessMap"",""_DBGKD_RESTORE_BREAKPOINT"",""_EXCEPTION_REGISTRATION_RECORD"",""_POOL_TRACKER_BIG_PAGES"",""_PROCESS_WS_WATCH_INFORMATION"",""_MMPTE_SUBSECTION"",""_VI_DEADLOCK_NODE"",""_CONTEXT"",""_IMAGE_OPTIONAL_HEADER"",""_DBGKD_QUERY_SPECIAL_CALLS"",""CMP_OFFSET_ARRAY"",""_PCI_PDO_EXTENSION"",""_HMAP_DIRECTORY"",""_OBJECT_HEADER"",""_QUAD"",""_SECURITY_DESCRIPTOR"",""_RTLP_RANGE_LIST_ENTRY"",""_KAPC_STATE"",""_OBJECT_HEADER_CREATOR_INFO"",""_HEAP_STOP_ON_VALUES"",""_DEVICE_RELATIONS"",""_KPROCESS"",""_HEAP_PSEUDO_TAG_ENTRY"",""_IO_RESOURCE_LIST"",""_MMBANKED_SECTION"",""_RTL_CRITICAL_SECTION"",""_KTRAP_FRAME"",""_KGDTENTRY"",""_PCI_FDO_EXTENSION"",""_CM_PARTIAL_RESOURCE_DESCRIPTOR"",""_SYSPTES_HEADER"",""_WAIT_CONTEXT_BLOCK"",""_CM_KEY_CONTROL_BLOCK"",""_KDPC"",""_PCI_BUS_INTERFACE_STANDARD"",""_WORK_QUEUE_ITEM"",""_PI_RESOURCE_ARBITER_ENTRY"",""_KTIMER"",""_CM_KEY_HASH"",""_IRP"",""_PCI_LOCK"",""_CM_KEY_SECURITY_CACHE_ENTRY"",""_IMAGE_SECTION_HEADER"",""_POP_ACTION_TRIGGER"",""_FAST_IO_DISPATCH"",""_ETIMER"",""_DBGKD_BREAKPOINTEX"",""_CM_CELL_REMAP_BLOCK"",""_PCI_PMC"",""_DBGKD_CONTINUE"",""_MMWSLE"",""_EXCEPTION_POINTERS"",""_KQUEUE"",""_RTL_USER_PROCESS_PARAMETERS"",""_CACHE_MANAGER_CALLBACKS"",""_FILE_BASIC_INFORMATION"",""_CELL_DATA"",""_SE_AUDIT_PROCESS_CREATION_INFO"",""_HEAP_ENTRY_EXTRA"",""_VI_DEADLOCK_RESOURCE"",""_CLIENT_ID"",""_PEB_FREE_BLOCK"",""_PO_DEVICE_NOTIFY"",""_MMPFNLIST"",""PCI_HEADER_TYPE_DEPENDENT"",""_DBGKD_GET_SET_BUS_DATA"",""_OBJECT_HEADER_NAME_INFO"",""_KINTERRUPT"",""_SECURITY_CLIENT_CONTEXT"",""_BITMAP_RANGE"",""_PCI_ARBITER_INSTANCE"",""_HANDLE_TRACE_DB_ENTRY"",""_MMPAGING_FILE"",""_BUS_EXTENSION_LIST"",""_PCI_MJ_DISPATCH_TABLE"",""_POP_TRIGGER_WAIT"",""_IO_TIMER"",""_FXSAVE_FORMAT"",""_MMWSLENTRY"",""_OBJECT_DIRECTORY"",""_OBJECT_CREATE_INFORMATION"",""_WMI_CLIENT_CONTEXT"",""_HEAP_LOOKASIDE"",""_ARBITER_INTERFACE"",""_ACL"",""_CALL_PERFORMANCE_DATA"",""_MMWSL"",""_RTL_DRIVE_LETTER_CURDIR"",""PCI_FUNCTION_RESOURCES"",""_WNODE_HEADER"",""_EXCEPTION_RECORD"",""_SEGMENT"",""_PCI_COMMON_EXTENSION"",""_PRIVATE_CACHE_MAP"",""_RTL_HANDLE_TABLE"",""_POP_IDLE_HANDLER"",""SYSTEM_POWER_CAPABILITIES"",""_DEVOBJ_EXTENSION"",""_FLOATING_SAVE_AREA"",""_DBGKD_GET_VERSION64"",""_MMVIEW"",""_TOKEN"",""_TEB"",""PCI_SECONDARY_EXTENSION"",""_PCI_COMMON_CONFIG"",""_HEAP_FREE_ENTRY_EXTRA"",""_X86_DBGKD_CONTROL_SET"",""_SECTION_IMAGE_INFORMATION"",""_POOL_TRACKER_TABLE"",""_MDL"",""_KNODE"",""_PHYSICAL_MEMORY_DESCRIPTOR"",""_PI_BUS_EXTENSION"",""_VI_DEADLOCK_THREAD"",""_MMEXTEND_INFO"",""_IMAGE_DEBUG_DIRECTORY"",""_PCI_INTERFACE"",""_FILE_NETWORK_OPEN_INFORMATION"",""_MMVAD"",""_MMMOD_WRITER_MDL_ENTRY"",""_POP_POWER_ACTION"",""_IO_STATUS_BLOCK"",""_LPCP_MESSAGE"",""_MMVAD_SHORT"",""_ACCESS_STATE"",""_PNP_DEVICE_EVENT_ENTRY"",""_PRIVATE_CACHE_MAP_FLAGS"",""_PNP_DEVICE_EVENT_LIST"",""_KPROCESSOR_STATE"",""_MMPTE_TRANSITION"",""_TOKEN_SOURCE"",""_STRING"",""_MMVAD_FLAGS2"",""_flags"",""_CM_KEY_SECURITY_CACHE"",""_PROCESSOR_POWER_POLICY_INFO"",""_ARBITER_INSTANCE"",""_BUS_HANDLER"",""_PCI_MN_DISPATCH_TABLE"",""_POP_DEVICE_SYS_STATE"",""_OBJECT_DUMP_CONTROL"",""_SECURITY_SUBJECT_CONTEXT"",""_HEAP_STOP_ON_TAG"",""_ACTIVATION_CONTEXT_STACK"",""_MMWSLE_HASH"",""_CM_NAME_CONTROL_BLOCK"",""_SECURITY_TOKEN_PROXY_DATA"",""_HANDLE_TABLE_ENTRY"",""_LPCP_PORT_OBJECT"",""PCI_POWER_STATE"",""_POOL_HACKER"",""_CM_INDEX_HINT_BLOCK"",""_TOKEN_CONTROL"",""_SCSI_REQUEST_BLOCK"",""_IO_STACK_LOCATION"",""_IO_RESOURCE_DESCRIPTOR"",""_LUID_AND_ATTRIBUTES"",""_MI_VERIFIER_POOL_HEADER"",""_CM_KEY_BODY"",""_PORT_MESSAGE"",""_DBGKD_ANY_CONTROL_SET"",""_ARBITER_ORDERING_LIST"",""_HBASE_BLOCK"",""_DUAL"",""_COMPRESSED_DATA_INFO"",""_LPCP_PORT_QUEUE"",""_INITIAL_PRIVILEGE_SET"",""_POP_HIBER_CONTEXT"",""_TEB_ACTIVE_FRAME_CONTEXT"",""_TEB_ACTIVE_FRAME"",""_FILE_GET_QUOTA_INFORMATION"",""_MMADDRESS_LIST"",""_OBJECT_NAME_INFORMATION"",""_SECURITY_QUALITY_OF_SERVICE"",""_DUMP_STACK_CONTEXT"",""_FILE_STANDARD_INFORMATION"",""_POP_SHUTDOWN_BUG_CHECK"",""_PCI_SLOT_NUMBER"",""_Wx86ThreadState"",""_DRIVER_EXTENSION"",""_CM_NOTIFY_BLOCK"",""_SID"",""_RTL_HANDLE_TABLE_ENTRY"",""_INTERFACE"",""_SUPPORTED_RANGES"",""_SID_IDENTIFIER_AUTHORITY"",""_SECURITY_DESCRIPTOR_RELATIVE"",""_PM_SUPPORT"",""_ARBITER_PARAMETERS"",""_SECURITY_TOKEN_AUDIT_DATA"",""_HANDLE_TABLE_ENTRY_INFO"",""_POWER_SEQUENCE"",""_IMAGE_DATA_DIRECTORY"",""_MI_VERIFIER_DRIVER_ENTRY"",""_CURDIR"",""_MMMOD_WRITER_LISTHEAD"",""_PO_HIBER_PERF"",""_GDI_TEB_BATCH"",""PO_MEMORY_IMAGE"",""BATTERY_REPORTING_SCALE"",""_KDEVICE_QUEUE_ENTRY"",""_DEVICE_CAPABILITIES"",""_RTL_RANGE_LIST"",""_RTL_CRITICAL_SECTION_DEBUG"",""_SEP_AUDIT_POLICY"",""_PLUGPLAY_EVENT_BLOCK"",""_CACHED_CHILD_LIST"",""_PO_MEMORY_RANGE_ARRAY"",""_ADAPTER_OBJECT"",""_DUMP_INITIALIZATION_CONTEXT"",""_IO_CLIENT_EXTENSION"",""_KEXECUTE_OPTIONS"",""_CM_NAME_HASH"",""_ARBITER_ALLOCATION_STATE"",""_SEP_AUDIT_POLICY_OVERLAY"",""_PCI_HEADER_TYPE_0"",""_PO_DEVICE_NOTIFY_ORDER"",""_FS_FILTER_CALLBACKS"",""_IA64_DBGKD_CONTROL_SET"",""_DEVICE_MAP"",""_u"",""_ARBITER_CONFLICT_INFO"",""_PO_NOTIFY_ORDER_LEVEL"",""_PCI_HEADER_TYPE_2"",""_SEP_AUDIT_POLICY_CATEGORIES"",""_CM_KEY_VALUE"",""_AMD64_DBGKD_CONTROL_SET"",""_FS_FILTER_CALLBACK_DATA"",""_OBJECT_DIRECTORY_ENTRY"",""_VI_POOL_ENTRY"",""_POP_DEVICE_POWER_IRP"",""_RTL_RANGE"",""_PCI_HEADER_TYPE_1"",""_PRIVILEGE_SET"",""_IO_SECURITY_CONTEXT"",""_KSPECIAL_REGISTERS"",""_MAILSLOT_CREATE_PARAMETERS"",""_NAMED_PIPE_CREATE_PARAMETERS"",""_CM_BIG_DATA"",""_SUPPORTED_RANGE"",""_CM_KEY_NODE"",""_ARBITER_ORDERING"",""_ARBITER_LIST_ENTRY"",""_LPCP_NONPAGED_PORT_QUEUE"",""_CM_KEY_INDEX"",""_CM_KEY_REFERENCE"",""_ARBITER_ALTERNATIVE"",""_FS_FILTER_PARAMETERS"",""_DESCRIPTOR"",""_VI_POOL_ENTRY_INUSE"",""_CHILD_LIST"",""_CM_KEY_SECURITY""])"; } }
		 public string Created { get { return "21-04-2017T10:01:44"; } }
	}
	#endregion
	#region LIST_ENTRY64
 
	public class LIST_ENTRY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public LIST_ENTRY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""LIST_ENTRY64"": [ 16, {
				 ""Flink"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Blink"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Flink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Blink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region LIST_ENTRY32
 
	public class LIST_ENTRY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public LIST_ENTRY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""LIST_ENTRY32"": [ 8, {
				 ""Flink"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Blink"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LIST_ENTRY
 
	public class _LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LIST_ENTRY"": [ 8, {
				 ""Flink"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""Blink"": [ 4, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _IMAGE_NT_HEADERS
 
	public class _IMAGE_NT_HEADERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_NT_HEADERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 248; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_NT_HEADERS"": [ 248, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FileHeader"": [ 4, [ ""_IMAGE_FILE_HEADER"", ""null"" ]],
				 ""OptionalHeader"": [ 24, [ ""_IMAGE_OPTIONAL_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _IMAGE_FILE_HEADER FileHeader
		{
			get
			{
				_IMAGE_FILE_HEADER returnValue = new _IMAGE_FILE_HEADER(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _IMAGE_OPTIONAL_HEADER OptionalHeader
		{
			get
			{
				_IMAGE_OPTIONAL_HEADER returnValue = new _IMAGE_OPTIONAL_HEADER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region __unnamed
 
	public class __unnamed
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public __unnamed(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""__unnamed"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HighPart { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LARGE_INTEGER
 
	public class _LARGE_INTEGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LARGE_INTEGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LARGE_INTEGER"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""Int32"", ""null"" ]],
				 ""u"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""QuadPart"": [ 0, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HighPart { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 QuadPart { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _ULARGE_INTEGER
 
	public class _ULARGE_INTEGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ULARGE_INTEGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ULARGE_INTEGER"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""u"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""QuadPart"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HighPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 QuadPart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _LUID
 
	public class _LUID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LUID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LUID"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HighPart { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KAPC
 
	public class _KAPC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KAPC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KAPC"": [ 48, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""Spare0"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""ApcListEntry"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KernelRoutine"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RundownRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NormalRoutine"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NormalContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument1"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument2"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApcStateIndex"": [ 44, [ ""Char"", ""null"" ]],
				 ""ApcMode"": [ 45, [ ""Char"", ""null"" ]],
				 ""Inserted"": [ 46, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Spare0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Thread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY ApcListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 KernelRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 RundownRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NormalRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 NormalContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 SystemArgument1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 SystemArgument2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Char ApcStateIndex { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 44); } }
		public Char ApcMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 45); } }
		public Byte Inserted{ get { return _StructureData[_BufferOffset +46]; } }
	}
	#endregion
	#region _SINGLE_LIST_ENTRY
 
	public class _SINGLE_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SINGLE_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SINGLE_LIST_ENTRY"": [ 4, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HARDWARE_PTE
 
	public class _HARDWARE_PTE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HARDWARE_PTE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HARDWARE_PTE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Write"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Owner"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""WriteThrough"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""CacheDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Accessed"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Dirty"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""LargePage"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""Global"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""CopyOnWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""reserved0"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFrameNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":38,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":38,\""target\"":\""UInt64\""}"" ]],
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Write
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Owner
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 WriteThrough
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 CacheDisable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Accessed
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Dirty
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 LargePage
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 Global
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 CopyOnWrite
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 reserved0
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFrameNumber
		{
			get
			{
				// start: 12  end: 38  Mask: 00000011111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 274877902848) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 reserved1
		{
			get
			{
				// start: 38  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446743798831644672) >> 38;
				return (UInt64)value2;
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HighPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _SLIST_HEADER
 
	public class _SLIST_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SLIST_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SLIST_HEADER"": [ 8, {
				 ""Alignment"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Next"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Depth"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Sequence"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Alignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _SINGLE_LIST_ENTRY Next
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Sequence { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region _NPAGED_LOOKASIDE_LIST
 
	public class _NPAGED_LOOKASIDE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NPAGED_LOOKASIDE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NPAGED_LOOKASIDE_LIST"": [ 256, {
				 ""L"": [ 0, [ ""_GENERAL_LOOKASIDE"", ""null"" ]],
				 ""Lock__ObsoleteButDoNotDelete"": [ 128, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GENERAL_LOOKASIDE L
		{
			get
			{
				_GENERAL_LOOKASIDE returnValue = new _GENERAL_LOOKASIDE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Lock__ObsoleteButDoNotDelete { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _PAGED_LOOKASIDE_LIST
 
	public class _PAGED_LOOKASIDE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PAGED_LOOKASIDE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PAGED_LOOKASIDE_LIST"": [ 256, {
				 ""L"": [ 0, [ ""_GENERAL_LOOKASIDE"", ""null"" ]],
				 ""Lock__ObsoleteButDoNotDelete"": [ 128, [ ""_FAST_MUTEX"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GENERAL_LOOKASIDE L
		{
			get
			{
				_GENERAL_LOOKASIDE returnValue = new _GENERAL_LOOKASIDE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _FAST_MUTEX Lock__ObsoleteButDoNotDelete
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _GENERAL_LOOKASIDE
 
	public class _GENERAL_LOOKASIDE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GENERAL_LOOKASIDE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GENERAL_LOOKASIDE"": [ 128, {
				 ""ListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""Depth"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""MaximumDepth"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""TotalAllocates"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AllocateMisses"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AllocateHits"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TotalFrees"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""FreeMisses"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FreeHits"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Tag"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Allocate"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Free"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ListEntry"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LastTotalAllocates"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateMisses"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateHits"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Future"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER ListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 MaximumDepth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 TotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 AllocateHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 TotalFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 FreeMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FreeHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _POOL_TYPE Type { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Tag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Allocate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Free { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 LastTotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 LastAllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 LastAllocateHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32[] Future
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KPRCB
 
	public class _KPRCB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPRCB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPRCB"": [ 3152, {
				 ""MinorVersion"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MajorVersion"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""CurrentThread"": [ 4, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""NextThread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""IdleThread"": [ 12, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Number"": [ 16, [ ""Char"", ""null"" ]],
				 ""Reserved"": [ 17, [ ""Char"", ""null"" ]],
				 ""BuildType"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""SetMember"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CpuType"": [ 24, [ ""Char"", ""null"" ]],
				 ""CpuID"": [ 25, [ ""Char"", ""null"" ]],
				 ""CpuStep"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""ProcessorState"": [ 28, [ ""_KPROCESSOR_STATE"", ""null"" ]],
				 ""KernelReserved"": [ 828, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""HalReserved"": [ 892, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""PrcbPad0"": [ 956, [ ""Array"", ""{\""count\"":92,\""target\"":\""Byte\""}"" ]],
				 ""LockQueue"": [ 1048, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PrcbPad1"": [ 1176, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""NpxThread"": [ 1184, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""InterruptCount"": [ 1188, [ ""UInt32"", ""null"" ]],
				 ""KernelTime"": [ 1192, [ ""UInt32"", ""null"" ]],
				 ""UserTime"": [ 1196, [ ""UInt32"", ""null"" ]],
				 ""DpcTime"": [ 1200, [ ""UInt32"", ""null"" ]],
				 ""DebugDpcTime"": [ 1204, [ ""UInt32"", ""null"" ]],
				 ""InterruptTime"": [ 1208, [ ""UInt32"", ""null"" ]],
				 ""AdjustDpcThreshold"": [ 1212, [ ""UInt32"", ""null"" ]],
				 ""PageColor"": [ 1216, [ ""UInt32"", ""null"" ]],
				 ""SkipTick"": [ 1220, [ ""UInt32"", ""null"" ]],
				 ""MultiThreadSetBusy"": [ 1224, [ ""Byte"", ""null"" ]],
				 ""Spare2"": [ 1225, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""ParentNode"": [ 1228, [ ""Pointer"", ""{\""target\"":\""_KNODE\""}"" ]],
				 ""MultiThreadProcessorSet"": [ 1232, [ ""UInt32"", ""null"" ]],
				 ""MultiThreadSetMaster"": [ 1236, [ ""Pointer"", ""{\""target\"":\""_KPRCB\""}"" ]],
				 ""ThreadStartCount"": [ 1240, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""CcFastReadNoWait"": [ 1248, [ ""UInt32"", ""null"" ]],
				 ""CcFastReadWait"": [ 1252, [ ""UInt32"", ""null"" ]],
				 ""CcFastReadNotPossible"": [ 1256, [ ""UInt32"", ""null"" ]],
				 ""CcCopyReadNoWait"": [ 1260, [ ""UInt32"", ""null"" ]],
				 ""CcCopyReadWait"": [ 1264, [ ""UInt32"", ""null"" ]],
				 ""CcCopyReadNoWaitMiss"": [ 1268, [ ""UInt32"", ""null"" ]],
				 ""KeAlignmentFixupCount"": [ 1272, [ ""UInt32"", ""null"" ]],
				 ""KeContextSwitches"": [ 1276, [ ""UInt32"", ""null"" ]],
				 ""KeDcacheFlushCount"": [ 1280, [ ""UInt32"", ""null"" ]],
				 ""KeExceptionDispatchCount"": [ 1284, [ ""UInt32"", ""null"" ]],
				 ""KeFirstLevelTbFills"": [ 1288, [ ""UInt32"", ""null"" ]],
				 ""KeFloatingEmulationCount"": [ 1292, [ ""UInt32"", ""null"" ]],
				 ""KeIcacheFlushCount"": [ 1296, [ ""UInt32"", ""null"" ]],
				 ""KeSecondLevelTbFills"": [ 1300, [ ""UInt32"", ""null"" ]],
				 ""KeSystemCalls"": [ 1304, [ ""UInt32"", ""null"" ]],
				 ""SpareCounter0"": [ 1308, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PPLookasideList"": [ 1312, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PPNPagedLookasideList"": [ 1440, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PPPagedLookasideList"": [ 1696, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PacketBarrier"": [ 1952, [ ""UInt32"", ""null"" ]],
				 ""ReverseStall"": [ 1956, [ ""UInt32"", ""null"" ]],
				 ""IpiFrame"": [ 1960, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PrcbPad2"": [ 1964, [ ""Array"", ""{\""count\"":52,\""target\"":\""Byte\""}"" ]],
				 ""CurrentPacket"": [ 2016, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""TargetSet"": [ 2028, [ ""UInt32"", ""null"" ]],
				 ""WorkerRoutine"": [ 2032, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IpiFrozen"": [ 2036, [ ""UInt32"", ""null"" ]],
				 ""PrcbPad3"": [ 2040, [ ""Array"", ""{\""count\"":40,\""target\"":\""Byte\""}"" ]],
				 ""RequestSummary"": [ 2080, [ ""UInt32"", ""null"" ]],
				 ""SignalDone"": [ 2084, [ ""Pointer"", ""{\""target\"":\""_KPRCB\""}"" ]],
				 ""PrcbPad4"": [ 2088, [ ""Array"", ""{\""count\"":56,\""target\"":\""Byte\""}"" ]],
				 ""DpcListHead"": [ 2144, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DpcStack"": [ 2152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DpcCount"": [ 2156, [ ""UInt32"", ""null"" ]],
				 ""DpcQueueDepth"": [ 2160, [ ""UInt32"", ""null"" ]],
				 ""DpcRoutineActive"": [ 2164, [ ""UInt32"", ""null"" ]],
				 ""DpcInterruptRequested"": [ 2168, [ ""UInt32"", ""null"" ]],
				 ""DpcLastCount"": [ 2172, [ ""UInt32"", ""null"" ]],
				 ""DpcRequestRate"": [ 2176, [ ""UInt32"", ""null"" ]],
				 ""MaximumDpcQueueDepth"": [ 2180, [ ""UInt32"", ""null"" ]],
				 ""MinimumDpcRate"": [ 2184, [ ""UInt32"", ""null"" ]],
				 ""QuantumEnd"": [ 2188, [ ""UInt32"", ""null"" ]],
				 ""PrcbPad5"": [ 2192, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""DpcLock"": [ 2208, [ ""UInt32"", ""null"" ]],
				 ""PrcbPad6"": [ 2212, [ ""Array"", ""{\""count\"":28,\""target\"":\""Byte\""}"" ]],
				 ""CallDpc"": [ 2240, [ ""_KDPC"", ""null"" ]],
				 ""ChainedInterruptList"": [ 2272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LookasideIrpFloat"": [ 2276, [ ""Int32"", ""null"" ]],
				 ""SpareFields0"": [ 2280, [ ""Array"", ""{\""count\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""VendorString"": [ 2304, [ ""Array"", ""{\""count\"":13,\""target\"":\""Byte\""}"" ]],
				 ""InitialApicId"": [ 2317, [ ""Byte"", ""null"" ]],
				 ""LogicalProcessorsPerPhysicalProcessor"": [ 2318, [ ""Byte"", ""null"" ]],
				 ""MHz"": [ 2320, [ ""UInt32"", ""null"" ]],
				 ""FeatureBits"": [ 2324, [ ""UInt32"", ""null"" ]],
				 ""UpdateSignature"": [ 2328, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""NpxSaveArea"": [ 2336, [ ""_FX_SAVE_AREA"", ""null"" ]],
				 ""PowerState"": [ 2864, [ ""_PROCESSOR_POWER_STATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 CurrentThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NextThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 IdleThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Char Number { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 16); } }
		public Char Reserved { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 17); } }
		public UInt16 BuildType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt32 SetMember { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Char CpuType { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 24); } }
		public Char CpuID { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 25); } }
		public UInt16 CpuStep { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public _KPROCESSOR_STATE ProcessorState
		{
			get
			{
				_KPROCESSOR_STATE returnValue = new _KPROCESSOR_STATE(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32[] KernelReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 828);
				return returnValue;
			}
		}
		public UInt32[] HalReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 892);
				return returnValue;
			}
		}
		public Byte[] PrcbPad0
		{
			get
			{
				Byte[] returnValue = new Byte[92];
				for(int i=0; i<92; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 956];
				return returnValue;
			}
		}
		public _KSPIN_LOCK_QUEUE[] LockQueue
		{
			get
			{
				_KSPIN_LOCK_QUEUE[] returnValue = new _KSPIN_LOCK_QUEUE[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _KSPIN_LOCK_QUEUE(_StructureData, (i * size) + _BufferOffset + 1048);
				return returnValue;
			}
		}
		public Byte[] PrcbPad1
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1176];
				return returnValue;
			}
		}
		public UInt32 NpxThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1184); } }
		public UInt32 InterruptCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1188); } }
		public UInt32 KernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1192); } }
		public UInt32 UserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1196); } }
		public UInt32 DpcTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1200); } }
		public UInt32 DebugDpcTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1204); } }
		public UInt32 InterruptTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1208); } }
		public UInt32 AdjustDpcThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1212); } }
		public UInt32 PageColor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1216); } }
		public UInt32 SkipTick { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1220); } }
		public Byte MultiThreadSetBusy{ get { return _StructureData[_BufferOffset +1224]; } }
		public Byte[] Spare2
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1225];
				return returnValue;
			}
		}
		public UInt32 ParentNode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1228); } }
		public UInt32 MultiThreadProcessorSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1232); } }
		public UInt32 MultiThreadSetMaster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1236); } }
		public UInt32[] ThreadStartCount
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 1240);
				return returnValue;
			}
		}
		public UInt32 CcFastReadNoWait { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1248); } }
		public UInt32 CcFastReadWait { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1252); } }
		public UInt32 CcFastReadNotPossible { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1256); } }
		public UInt32 CcCopyReadNoWait { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1260); } }
		public UInt32 CcCopyReadWait { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264); } }
		public UInt32 CcCopyReadNoWaitMiss { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1268); } }
		public UInt32 KeAlignmentFixupCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1272); } }
		public UInt32 KeContextSwitches { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1276); } }
		public UInt32 KeDcacheFlushCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1280); } }
		public UInt32 KeExceptionDispatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1284); } }
		public UInt32 KeFirstLevelTbFills { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1288); } }
		public UInt32 KeFloatingEmulationCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1292); } }
		public UInt32 KeIcacheFlushCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296); } }
		public UInt32 KeSecondLevelTbFills { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300); } }
		public UInt32 KeSystemCalls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1304); } }
		public UInt32[] SpareCounter0
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 1308);
				return returnValue;
			}
		}
		public _PP_LOOKASIDE_LIST[] PPLookasideList
		{
			get
			{
				_PP_LOOKASIDE_LIST[] returnValue = new _PP_LOOKASIDE_LIST[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _PP_LOOKASIDE_LIST(_StructureData, (i * size) + _BufferOffset + 1312);
				return returnValue;
			}
		}
		public _PP_LOOKASIDE_LIST[] PPNPagedLookasideList
		{
			get
			{
				_PP_LOOKASIDE_LIST[] returnValue = new _PP_LOOKASIDE_LIST[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _PP_LOOKASIDE_LIST(_StructureData, (i * size) + _BufferOffset + 1440);
				return returnValue;
			}
		}
		public _PP_LOOKASIDE_LIST[] PPPagedLookasideList
		{
			get
			{
				_PP_LOOKASIDE_LIST[] returnValue = new _PP_LOOKASIDE_LIST[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _PP_LOOKASIDE_LIST(_StructureData, (i * size) + _BufferOffset + 1696);
				return returnValue;
			}
		}
		public UInt32 PacketBarrier { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1952); } }
		public UInt32 ReverseStall { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1956); } }
		public UInt32 IpiFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1960); } }
		public Byte[] PrcbPad2
		{
			get
			{
				Byte[] returnValue = new Byte[52];
				for(int i=0; i<52; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1964];
				return returnValue;
			}
		}
		public UInt32[] CurrentPacket
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				int size = 4;
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 2016);
				return returnValue;
			}
		}
		public UInt32 TargetSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2028); } }
		public UInt32 WorkerRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2032); } }
		public UInt32 IpiFrozen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2036); } }
		public Byte[] PrcbPad3
		{
			get
			{
				Byte[] returnValue = new Byte[40];
				for(int i=0; i<40; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2040];
				return returnValue;
			}
		}
		public UInt32 RequestSummary { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2080); } }
		public UInt32 SignalDone { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2084); } }
		public Byte[] PrcbPad4
		{
			get
			{
				Byte[] returnValue = new Byte[56];
				for(int i=0; i<56; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2088];
				return returnValue;
			}
		}
		public _LIST_ENTRY DpcListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2144);
				return returnValue;
			}
		}
		public UInt32 DpcStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2152); } }
		public UInt32 DpcCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2156); } }
		public UInt32 DpcQueueDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2160); } }
		public UInt32 DpcRoutineActive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2164); } }
		public UInt32 DpcInterruptRequested { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2168); } }
		public UInt32 DpcLastCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172); } }
		public UInt32 DpcRequestRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2176); } }
		public UInt32 MaximumDpcQueueDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2180); } }
		public UInt32 MinimumDpcRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2184); } }
		public UInt32 QuantumEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2188); } }
		public Byte[] PrcbPad5
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2192];
				return returnValue;
			}
		}
		public UInt32 DpcLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2208); } }
		public Byte[] PrcbPad6
		{
			get
			{
				Byte[] returnValue = new Byte[28];
				for(int i=0; i<28; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2212];
				return returnValue;
			}
		}
		public _KDPC CallDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 2240);
				return returnValue;
			}
		}
		public UInt32 ChainedInterruptList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2272); } }
		public Int32 LookasideIrpFloat { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 2276); } }
		public UInt32[] SpareFields0
		{
			get
			{
				UInt32[] returnValue = new UInt32[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 2280);
				return returnValue;
			}
		}
		public Byte[] VendorString
		{
			get
			{
				Byte[] returnValue = new Byte[13];
				for(int i=0; i<13; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2304];
				return returnValue;
			}
		}
		public Byte InitialApicId{ get { return _StructureData[_BufferOffset +2317]; } }
		public Byte LogicalProcessorsPerPhysicalProcessor{ get { return _StructureData[_BufferOffset +2318]; } }
		public UInt32 MHz { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2320); } }
		public UInt32 FeatureBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2324); } }
		public _LARGE_INTEGER UpdateSignature
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 2328);
				return returnValue;
			}
		}
		public _FX_SAVE_AREA NpxSaveArea
		{
			get
			{
				_FX_SAVE_AREA returnValue = new _FX_SAVE_AREA(_StructureData, _BufferOffset + 2336);
				return returnValue;
			}
		}
		public _PROCESSOR_POWER_STATE PowerState
		{
			get
			{
				_PROCESSOR_POWER_STATE returnValue = new _PROCESSOR_POWER_STATE(_StructureData, _BufferOffset + 2864);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EX_RUNDOWN_REF
 
	public class _EX_RUNDOWN_REF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_RUNDOWN_REF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_RUNDOWN_REF"": [ 4, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Ptr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EX_FAST_REF
 
	public class _EX_FAST_REF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_FAST_REF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_FAST_REF"": [ 4, {
				 ""Object"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RefCnt"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Value"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Object { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RefCnt
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 7) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Value { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EX_PUSH_LOCK
 
	public class _EX_PUSH_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PUSH_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PUSH_LOCK"": [ 4, {
				 ""Waiting"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Exclusive"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Shared"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Value"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Waiting
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Exclusive
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Shared
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Value { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Ptr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EX_PUSH_LOCK_WAIT_BLOCK
 
	public class _EX_PUSH_LOCK_WAIT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PUSH_LOCK_WAIT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PUSH_LOCK_WAIT_BLOCK"": [ 28, {
				 ""WakeEvent"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""Next"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EX_PUSH_LOCK_WAIT_BLOCK\""}"" ]],
				 ""ShareCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Exclusive"": [ 24, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT WakeEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ShareCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Byte Exclusive{ get { return _StructureData[_BufferOffset +24]; } }
	}
	#endregion
	#region _EX_PUSH_LOCK_CACHE_AWARE
 
	public class _EX_PUSH_LOCK_CACHE_AWARE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PUSH_LOCK_CACHE_AWARE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PUSH_LOCK_CACHE_AWARE"": [ 4, {
				 ""Locks"": [ 0, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_EX_PUSH_LOCK\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Locks
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				int size = 4;
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETHREAD
 
	public class _ETHREAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETHREAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 600; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETHREAD"": [ 600, {
				 ""Tcb"": [ 0, [ ""_KTHREAD"", ""null"" ]],
				 ""CreateTime"": [ 448, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""NestedFaultCount"": [ 448, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ApcNeeded"": [ 448, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ExitTime"": [ 456, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LpcReplyChain"": [ 456, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KeyedWaitChain"": [ 456, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExitStatus"": [ 464, [ ""Int32"", ""null"" ]],
				 ""OfsChain"": [ 464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostBlockList"": [ 468, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TerminationPort"": [ 476, [ ""Pointer"", ""{\""target\"":\""_TERMINATION_PORT\""}"" ]],
				 ""ReaperLink"": [ 476, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""KeyedWaitValue"": [ 476, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveTimerListLock"": [ 480, [ ""UInt32"", ""null"" ]],
				 ""ActiveTimerListHead"": [ 484, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Cid"": [ 492, [ ""_CLIENT_ID"", ""null"" ]],
				 ""LpcReplySemaphore"": [ 500, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""KeyedWaitSemaphore"": [ 500, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""LpcReplyMessage"": [ 520, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LpcWaitingOnPort"": [ 520, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImpersonationInfo"": [ 524, [ ""Pointer"", ""{\""target\"":\""_PS_IMPERSONATION_INFORMATION\""}"" ]],
				 ""IrpList"": [ 528, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TopLevelIrp"": [ 536, [ ""UInt32"", ""null"" ]],
				 ""DeviceToVerify"": [ 540, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ThreadsProcess"": [ 544, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""StartAddress"": [ 548, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32StartAddress"": [ 552, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LpcReceivedMessageId"": [ 552, [ ""UInt32"", ""null"" ]],
				 ""ThreadListEntry"": [ 556, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RundownProtect"": [ 564, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""ThreadLock"": [ 568, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""LpcReplyMessageId"": [ 572, [ ""UInt32"", ""null"" ]],
				 ""ReadClusterSize"": [ 576, [ ""UInt32"", ""null"" ]],
				 ""GrantedAccess"": [ 580, [ ""UInt32"", ""null"" ]],
				 ""CrossThreadFlags"": [ 584, [ ""UInt32"", ""null"" ]],
				 ""Terminated"": [ 584, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DeadThread"": [ 584, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""HideFromDebugger"": [ 584, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ActiveImpersonationInfo"": [ 584, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""SystemThread"": [ 584, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""HardErrorsAreDisabled"": [ 584, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""BreakOnTermination"": [ 584, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""SkipCreationMsg"": [ 584, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""SkipTerminationMsg"": [ 584, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SameThreadPassiveFlags"": [ 588, [ ""UInt32"", ""null"" ]],
				 ""ActiveExWorker"": [ 588, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ExWorkerCanWaitUser"": [ 588, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""MemoryMaker"": [ 588, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SameThreadApcFlags"": [ 592, [ ""UInt32"", ""null"" ]],
				 ""LpcReceivedMsgIdValid"": [ 592, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""LpcExitThreadCalled"": [ 592, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""AddressSpaceOwner"": [ 592, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ForwardClusterOnly"": [ 596, [ ""Byte"", ""null"" ]],
				 ""DisablePageFaultClustering"": [ 597, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KTHREAD Tcb
		{
			get
			{
				_KTHREAD returnValue = new _KTHREAD(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER CreateTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public UInt32 NestedFaultCount
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 448);
				var value2 = (value & 3) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ApcNeeded
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 448);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public _LARGE_INTEGER ExitTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 456);
				return returnValue;
			}
		}
		public _LIST_ENTRY LpcReplyChain
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 456);
				return returnValue;
			}
		}
		public _LIST_ENTRY KeyedWaitChain
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 456);
				return returnValue;
			}
		}
		public Int32 ExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 464); } }
		public UInt32 OfsChain { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 464); } }
		public _LIST_ENTRY PostBlockList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 468);
				return returnValue;
			}
		}
		public UInt32 TerminationPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 476); } }
		public UInt32 ReaperLink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 476); } }
		public UInt32 KeyedWaitValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 476); } }
		public UInt32 ActiveTimerListLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 480); } }
		public _LIST_ENTRY ActiveTimerListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 484);
				return returnValue;
			}
		}
		public _CLIENT_ID Cid
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 492);
				return returnValue;
			}
		}
		public _KSEMAPHORE LpcReplySemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 500);
				return returnValue;
			}
		}
		public _KSEMAPHORE KeyedWaitSemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 500);
				return returnValue;
			}
		}
		public UInt32 LpcReplyMessage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
		public UInt32 LpcWaitingOnPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
		public UInt32 ImpersonationInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 524); } }
		public _LIST_ENTRY IrpList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 528);
				return returnValue;
			}
		}
		public UInt32 TopLevelIrp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 536); } }
		public UInt32 DeviceToVerify { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 540); } }
		public UInt32 ThreadsProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 544); } }
		public UInt32 StartAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 548); } }
		public UInt32 Win32StartAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 552); } }
		public UInt32 LpcReceivedMessageId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 552); } }
		public _LIST_ENTRY ThreadListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 556);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RundownProtect
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 564);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK ThreadLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 568);
				return returnValue;
			}
		}
		public UInt32 LpcReplyMessageId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 572); } }
		public UInt32 ReadClusterSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 576); } }
		public UInt32 GrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 580); } }
		public UInt32 CrossThreadFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 584); } }
		public UInt32 Terminated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DeadThread
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 HideFromDebugger
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ActiveImpersonationInfo
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemThread
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 HardErrorsAreDisabled
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 BreakOnTermination
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 SkipCreationMsg
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 SkipTerminationMsg
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SameThreadPassiveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 588); } }
		public UInt32 ActiveExWorker
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 588);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ExWorkerCanWaitUser
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 588);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 MemoryMaker
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 588);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SameThreadApcFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 592); } }
		public Byte LpcReceivedMsgIdValid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 592];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte LpcExitThreadCalled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 592];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte AddressSpaceOwner
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 592];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte ForwardClusterOnly{ get { return _StructureData[_BufferOffset +596]; } }
		public Byte DisablePageFaultClustering{ get { return _StructureData[_BufferOffset +597]; } }
	}
	#endregion
	#region _EPROCESS
 
	public class _EPROCESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPROCESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 608; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPROCESS"": [ 608, {
				 ""Pcb"": [ 0, [ ""_KPROCESS"", ""null"" ]],
				 ""ProcessLock"": [ 108, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""CreateTime"": [ 112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ExitTime"": [ 120, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""RundownProtect"": [ 128, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""UniqueProcessId"": [ 132, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveProcessLinks"": [ 136, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""QuotaUsage"": [ 144, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""QuotaPeak"": [ 156, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""CommitCharge"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""PeakVirtualSize"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""VirtualSize"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""SessionProcessLinks"": [ 180, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DebugPort"": [ 188, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExceptionPort"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ObjectTable"": [ 196, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE\""}"" ]],
				 ""Token"": [ 200, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""WorkingSetLock"": [ 204, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""WorkingSetPage"": [ 236, [ ""UInt32"", ""null"" ]],
				 ""AddressCreationLock"": [ 240, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""HyperSpaceLock"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""ForkInProgress"": [ 276, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""HardwareTrigger"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""VadRoot"": [ 284, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VadHint"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CloneRoot"": [ 292, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfPrivatePages"": [ 296, [ ""UInt32"", ""null"" ]],
				 ""NumberOfLockedPages"": [ 300, [ ""UInt32"", ""null"" ]],
				 ""Win32Process"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Job"": [ 308, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""SectionObject"": [ 312, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SectionBaseAddress"": [ 316, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QuotaBlock"": [ 320, [ ""Pointer"", ""{\""target\"":\""_EPROCESS_QUOTA_BLOCK\""}"" ]],
				 ""WorkingSetWatch"": [ 324, [ ""Pointer"", ""{\""target\"":\""_PAGEFAULT_HISTORY\""}"" ]],
				 ""Win32WindowStation"": [ 328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InheritedFromUniqueProcessId"": [ 332, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LdtInformation"": [ 336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VadFreeHint"": [ 340, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VdmObjects"": [ 344, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceMap"": [ 348, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PhysicalVadList"": [ 352, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PageDirectoryPte"": [ 360, [ ""_HARDWARE_PTE"", ""null"" ]],
				 ""Filler"": [ 360, [ ""UInt64"", ""null"" ]],
				 ""Session"": [ 368, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageFileName"": [ 372, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""JobLinks"": [ 388, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LockedPagesList"": [ 396, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadListHead"": [ 400, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SecurityPort"": [ 408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PaeTop"": [ 412, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveThreads"": [ 416, [ ""UInt32"", ""null"" ]],
				 ""GrantedAccess"": [ 420, [ ""UInt32"", ""null"" ]],
				 ""DefaultHardErrorProcessing"": [ 424, [ ""UInt32"", ""null"" ]],
				 ""LastThreadExitStatus"": [ 428, [ ""Int32"", ""null"" ]],
				 ""Peb"": [ 432, [ ""Pointer"", ""{\""target\"":\""_PEB\""}"" ]],
				 ""PrefetchTrace"": [ 436, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""ReadOperationCount"": [ 440, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""WriteOperationCount"": [ 448, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""OtherOperationCount"": [ 456, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReadTransferCount"": [ 464, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""WriteTransferCount"": [ 472, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""OtherTransferCount"": [ 480, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""CommitChargeLimit"": [ 488, [ ""UInt32"", ""null"" ]],
				 ""CommitChargePeak"": [ 492, [ ""UInt32"", ""null"" ]],
				 ""AweInfo"": [ 496, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SeAuditProcessCreationInfo"": [ 500, [ ""_SE_AUDIT_PROCESS_CREATION_INFO"", ""null"" ]],
				 ""Vm"": [ 504, [ ""_MMSUPPORT"", ""null"" ]],
				 ""LastFaultCount"": [ 568, [ ""UInt32"", ""null"" ]],
				 ""ModifiedPageCount"": [ 572, [ ""UInt32"", ""null"" ]],
				 ""NumberOfVads"": [ 576, [ ""UInt32"", ""null"" ]],
				 ""JobStatus"": [ 580, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 584, [ ""UInt32"", ""null"" ]],
				 ""CreateReported"": [ 584, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""NoDebugInherit"": [ 584, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessExiting"": [ 584, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessDelete"": [ 584, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Wow64SplitPages"": [ 584, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""VmDeleted"": [ 584, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""OutswapEnabled"": [ 584, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""Outswapped"": [ 584, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ForkFailed"": [ 584, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""HasPhysicalVad"": [ 584, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""AddressSpaceInitialized"": [ 584, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""SetTimerResolution"": [ 584, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""BreakOnTermination"": [ 584, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""SessionCreationUnderway"": [ 584, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""WriteWatch"": [ 584, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessInSession"": [ 584, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""OverrideAddressSpace"": [ 584, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""HasAddressSpace"": [ 584, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""LaunchPrefetched"": [ 584, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""InjectInpageErrors"": [ 584, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""VmTopDown"": [ 584, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""Unused3"": [ 584, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""Unused4"": [ 584, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""VdmAllowed"": [ 584, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""Unused"": [ 584, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""Unused1"": [ 584, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""Unused2"": [ 584, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""ExitStatus"": [ 588, [ ""Int32"", ""null"" ]],
				 ""NextPageColor"": [ 592, [ ""UInt16"", ""null"" ]],
				 ""SubSystemMinorVersion"": [ 594, [ ""Byte"", ""null"" ]],
				 ""SubSystemMajorVersion"": [ 595, [ ""Byte"", ""null"" ]],
				 ""SubSystemVersion"": [ 594, [ ""UInt16"", ""null"" ]],
				 ""PriorityClass"": [ 596, [ ""Byte"", ""null"" ]],
				 ""WorkingSetAcquiredUnsafe"": [ 597, [ ""Byte"", ""null"" ]],
				 ""Cookie"": [ 600, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KPROCESS Pcb
		{
			get
			{
				_KPROCESS returnValue = new _KPROCESS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK ProcessLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 108);
				return returnValue;
			}
		}
		public _LARGE_INTEGER CreateTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ExitTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RundownProtect
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 UniqueProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public _LIST_ENTRY ActiveProcessLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt32[] QuotaUsage
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt32[] QuotaPeak
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 156);
				return returnValue;
			}
		}
		public UInt32 CommitCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 PeakVirtualSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 VirtualSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public _LIST_ENTRY SessionProcessLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 180);
				return returnValue;
			}
		}
		public UInt32 DebugPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 ExceptionPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 ObjectTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public _EX_FAST_REF Token
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public _FAST_MUTEX WorkingSetLock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 204);
				return returnValue;
			}
		}
		public UInt32 WorkingSetPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public _FAST_MUTEX AddressCreationLock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt32 HyperSpaceLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 ForkInProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
		public UInt32 HardwareTrigger { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 VadRoot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt32 VadHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public UInt32 CloneRoot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public UInt32 NumberOfPrivatePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 296); } }
		public UInt32 NumberOfLockedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 300); } }
		public UInt32 Win32Process { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
		public UInt32 Job { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 308); } }
		public UInt32 SectionObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 312); } }
		public UInt32 SectionBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 316); } }
		public UInt32 QuotaBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 320); } }
		public UInt32 WorkingSetWatch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 324); } }
		public UInt32 Win32WindowStation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 328); } }
		public UInt32 InheritedFromUniqueProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 332); } }
		public UInt32 LdtInformation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 336); } }
		public UInt32 VadFreeHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 340); } }
		public UInt32 VdmObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 344); } }
		public UInt32 DeviceMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 348); } }
		public _LIST_ENTRY PhysicalVadList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
		public _HARDWARE_PTE PageDirectoryPte
		{
			get
			{
				_HARDWARE_PTE returnValue = new _HARDWARE_PTE(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public UInt64 Filler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt32 Session { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 368); } }
		public Byte[] ImageFileName
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 372];
				return returnValue;
			}
		}
		public _LIST_ENTRY JobLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 388);
				return returnValue;
			}
		}
		public UInt32 LockedPagesList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 396); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 400);
				return returnValue;
			}
		}
		public UInt32 SecurityPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 408); } }
		public UInt32 PaeTop { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 412); } }
		public UInt32 ActiveThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 416); } }
		public UInt32 GrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 420); } }
		public UInt32 DefaultHardErrorProcessing { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 424); } }
		public Int32 LastThreadExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 428); } }
		public UInt32 Peb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 432); } }
		public _EX_FAST_REF PrefetchTrace
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 436);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ReadOperationCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 440);
				return returnValue;
			}
		}
		public _LARGE_INTEGER WriteOperationCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public _LARGE_INTEGER OtherOperationCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 456);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ReadTransferCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 464);
				return returnValue;
			}
		}
		public _LARGE_INTEGER WriteTransferCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public _LARGE_INTEGER OtherTransferCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 480);
				return returnValue;
			}
		}
		public UInt32 CommitChargeLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 488); } }
		public UInt32 CommitChargePeak { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 492); } }
		public UInt32 AweInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 496); } }
		public _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo
		{
			get
			{
				_SE_AUDIT_PROCESS_CREATION_INFO returnValue = new _SE_AUDIT_PROCESS_CREATION_INFO(_StructureData, _BufferOffset + 500);
				return returnValue;
			}
		}
		public _MMSUPPORT Vm
		{
			get
			{
				_MMSUPPORT returnValue = new _MMSUPPORT(_StructureData, _BufferOffset + 504);
				return returnValue;
			}
		}
		public UInt32 LastFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 568); } }
		public UInt32 ModifiedPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 572); } }
		public UInt32 NumberOfVads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 576); } }
		public UInt32 JobStatus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 580); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 584); } }
		public UInt32 CreateReported
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 NoDebugInherit
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessExiting
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessDelete
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Wow64SplitPages
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 VmDeleted
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 OutswapEnabled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 Outswapped
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ForkFailed
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 HasPhysicalVad
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressSpaceInitialized
		{
			get
			{
				// start: 10  end: 12  Mask: 0000110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 3072) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 SetTimerResolution
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 BreakOnTermination
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 SessionCreationUnderway
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 WriteWatch
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessInSession
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 OverrideAddressSpace
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 HasAddressSpace
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 LaunchPrefetched
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 InjectInpageErrors
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 VmTopDown
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused3
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused4
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 VdmAllowed
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused
		{
			get
			{
				// start: 25  end: 30  Mask: 111110000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 1040187392) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused1
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused2
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 584);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public Int32 ExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 588); } }
		public UInt16 NextPageColor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 592); } }
		public Byte SubSystemMinorVersion{ get { return _StructureData[_BufferOffset +594]; } }
		public Byte SubSystemMajorVersion{ get { return _StructureData[_BufferOffset +595]; } }
		public UInt16 SubSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 594); } }
		public Byte PriorityClass{ get { return _StructureData[_BufferOffset +596]; } }
		public Byte WorkingSetAcquiredUnsafe{ get { return _StructureData[_BufferOffset +597]; } }
		public UInt32 Cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 600); } }
	}
	#endregion
	#region _OBJECT_ATTRIBUTES
 
	public class _OBJECT_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_ATTRIBUTES"": [ 24, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RootDirectory"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ObjectName"": [ 8, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""Attributes"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptor"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityQualityOfService"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RootDirectory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ObjectName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SecurityDescriptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SecurityQualityOfService { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _OBJECT_TYPE
 
	public class _OBJECT_TYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_TYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 400; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_TYPE"": [ 400, {
				 ""Mutex"": [ 0, [ ""_ERESOURCE"", ""null"" ]],
				 ""TypeList"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Name"": [ 64, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DefaultObject"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Index"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""TotalNumberOfObjects"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""TotalNumberOfHandles"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""HighWaterNumberOfObjects"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""HighWaterNumberOfHandles"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""TypeInfo"": [ 96, [ ""_OBJECT_TYPE_INITIALIZER"", ""null"" ]],
				 ""Key"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""ObjectLocks"": [ 176, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _ERESOURCE Mutex
		{
			get
			{
				_ERESOURCE returnValue = new _ERESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY TypeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 DefaultObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 Index { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 TotalNumberOfObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 TotalNumberOfHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 HighWaterNumberOfObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 HighWaterNumberOfHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _OBJECT_TYPE_INITIALIZER TypeInfo
		{
			get
			{
				_OBJECT_TYPE_INITIALIZER returnValue = new _OBJECT_TYPE_INITIALIZER(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public _ERESOURCE[] ObjectLocks
		{
			get
			{
				_ERESOURCE[] returnValue = new _ERESOURCE[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _ERESOURCE(_StructureData, (i * size) + _BufferOffset + 176);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HANDLE_INFORMATION
 
	public class _OBJECT_HANDLE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HANDLE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HANDLE_INFORMATION"": [ 8, {
				 ""HandleAttributes"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GrantedAccess"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HandleAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KTHREAD
 
	public class _KTHREAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTHREAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 448; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTHREAD"": [ 448, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""MutantListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InitialStack"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackLimit"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Teb"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsArray"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KernelStack"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DebugActive"": [ 44, [ ""Byte"", ""null"" ]],
				 ""State"": [ 45, [ ""Byte"", ""null"" ]],
				 ""Alerted"": [ 46, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Iopl"": [ 48, [ ""Byte"", ""null"" ]],
				 ""NpxState"": [ 49, [ ""Byte"", ""null"" ]],
				 ""Saturation"": [ 50, [ ""Char"", ""null"" ]],
				 ""Priority"": [ 51, [ ""Char"", ""null"" ]],
				 ""ApcState"": [ 52, [ ""_KAPC_STATE"", ""null"" ]],
				 ""ContextSwitches"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""IdleSwapBlock"": [ 80, [ ""Byte"", ""null"" ]],
				 ""Spare0"": [ 81, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""WaitStatus"": [ 84, [ ""Int32"", ""null"" ]],
				 ""WaitIrql"": [ 88, [ ""Byte"", ""null"" ]],
				 ""WaitMode"": [ 89, [ ""Char"", ""null"" ]],
				 ""WaitNext"": [ 90, [ ""Byte"", ""null"" ]],
				 ""WaitReason"": [ 91, [ ""Byte"", ""null"" ]],
				 ""WaitBlockList"": [ 92, [ ""Pointer"", ""{\""target\"":\""_KWAIT_BLOCK\""}"" ]],
				 ""WaitListEntry"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SwapListEntry"": [ 96, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""WaitTime"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""BasePriority"": [ 108, [ ""Char"", ""null"" ]],
				 ""DecrementCount"": [ 109, [ ""Byte"", ""null"" ]],
				 ""PriorityDecrement"": [ 110, [ ""Char"", ""null"" ]],
				 ""Quantum"": [ 111, [ ""Char"", ""null"" ]],
				 ""WaitBlock"": [ 112, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""LegoData"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KernelApcDisable"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""UserAffinity"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""SystemAffinityActive"": [ 220, [ ""Byte"", ""null"" ]],
				 ""PowerState"": [ 221, [ ""Byte"", ""null"" ]],
				 ""NpxIrql"": [ 222, [ ""Byte"", ""null"" ]],
				 ""InitialNode"": [ 223, [ ""Byte"", ""null"" ]],
				 ""ServiceTable"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Queue"": [ 228, [ ""Pointer"", ""{\""target\"":\""_KQUEUE\""}"" ]],
				 ""ApcQueueLock"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""Timer"": [ 240, [ ""_KTIMER"", ""null"" ]],
				 ""QueueListEntry"": [ 280, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SoftAffinity"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""Affinity"": [ 292, [ ""UInt32"", ""null"" ]],
				 ""Preempted"": [ 296, [ ""Byte"", ""null"" ]],
				 ""ProcessReadyQueue"": [ 297, [ ""Byte"", ""null"" ]],
				 ""KernelStackResident"": [ 298, [ ""Byte"", ""null"" ]],
				 ""NextProcessor"": [ 299, [ ""Byte"", ""null"" ]],
				 ""CallbackStack"": [ 300, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32Thread"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TrapFrame"": [ 308, [ ""Pointer"", ""{\""target\"":\""_KTRAP_FRAME\""}"" ]],
				 ""ApcStatePointer"": [ 312, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_KAPC_STATE\""}}"" ]],
				 ""PreviousMode"": [ 320, [ ""Char"", ""null"" ]],
				 ""EnableStackSwap"": [ 321, [ ""Byte"", ""null"" ]],
				 ""LargeStack"": [ 322, [ ""Byte"", ""null"" ]],
				 ""ResourceIndex"": [ 323, [ ""Byte"", ""null"" ]],
				 ""KernelTime"": [ 324, [ ""UInt32"", ""null"" ]],
				 ""UserTime"": [ 328, [ ""UInt32"", ""null"" ]],
				 ""SavedApcState"": [ 332, [ ""_KAPC_STATE"", ""null"" ]],
				 ""Alertable"": [ 356, [ ""Byte"", ""null"" ]],
				 ""ApcStateIndex"": [ 357, [ ""Byte"", ""null"" ]],
				 ""ApcQueueable"": [ 358, [ ""Byte"", ""null"" ]],
				 ""AutoAlignment"": [ 359, [ ""Byte"", ""null"" ]],
				 ""StackBase"": [ 360, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SuspendApc"": [ 364, [ ""_KAPC"", ""null"" ]],
				 ""SuspendSemaphore"": [ 412, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""ThreadListEntry"": [ 432, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreezeCount"": [ 440, [ ""Char"", ""null"" ]],
				 ""SuspendCount"": [ 441, [ ""Char"", ""null"" ]],
				 ""IdealProcessor"": [ 442, [ ""Byte"", ""null"" ]],
				 ""DisableBoost"": [ 443, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY MutantListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 InitialStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 StackLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Teb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 TlsArray { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 KernelStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Byte DebugActive{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte State{ get { return _StructureData[_BufferOffset +45]; } }
		public Byte[] Alerted
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 46];
				return returnValue;
			}
		}
		public Byte Iopl{ get { return _StructureData[_BufferOffset +48]; } }
		public Byte NpxState{ get { return _StructureData[_BufferOffset +49]; } }
		public Char Saturation { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 50); } }
		public Char Priority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 51); } }
		public _KAPC_STATE ApcState
		{
			get
			{
				_KAPC_STATE returnValue = new _KAPC_STATE(_StructureData, _BufferOffset + 52);
				return returnValue;
			}
		}
		public UInt32 ContextSwitches { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public Byte IdleSwapBlock{ get { return _StructureData[_BufferOffset +80]; } }
		public Byte[] Spare0
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 81];
				return returnValue;
			}
		}
		public Int32 WaitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 84); } }
		public Byte WaitIrql{ get { return _StructureData[_BufferOffset +88]; } }
		public Char WaitMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 89); } }
		public Byte WaitNext{ get { return _StructureData[_BufferOffset +90]; } }
		public Byte WaitReason{ get { return _StructureData[_BufferOffset +91]; } }
		public UInt32 WaitBlockList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _LIST_ENTRY WaitListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SwapListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt32 WaitTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public Char BasePriority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 108); } }
		public Byte DecrementCount{ get { return _StructureData[_BufferOffset +109]; } }
		public Char PriorityDecrement { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 110); } }
		public Char Quantum { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 111); } }
		public _KWAIT_BLOCK[] WaitBlock
		{
			get
			{
				_KWAIT_BLOCK[] returnValue = new _KWAIT_BLOCK[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _KWAIT_BLOCK(_StructureData, (i * size) + _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 LegoData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 KernelApcDisable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public UInt32 UserAffinity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public Byte SystemAffinityActive{ get { return _StructureData[_BufferOffset +220]; } }
		public Byte PowerState{ get { return _StructureData[_BufferOffset +221]; } }
		public Byte NpxIrql{ get { return _StructureData[_BufferOffset +222]; } }
		public Byte InitialNode{ get { return _StructureData[_BufferOffset +223]; } }
		public UInt32 ServiceTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt32 Queue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 228); } }
		public UInt32 ApcQueueLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public _KTIMER Timer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _LIST_ENTRY QueueListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public UInt32 SoftAffinity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public UInt32 Affinity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public Byte Preempted{ get { return _StructureData[_BufferOffset +296]; } }
		public Byte ProcessReadyQueue{ get { return _StructureData[_BufferOffset +297]; } }
		public Byte KernelStackResident{ get { return _StructureData[_BufferOffset +298]; } }
		public Byte NextProcessor{ get { return _StructureData[_BufferOffset +299]; } }
		public UInt32 CallbackStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 300); } }
		public UInt32 Win32Thread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
		public UInt32 TrapFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 308); } }
		public UInt32[] ApcStatePointer
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				int size = 4;
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 312);
				return returnValue;
			}
		}
		public Char PreviousMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 320); } }
		public Byte EnableStackSwap{ get { return _StructureData[_BufferOffset +321]; } }
		public Byte LargeStack{ get { return _StructureData[_BufferOffset +322]; } }
		public Byte ResourceIndex{ get { return _StructureData[_BufferOffset +323]; } }
		public UInt32 KernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 324); } }
		public UInt32 UserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 328); } }
		public _KAPC_STATE SavedApcState
		{
			get
			{
				_KAPC_STATE returnValue = new _KAPC_STATE(_StructureData, _BufferOffset + 332);
				return returnValue;
			}
		}
		public Byte Alertable{ get { return _StructureData[_BufferOffset +356]; } }
		public Byte ApcStateIndex{ get { return _StructureData[_BufferOffset +357]; } }
		public Byte ApcQueueable{ get { return _StructureData[_BufferOffset +358]; } }
		public Byte AutoAlignment{ get { return _StructureData[_BufferOffset +359]; } }
		public UInt32 StackBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 360); } }
		public _KAPC SuspendApc
		{
			get
			{
				_KAPC returnValue = new _KAPC(_StructureData, _BufferOffset + 364);
				return returnValue;
			}
		}
		public _KSEMAPHORE SuspendSemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 412);
				return returnValue;
			}
		}
		public _LIST_ENTRY ThreadListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 432);
				return returnValue;
			}
		}
		public Char FreezeCount { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 440); } }
		public Char SuspendCount { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 441); } }
		public Byte IdealProcessor{ get { return _StructureData[_BufferOffset +442]; } }
		public Byte DisableBoost{ get { return _StructureData[_BufferOffset +443]; } }
	}
	#endregion
	#region _FX_SAVE_AREA
 
	public class _FX_SAVE_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FX_SAVE_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 528; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FX_SAVE_AREA"": [ 528, {
				 ""U"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""NpxSavedCpu"": [ 520, [ ""UInt32"", ""null"" ]],
				 ""Cr0NpxState"": [ 524, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed U
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 NpxSavedCpu { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
		public UInt32 Cr0NpxState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 524); } }
	}
	#endregion
	#region _MMPTE
 
	public class _MMPTE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE"": [ 8, {
				 ""u"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXCEPTION_RECORD64
 
	public class _EXCEPTION_RECORD64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_RECORD64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_RECORD64"": [ 152, {
				 ""ExceptionCode"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ExceptionFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExceptionRecord"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ExceptionAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""NumberParameters"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""__unusedAlignment"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ExceptionInformation"": [ 32, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExceptionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ExceptionRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExceptionAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 __unusedAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64[] ExceptionInformation
		{
			get
			{
				UInt64[] returnValue = new UInt64[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXCEPTION_RECORD32
 
	public class _EXCEPTION_RECORD32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_RECORD32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_RECORD32"": [ 80, {
				 ""ExceptionCode"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ExceptionFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExceptionRecord"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ExceptionAddress"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""NumberParameters"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ExceptionInformation"": [ 20, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExceptionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ExceptionRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ExceptionAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NumberParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] ExceptionInformation
		{
			get
			{
				UInt32[] returnValue = new UInt32[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKM_EXCEPTION64
 
	public class _DBGKM_EXCEPTION64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKM_EXCEPTION64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKM_EXCEPTION64"": [ 160, {
				 ""ExceptionRecord"": [ 0, [ ""_EXCEPTION_RECORD64"", ""null"" ]],
				 ""FirstChance"": [ 152, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EXCEPTION_RECORD64 ExceptionRecord
		{
			get
			{
				_EXCEPTION_RECORD64 returnValue = new _EXCEPTION_RECORD64(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 FirstChance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _DBGKM_EXCEPTION32
 
	public class _DBGKM_EXCEPTION32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKM_EXCEPTION32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 84; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKM_EXCEPTION32"": [ 84, {
				 ""ExceptionRecord"": [ 0, [ ""_EXCEPTION_RECORD32"", ""null"" ]],
				 ""FirstChance"": [ 80, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EXCEPTION_RECORD32 ExceptionRecord
		{
			get
			{
				_EXCEPTION_RECORD32 returnValue = new _EXCEPTION_RECORD32(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 FirstChance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _DBGKD_LOAD_SYMBOLS64
 
	public class _DBGKD_LOAD_SYMBOLS64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_LOAD_SYMBOLS64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_LOAD_SYMBOLS64"": [ 40, {
				 ""PathNameLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BaseOfDll"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ProcessId"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CheckSum"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""UnloadSymbols"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PathNameLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 BaseOfDll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ProcessId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte UnloadSymbols{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _DBGKD_LOAD_SYMBOLS32
 
	public class _DBGKD_LOAD_SYMBOLS32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_LOAD_SYMBOLS32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_LOAD_SYMBOLS32"": [ 24, {
				 ""PathNameLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BaseOfDll"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ProcessId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""UnloadSymbols"": [ 20, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PathNameLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BaseOfDll { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte UnloadSymbols{ get { return _StructureData[_BufferOffset +20]; } }
	}
	#endregion
	#region _DBGKD_READ_MEMORY64
 
	public class _DBGKD_READ_MEMORY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_MEMORY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_MEMORY64"": [ 16, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TransferCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesRead"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TargetBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActualBytesRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_READ_MEMORY32
 
	public class _DBGKD_READ_MEMORY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_MEMORY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_MEMORY32"": [ 12, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TransferCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesRead"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TargetBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ActualBytesRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_WRITE_MEMORY64
 
	public class _DBGKD_WRITE_MEMORY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_MEMORY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_MEMORY64"": [ 16, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TransferCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesWritten"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TargetBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActualBytesWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_WRITE_MEMORY32
 
	public class _DBGKD_WRITE_MEMORY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_MEMORY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_MEMORY32"": [ 12, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TransferCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesWritten"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TargetBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ActualBytesWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_WRITE_BREAKPOINT64
 
	public class _DBGKD_WRITE_BREAKPOINT64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_BREAKPOINT64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_BREAKPOINT64"": [ 16, {
				 ""BreakPointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BreakPointHandle"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakPointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_WRITE_BREAKPOINT32
 
	public class _DBGKD_WRITE_BREAKPOINT32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_BREAKPOINT32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_BREAKPOINT32"": [ 8, {
				 ""BreakPointAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BreakPointHandle"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakPointAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO64
 
	public class _DBGKD_READ_WRITE_IO64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO64"": [ 16, {
				 ""IoAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""DataSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DataValue"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IoAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO32
 
	public class _DBGKD_READ_WRITE_IO32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO32"": [ 12, {
				 ""DataSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""IoAddress"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DataValue"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 IoAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO_EXTENDED64
 
	public class _DBGKD_READ_WRITE_IO_EXTENDED64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO_EXTENDED64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO_EXTENDED64"": [ 32, {
				 ""DataSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AddressSpace"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IoAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DataValue"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 InterfaceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 IoAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO_EXTENDED32
 
	public class _DBGKD_READ_WRITE_IO_EXTENDED32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO_EXTENDED32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO_EXTENDED32"": [ 24, {
				 ""DataSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AddressSpace"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IoAddress"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataValue"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 InterfaceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 IoAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _DBGKD_SET_SPECIAL_CALL32
 
	public class _DBGKD_SET_SPECIAL_CALL32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_SPECIAL_CALL32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_SPECIAL_CALL32"": [ 4, {
				 ""SpecialCall"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SpecialCall { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DBGKD_SET_SPECIAL_CALL64
 
	public class _DBGKD_SET_SPECIAL_CALL64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_SPECIAL_CALL64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_SPECIAL_CALL64"": [ 8, {
				 ""SpecialCall"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SpecialCall { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DBGKD_SET_INTERNAL_BREAKPOINT32
 
	public class _DBGKD_SET_INTERNAL_BREAKPOINT32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_INTERNAL_BREAKPOINT32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_INTERNAL_BREAKPOINT32"": [ 8, {
				 ""BreakpointAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakpointAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DBGKD_SET_INTERNAL_BREAKPOINT64
 
	public class _DBGKD_SET_INTERNAL_BREAKPOINT64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_INTERNAL_BREAKPOINT64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_INTERNAL_BREAKPOINT64"": [ 16, {
				 ""BreakpointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakpointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_GET_INTERNAL_BREAKPOINT64
 
	public class _DBGKD_GET_INTERNAL_BREAKPOINT64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_INTERNAL_BREAKPOINT64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_INTERNAL_BREAKPOINT64"": [ 32, {
				 ""BreakpointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Calls"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MaxCallsPerPeriod"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""MinInstructions"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MaxInstructions"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TotalInstructions"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakpointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Calls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MaxCallsPerPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MinInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 MaxInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _DBGKD_GET_INTERNAL_BREAKPOINT32
 
	public class _DBGKD_GET_INTERNAL_BREAKPOINT32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_INTERNAL_BREAKPOINT32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_INTERNAL_BREAKPOINT32"": [ 28, {
				 ""BreakpointAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Calls"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaxCallsPerPeriod"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MinInstructions"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""MaxInstructions"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""TotalInstructions"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakpointAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Calls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MaxCallsPerPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MinInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MaxInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 TotalInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DBGKD_MANIPULATE_STATE64
 
	public class _DBGKD_MANIPULATE_STATE64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_MANIPULATE_STATE64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_MANIPULATE_STATE64"": [ 56, {
				 ""ApiNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProcessorLevel"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Processor"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ReturnStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""u"": [ 16, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ApiNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 ProcessorLevel { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Int32 ReturnStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_MANIPULATE_STATE32
 
	public class _DBGKD_MANIPULATE_STATE32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_MANIPULATE_STATE32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 52; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_MANIPULATE_STATE32"": [ 52, {
				 ""ApiNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProcessorLevel"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Processor"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ReturnStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""u"": [ 12, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ApiNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 ProcessorLevel { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Int32 ReturnStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VACB
 
	public class _VACB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VACB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VACB"": [ 24, {
				 ""BaseAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SharedCacheMap"": [ 4, [ ""Pointer"", ""{\""target\"":\""_SHARED_CACHE_MAP\""}"" ]],
				 ""Overlay"": [ 8, [ ""__unnamed"", ""null"" ]],
				 ""LruList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SharedCacheMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public __unnamed Overlay
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY LruList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SHARED_CACHE_MAP
 
	public class _SHARED_CACHE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SHARED_CACHE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 304; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SHARED_CACHE_MAP"": [ 304, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""Int16"", ""null"" ]],
				 ""OpenCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FileSize"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BcbList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SectionSize"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ValidDataLength"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ValidDataGoal"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""InitialVacbs"": [ 48, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_VACB\""}}"" ]],
				 ""Vacbs"": [ 64, [ ""Pointer"", ""{\""target\"":\""_VACB*\""}"" ]],
				 ""FileObject"": [ 68, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ActiveVacb"": [ 72, [ ""Pointer"", ""{\""target\"":\""_VACB\""}"" ]],
				 ""NeedToZero"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActivePage"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""NeedToZeroPage"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""ActiveVacbSpinLock"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""VacbActiveCount"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DirtyPages"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""SharedCacheMapLinks"": [ 100, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 112, [ ""Int32"", ""null"" ]],
				 ""Mbcb"": [ 116, [ ""Pointer"", ""{\""target\"":\""_MBCB\""}"" ]],
				 ""Section"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreateEvent"": [ 124, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""WaitOnActiveCount"": [ 128, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""PagesToWrite"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""BeyondLastFlush"": [ 136, [ ""Int64"", ""null"" ]],
				 ""Callbacks"": [ 144, [ ""Pointer"", ""{\""target\"":\""_CACHE_MANAGER_CALLBACKS\""}"" ]],
				 ""LazyWriteContext"": [ 148, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PrivateList"": [ 152, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LogHandle"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushToLsnRoutine"": [ 164, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirtyPageThreshold"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""LazyWritePassCount"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""UninitializeEvent"": [ 176, [ ""Pointer"", ""{\""target\"":\""_CACHE_UNINITIALIZE_EVENT\""}"" ]],
				 ""NeedToZeroVacb"": [ 180, [ ""Pointer"", ""{\""target\"":\""_VACB\""}"" ]],
				 ""BcbSpinLock"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 188, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Event"": [ 192, [ ""_KEVENT"", ""null"" ]],
				 ""VacbPushLock"": [ 208, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""PrivateCacheMap"": [ 216, [ ""_PRIVATE_CACHE_MAP"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteSize { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 OpenCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER FileSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY BcbList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER SectionSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ValidDataLength
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ValidDataGoal
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32[] InitialVacbs
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				int size = 4;
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 Vacbs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 ActiveVacb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 NeedToZero { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 ActivePage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 NeedToZeroPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 ActiveVacbSpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 VacbActiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 DirtyPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public _LIST_ENTRY SharedCacheMapLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 100);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 Mbcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 Section { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 CreateEvent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 WaitOnActiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 PagesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public Int64 BeyondLastFlush { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 136); } }
		public UInt32 Callbacks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 LazyWriteContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public _LIST_ENTRY PrivateList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public UInt32 LogHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 FlushToLsnRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 DirtyPageThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 LazyWritePassCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 UninitializeEvent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 NeedToZeroVacb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 BcbSpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK VacbPushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _PRIVATE_CACHE_MAP PrivateCacheMap
		{
			get
			{
				_PRIVATE_CACHE_MAP returnValue = new _PRIVATE_CACHE_MAP(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VACB_LEVEL_REFERENCE
 
	public class _VACB_LEVEL_REFERENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VACB_LEVEL_REFERENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VACB_LEVEL_REFERENCE"": [ 8, {
				 ""Reference"": [ 0, [ ""Int32"", ""null"" ]],
				 ""SpecialReference"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Reference { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 SpecialReference { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HEAP_ENTRY
 
	public class _HEAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_ENTRY"": [ 8, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""PreviousSize"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""SubSegmentCode"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SmallTagIndex"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 5, [ ""Byte"", ""null"" ]],
				 ""UnusedBytes"": [ 6, [ ""Byte"", ""null"" ]],
				 ""SegmentIndex"": [ 7, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 PreviousSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 SubSegmentCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte SmallTagIndex{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte UnusedBytes{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte SegmentIndex{ get { return _StructureData[_BufferOffset +7]; } }
	}
	#endregion
	#region _HEAP
 
	public class _HEAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1416; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP"": [ 1416, {
				 ""Entry"": [ 0, [ ""_HEAP_ENTRY"", ""null"" ]],
				 ""Signature"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ForceFlags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""VirtualMemoryThreshold"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""SegmentReserve"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SegmentCommit"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""DeCommitFreeBlockThreshold"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DeCommitTotalFreeThreshold"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""TotalFreeSize"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""MaximumAllocationSize"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeapsListIndex"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""HeaderValidateLength"": [ 50, [ ""UInt16"", ""null"" ]],
				 ""HeaderValidateCopy"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NextAvailableTagIndex"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""MaximumTagIndex"": [ 58, [ ""UInt16"", ""null"" ]],
				 ""TagEntries"": [ 60, [ ""Pointer"", ""{\""target\"":\""_HEAP_TAG_ENTRY\""}"" ]],
				 ""UCRSegments"": [ 64, [ ""Pointer"", ""{\""target\"":\""_HEAP_UCR_SEGMENT\""}"" ]],
				 ""UnusedUnCommittedRanges"": [ 68, [ ""Pointer"", ""{\""target\"":\""_HEAP_UNCOMMMTTED_RANGE\""}"" ]],
				 ""AlignRound"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""AlignMask"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""VirtualAllocdBlocks"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Segments"": [ 88, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_HEAP_SEGMENT\""}}"" ]],
				 ""u"": [ 344, [ ""__unnamed"", ""null"" ]],
				 ""u2"": [ 360, [ ""__unnamed"", ""null"" ]],
				 ""AllocatorBackTraceIndex"": [ 362, [ ""UInt16"", ""null"" ]],
				 ""NonDedicatedListLength"": [ 364, [ ""UInt32"", ""null"" ]],
				 ""LargeBlocksIndex"": [ 368, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PseudoTagEntries"": [ 372, [ ""Pointer"", ""{\""target\"":\""_HEAP_PSEUDO_TAG_ENTRY\""}"" ]],
				 ""FreeLists"": [ 376, [ ""Array"", ""{\""count\"":128,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""LockVariable"": [ 1400, [ ""Pointer"", ""{\""target\"":\""_HEAP_LOCK\""}"" ]],
				 ""CommitRoutine"": [ 1404, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FrontEndHeap"": [ 1408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FrontHeapLockCount"": [ 1412, [ ""UInt16"", ""null"" ]],
				 ""FrontEndHeapType"": [ 1414, [ ""Byte"", ""null"" ]],
				 ""LastSegmentIndex"": [ 1415, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_ENTRY Entry
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ForceFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 VirtualMemoryThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 SegmentReserve { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 SegmentCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 DeCommitFreeBlockThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DeCommitTotalFreeThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 TotalFreeSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 MaximumAllocationSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt16 ProcessHeapsListIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public UInt16 HeaderValidateLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 50); } }
		public UInt32 HeaderValidateCopy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt16 NextAvailableTagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt16 MaximumTagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 58); } }
		public UInt32 TagEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 UCRSegments { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 UnusedUnCommittedRanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 AlignRound { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 AlignMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public _LIST_ENTRY VirtualAllocdBlocks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt32[] Segments
		{
			get
			{
				UInt32[] returnValue = new UInt32[64];
				int size = 4;
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 88);
				return returnValue;
			}
		}
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public __unnamed u2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 362); } }
		public UInt32 NonDedicatedListLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 364); } }
		public UInt32 LargeBlocksIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 368); } }
		public UInt32 PseudoTagEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 372); } }
		public _LIST_ENTRY[] FreeLists
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[128];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<128; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 376);
				return returnValue;
			}
		}
		public UInt32 LockVariable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1400); } }
		public UInt32 CommitRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1404); } }
		public UInt32 FrontEndHeap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1408); } }
		public UInt16 FrontHeapLockCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 1412); } }
		public Byte FrontEndHeapType{ get { return _StructureData[_BufferOffset +1414]; } }
		public Byte LastSegmentIndex{ get { return _StructureData[_BufferOffset +1415]; } }
	}
	#endregion
	#region _HEAP_SEGMENT
 
	public class _HEAP_SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 60; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_SEGMENT"": [ 60, {
				 ""Entry"": [ 0, [ ""_HEAP_ENTRY"", ""null"" ]],
				 ""Signature"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Heap"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HEAP\""}"" ]],
				 ""LargestUnCommittedRange"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BaseAddress"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfPages"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""FirstEntry"": [ 32, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]],
				 ""LastValidEntry"": [ 36, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]],
				 ""NumberOfUnCommittedPages"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""NumberOfUnCommittedRanges"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""UnCommittedRanges"": [ 48, [ ""Pointer"", ""{\""target\"":\""_HEAP_UNCOMMMTTED_RANGE\""}"" ]],
				 ""AllocatorBackTraceIndex"": [ 52, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 54, [ ""UInt16"", ""null"" ]],
				 ""LastEntryInSegment"": [ 56, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_ENTRY Entry
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Heap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 LargestUnCommittedRange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NumberOfPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FirstEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 LastValidEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 NumberOfUnCommittedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 NumberOfUnCommittedRanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 UnCommittedRanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 52); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 54); } }
		public UInt32 LastEntryInSegment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _HEAP_USERDATA_HEADER
 
	public class _HEAP_USERDATA_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_USERDATA_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_USERDATA_HEADER"": [ 16, {
				 ""SFreeListEntry"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""SubSegment"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HEAP_SUBSEGMENT\""}"" ]],
				 ""HeapHandle"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Signature"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY SFreeListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SubSegment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HeapHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SizeIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _HEAP_SUBSEGMENT
 
	public class _HEAP_SUBSEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_SUBSEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_SUBSEGMENT"": [ 32, {
				 ""Bucket"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserBlocks"": [ 4, [ ""Pointer"", ""{\""target\"":\""_HEAP_USERDATA_HEADER\""}"" ]],
				 ""AggregateExchg"": [ 8, [ ""_INTERLOCK_SEQ"", ""null"" ]],
				 ""BlockSize"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""FreeThreshold"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""BlockCount"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""SizeIndex"": [ 22, [ ""Byte"", ""null"" ]],
				 ""AffinityIndex"": [ 23, [ ""Byte"", ""null"" ]],
				 ""Alignment"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SFreeListEntry"": [ 24, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Bucket { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 UserBlocks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _INTERLOCK_SEQ AggregateExchg
		{
			get
			{
				_INTERLOCK_SEQ returnValue = new _INTERLOCK_SEQ(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt16 BlockSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 FreeThreshold { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16 BlockCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public Byte SizeIndex{ get { return _StructureData[_BufferOffset +22]; } }
		public Byte AffinityIndex{ get { return _StructureData[_BufferOffset +23]; } }
		public UInt32[] Alignment
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SFreeListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _HEAP_UCR_SEGMENT
 
	public class _HEAP_UCR_SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_UCR_SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_UCR_SEGMENT"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HEAP_UCR_SEGMENT\""}"" ]],
				 ""ReservedSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CommittedSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""filler"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReservedSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CommittedSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 filler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _HMAP_TABLE
 
	public class _HMAP_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HMAP_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HMAP_TABLE"": [ 8192, {
				 ""Table"": [ 0, [ ""Array"", ""{\""count\"":512,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _HMAP_ENTRY[] Table
		{
			get
			{
				_HMAP_ENTRY[] returnValue = new _HMAP_ENTRY[512];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<512; i++ )
					returnValue[i] = new _HMAP_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_SYMBOLIC_LINK
 
	public class _OBJECT_SYMBOLIC_LINK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_SYMBOLIC_LINK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_SYMBOLIC_LINK"": [ 32, {
				 ""CreationTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LinkTarget"": [ 8, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LinkTargetRemaining"": [ 16, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LinkTargetObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DosDeviceDriveIndex"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER CreationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _UNICODE_STRING LinkTarget
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _UNICODE_STRING LinkTargetRemaining
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 LinkTargetObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DosDeviceDriveIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _POOL_BLOCK_HEAD
 
	public class _POOL_BLOCK_HEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_BLOCK_HEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_BLOCK_HEAD"": [ 16, {
				 ""Header"": [ 0, [ ""_POOL_HEADER"", ""null"" ]],
				 ""List"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _POOL_HEADER Header
		{
			get
			{
				_POOL_HEADER returnValue = new _POOL_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DISPATCHER_HEADER
 
	public class _DISPATCHER_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DISPATCHER_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DISPATCHER_HEADER"": [ 16, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Absolute"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Size"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Inserted"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SignalState"": [ 4, [ ""Int32"", ""null"" ]],
				 ""WaitListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Absolute{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Size{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Inserted{ get { return _StructureData[_BufferOffset +3]; } }
		public Int32 SignalState { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY WaitListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LDR_DATA_TABLE_ENTRY
 
	public class _LDR_DATA_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LDR_DATA_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LDR_DATA_TABLE_ENTRY"": [ 80, {
				 ""InLoadOrderLinks"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InMemoryOrderLinks"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InInitializationOrderLinks"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DllBase"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EntryPoint"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeOfImage"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""FullDllName"": [ 36, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""BaseDllName"": [ 44, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Flags"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""LoadCount"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""TlsIndex"": [ 58, [ ""UInt16"", ""null"" ]],
				 ""HashLinks"": [ 60, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SectionPointer"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CheckSum"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""TimeDateStamp"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""LoadedImports"": [ 68, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EntryPointActivationContext"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PatchInformation"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY InLoadOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY InMemoryOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY InInitializationOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 DllBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 EntryPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _UNICODE_STRING FullDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _UNICODE_STRING BaseDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt16 LoadCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt16 TlsIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 58); } }
		public _LIST_ENTRY HashLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
		public UInt32 SectionPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 LoadedImports { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 EntryPointActivationContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 PatchInformation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
	}
	#endregion
	#region _HEAP_UNCOMMMTTED_RANGE
 
	public class _HEAP_UNCOMMMTTED_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_UNCOMMMTTED_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_UNCOMMMTTED_RANGE"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HEAP_UNCOMMMTTED_RANGE\""}"" ]],
				 ""Address"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""filler"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Address { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 filler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _VI_DEADLOCK_GLOBALS
 
	public class _VI_DEADLOCK_GLOBALS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_GLOBALS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 272; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_GLOBALS"": [ 272, {
				 ""Nodes"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Resources"": [ 8, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Threads"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""TimeAcquire"": [ 24, [ ""Int64"", ""null"" ]],
				 ""TimeRelease"": [ 32, [ ""Int64"", ""null"" ]],
				 ""BytesAllocated"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ResourceDatabase"": [ 44, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""ThreadDatabase"": [ 48, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""AllocationFailures"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""NodesTrimmedBasedOnAge"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""NodesTrimmedBasedOnCount"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""NodesSearched"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""MaxNodesSearched"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""SequenceNumber"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""RecursionDepthLimit"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""SearchedNodesLimit"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""DepthLimitHits"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""SearchLimitHits"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""ABC_ACB_Skipped"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""FreeResourceList"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeThreadList"": [ 104, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeNodeList"": [ 112, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeResourceCount"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""FreeThreadCount"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""FreeNodeCount"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""Instigator"": [ 132, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfParticipants"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""Participant"": [ 140, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_VI_DEADLOCK_NODE\""}}"" ]],
				 ""CacheReductionInProgress"": [ 268, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Nodes
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] Resources
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32[] Threads
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public Int64 TimeAcquire { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public Int64 TimeRelease { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 BytesAllocated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ResourceDatabase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ThreadDatabase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 AllocationFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 NodesTrimmedBasedOnAge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 NodesTrimmedBasedOnCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 NodesSearched { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 MaxNodesSearched { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 SequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 RecursionDepthLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 SearchedNodesLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 DepthLimitHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 SearchLimitHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 ABC_ACB_Skipped { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _LIST_ENTRY FreeResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeThreadList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeNodeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 FreeResourceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 FreeThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 FreeNodeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 Instigator { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 NumberOfParticipants { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32[] Participant
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				int size = 4;
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 140);
				return returnValue;
			}
		}
		public UInt32 CacheReductionInProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
	}
	#endregion
	#region _THERMAL_INFORMATION
 
	public class _THERMAL_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THERMAL_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THERMAL_INFORMATION"": [ 76, {
				 ""ThermalStamp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ThermalConstant1"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ThermalConstant2"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Processors"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SamplingPeriod"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""CurrentTemperature"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PassiveTripPoint"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CriticalTripPoint"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ActiveTripPointCount"": [ 32, [ ""Byte"", ""null"" ]],
				 ""ActiveTripPoint"": [ 36, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ThermalStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ThermalConstant1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ThermalConstant2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Processors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SamplingPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 CurrentTemperature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PassiveTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 CriticalTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte ActiveTripPointCount{ get { return _StructureData[_BufferOffset +32]; } }
		public UInt32[] ActiveTripPoint
		{
			get
			{
				UInt32[] returnValue = new UInt32[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_SEARCH_MEMORY
 
	public class _DBGKD_SEARCH_MEMORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SEARCH_MEMORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SEARCH_MEMORY"": [ 24, {
				 ""SearchAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""FoundAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SearchLength"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""PatternLength"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SearchAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FoundAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SearchLength { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 PatternLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _SECTION_OBJECT
 
	public class _SECTION_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECTION_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECTION_OBJECT"": [ 24, {
				 ""StartingVa"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EndingVa"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Parent"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LeftChild"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RightChild"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Segment"": [ 20, [ ""Pointer"", ""{\""target\"":\""_SEGMENT_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StartingVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndingVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LeftChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 RightChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Segment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _POWER_STATE
 
	public class _POWER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POWER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POWER_STATE"": [ 4, {
				 ""SystemState"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceState"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _SYSTEM_POWER_STATE SystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DEVICE_POWER_STATE DeviceState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _WMI_LOGGER_CONTEXT
 
	public class _WMI_LOGGER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_LOGGER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 456; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_LOGGER_CONTEXT"": [ 456, {
				 ""BufferSpinLock"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StartTime"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LogFileHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LoggerSemaphore"": [ 20, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""LoggerThread"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""LoggerEvent"": [ 44, [ ""_KEVENT"", ""null"" ]],
				 ""FlushEvent"": [ 60, [ ""_KEVENT"", ""null"" ]],
				 ""LoggerStatus"": [ 76, [ ""Int32"", ""null"" ]],
				 ""LoggerId"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""BuffersAvailable"": [ 84, [ ""Int32"", ""null"" ]],
				 ""UsePerfClock"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""WriteFailureLimit"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""BuffersDirty"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""BuffersInUse"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""SwitchingInProgress"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""FreeList"": [ 112, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""FlushList"": [ 120, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""GlobalList"": [ 128, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""ProcessorBuffers"": [ 136, [ ""Pointer"", ""{\""target\"":\""_SLIST_HEADER\""}"" ]],
				 ""LoggerName"": [ 140, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LogFileName"": [ 148, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LogFilePattern"": [ 156, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""NewLogFileName"": [ 164, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""EndPageMarker"": [ 172, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""CollectionOn"": [ 176, [ ""Int32"", ""null"" ]],
				 ""KernelTraceOn"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""PerfLogInTransition"": [ 184, [ ""Int32"", ""null"" ]],
				 ""RequestFlag"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""EnableFlags"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""MaximumFileSize"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""LoggerMode"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""LoggerModeFlags"": [ 200, [ ""_WMI_LOGGER_MODE"", ""null"" ]],
				 ""LastFlushedBuffer"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""RefCount"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""FlushTimer"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""FirstBufferOffset"": [ 216, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ByteOffset"": [ 224, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BufferAgeLimit"": [ 232, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""MaximumBuffers"": [ 240, [ ""UInt32"", ""null"" ]],
				 ""MinimumBuffers"": [ 244, [ ""UInt32"", ""null"" ]],
				 ""EventsLost"": [ 248, [ ""UInt32"", ""null"" ]],
				 ""BuffersWritten"": [ 252, [ ""UInt32"", ""null"" ]],
				 ""LogBuffersLost"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""RealTimeBuffersLost"": [ 260, [ ""UInt32"", ""null"" ]],
				 ""BufferSize"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""NumberOfBuffers"": [ 268, [ ""Int32"", ""null"" ]],
				 ""SequencePtr"": [ 272, [ ""Pointer"", ""{\""target\"":\""long\""}"" ]],
				 ""InstanceGuid"": [ 276, [ ""_GUID"", ""null"" ]],
				 ""LoggerHeader"": [ 292, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetCpuClock"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ClientSecurityContext"": [ 300, [ ""_SECURITY_CLIENT_CONTEXT"", ""null"" ]],
				 ""LoggerExtension"": [ 360, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseQueue"": [ 364, [ ""Int32"", ""null"" ]],
				 ""EnableFlagExtension"": [ 368, [ ""_TRACE_ENABLE_FLAG_EXTENSION"", ""null"" ]],
				 ""LocalSequence"": [ 372, [ ""UInt32"", ""null"" ]],
				 ""MaximumIrql"": [ 376, [ ""UInt32"", ""null"" ]],
				 ""EnableFlagArray"": [ 380, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""LoggerMutex"": [ 384, [ ""_KMUTANT"", ""null"" ]],
				 ""MutexCount"": [ 416, [ ""Int32"", ""null"" ]],
				 ""FileCounter"": [ 420, [ ""UInt32"", ""null"" ]],
				 ""BufferCallback"": [ 424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallbackContext"": [ 428, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PoolType"": [ 432, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ReferenceSystemTime"": [ 440, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReferenceTimeStamp"": [ 448, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BufferSpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LARGE_INTEGER StartTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 LogFileHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _KSEMAPHORE LoggerSemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 LoggerThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _KEVENT LoggerEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public _KEVENT FlushEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
		public Int32 LoggerStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 LoggerId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public Int32 BuffersAvailable { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 UsePerfClock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 WriteFailureLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 BuffersDirty { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 BuffersInUse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 SwitchingInProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public _SLIST_HEADER FreeList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _SLIST_HEADER FlushList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _SLIST_HEADER GlobalList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 ProcessorBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public _UNICODE_STRING LoggerName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 140);
				return returnValue;
			}
		}
		public _UNICODE_STRING LogFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
		public _UNICODE_STRING LogFilePattern
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public _UNICODE_STRING NewLogFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 164);
				return returnValue;
			}
		}
		public UInt32 EndPageMarker { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public Int32 CollectionOn { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 KernelTraceOn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public Int32 PerfLogInTransition { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 RequestFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 EnableFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 MaximumFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 LoggerMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public _WMI_LOGGER_MODE LoggerModeFlags
		{
			get
			{
				_WMI_LOGGER_MODE returnValue = new _WMI_LOGGER_MODE(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt32 LastFlushedBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 FlushTimer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public _LARGE_INTEGER FirstBufferOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ByteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BufferAgeLimit
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt32 MaximumBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 240); } }
		public UInt32 MinimumBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 244); } }
		public UInt32 EventsLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 248); } }
		public UInt32 BuffersWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 252); } }
		public UInt32 LogBuffersLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public UInt32 RealTimeBuffersLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 260); } }
		public UInt32 BufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public Int32 NumberOfBuffers { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 268); } }
		public UInt32 SequencePtr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public _GUID InstanceGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 276);
				return returnValue;
			}
		}
		public UInt32 LoggerHeader { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public UInt32 GetCpuClock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 296); } }
		public _SECURITY_CLIENT_CONTEXT ClientSecurityContext
		{
			get
			{
				_SECURITY_CLIENT_CONTEXT returnValue = new _SECURITY_CLIENT_CONTEXT(_StructureData, _BufferOffset + 300);
				return returnValue;
			}
		}
		public UInt32 LoggerExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 360); } }
		public Int32 ReleaseQueue { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 364); } }
		public _TRACE_ENABLE_FLAG_EXTENSION EnableFlagExtension
		{
			get
			{
				_TRACE_ENABLE_FLAG_EXTENSION returnValue = new _TRACE_ENABLE_FLAG_EXTENSION(_StructureData, _BufferOffset + 368);
				return returnValue;
			}
		}
		public UInt32 LocalSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 372); } }
		public UInt32 MaximumIrql { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 376); } }
		public UInt32 EnableFlagArray { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 380); } }
		public _KMUTANT LoggerMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 384);
				return returnValue;
			}
		}
		public Int32 MutexCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 416); } }
		public UInt32 FileCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 420); } }
		public UInt32 BufferCallback { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 424); } }
		public UInt32 CallbackContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 428); } }
		public _POOL_TYPE PoolType { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 432); } }
		public _LARGE_INTEGER ReferenceSystemTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 440);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ReferenceTimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEGMENT_OBJECT
 
	public class _SEGMENT_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEGMENT_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEGMENT_OBJECT"": [ 48, {
				 ""BaseAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TotalNumberOfPtes"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SizeOfSegment"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""NonExtendedPtes"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ImageCommitment"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ControlArea"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""Subsection"": [ 28, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]],
				 ""LargeControlArea"": [ 32, [ ""Pointer"", ""{\""target\"":\""_LARGE_CONTROL_AREA\""}"" ]],
				 ""MmSectionFlags"": [ 36, [ ""Pointer"", ""{\""target\"":\""_MMSECTION_FLAGS\""}"" ]],
				 ""MmSubSectionFlags"": [ 40, [ ""Pointer"", ""{\""target\"":\""_MMSUBSECTION_FLAGS\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalNumberOfPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER SizeOfSegment
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 NonExtendedPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ImageCommitment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Subsection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LargeControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 MmSectionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 MmSubSectionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _CONTROL_AREA
 
	public class _CONTROL_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONTROL_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONTROL_AREA"": [ 48, {
				 ""Segment"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEGMENT\""}"" ]],
				 ""DereferenceList"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NumberOfSectionReferences"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPfnReferences"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""NumberOfMappedViews"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSubsections"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""FlushInProgressCount"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""NumberOfUserReferences"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""u"": [ 32, [ ""__unnamed"", ""null"" ]],
				 ""FilePointer"": [ 36, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""WaitingForDeletion"": [ 40, [ ""Pointer"", ""{\""target\"":\""_EVENT_COUNTER\""}"" ]],
				 ""ModifiedWriteCount"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""NumberOfSystemCacheViews"": [ 46, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Segment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY DereferenceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 NumberOfSectionReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NumberOfPfnReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberOfMappedViews { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt16 NumberOfSubsections { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 FlushInProgressCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt32 NumberOfUserReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 FilePointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 WaitingForDeletion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 ModifiedWriteCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 NumberOfSystemCacheViews { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
	}
	#endregion
	#region _HANDLE_TABLE
 
	public class _HANDLE_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE"": [ 68, {
				 ""TableCode"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""QuotaProcess"": [ 4, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""UniqueProcessId"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HandleTableLock"": [ 12, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""HandleTableList"": [ 28, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HandleContentionEvent"": [ 36, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DebugInfo"": [ 40, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TRACE_DEBUG_INFO\""}"" ]],
				 ""ExtraInfoPages"": [ 44, [ ""Int32"", ""null"" ]],
				 ""FirstFree"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""LastFree"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""NextHandleNeedingPool"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""HandleCount"": [ 60, [ ""Int32"", ""null"" ]],
				 ""Flags"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""StrictFIFO"": [ 64, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TableCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 QuotaProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 UniqueProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _EX_PUSH_LOCK[] HandleTableLock
		{
			get
			{
				_EX_PUSH_LOCK[] returnValue = new _EX_PUSH_LOCK[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _EX_PUSH_LOCK(_StructureData, (i * size) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LIST_ENTRY HandleTableList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK HandleContentionEvent
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 DebugInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Int32 ExtraInfoPages { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 FirstFree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 LastFree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 NextHandleNeedingPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public Int32 HandleCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public Byte StrictFIFO
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 64];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _POOL_HEADER
 
	public class _POOL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_HEADER"": [ 8, {
				 ""PreviousSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""PoolIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""BlockSize"": [ 2, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""PoolType"": [ 2, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""Ulong1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProcessBilled"": [ 4, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""PoolTag"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""AllocatorBackTraceIndex"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""PoolTagHash"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 PreviousSize
		{
			get
			{
				// start: 0  end: 9  Mask: 0000000111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 511) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 PoolIndex
		{
			get
			{
				// start: 9  end: 16  Mask: 1111111000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65024) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt16 BlockSize
		{
			get
			{
				// start: 0  end: 9  Mask: 0000000111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 511) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 PoolType
		{
			get
			{
				// start: 9  end: 16  Mask: 1111111000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 65024) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt32 Ulong1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ProcessBilled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PoolTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 PoolTagHash { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region _KWAIT_BLOCK
 
	public class _KWAIT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KWAIT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KWAIT_BLOCK"": [ 24, {
				 ""WaitListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Object"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NextWaitBlock"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KWAIT_BLOCK\""}"" ]],
				 ""WaitKey"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""WaitType"": [ 22, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY WaitListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Thread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Object { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NextWaitBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16 WaitKey { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 WaitType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
	}
	#endregion
	#region _MMPTE_PROTOTYPE
 
	public class _MMPTE_PROTOTYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_PROTOTYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_PROTOTYPE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Unused0"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""ReadOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""Unused1"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""ProtoAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused0
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 254) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 ReadOnly
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused1
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 11  end: 16  Mask: 1111100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 63488) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 ProtoAddress
		{
			get
			{
				// start: 32  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744069414584320) >> 32;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _MMSUPPORT
 
	public class _MMSUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT"": [ 64, {
				 ""LastTrimTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Flags"": [ 8, [ ""_MMSUPPORT_FLAGS"", ""null"" ]],
				 ""PageFaultCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PeakWorkingSetSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""WorkingSetSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MinimumWorkingSetSize"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""MaximumWorkingSetSize"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""VmWorkingSetList"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMWSL\""}"" ]],
				 ""WorkingSetExpansionLinks"": [ 36, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Claim"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""NextEstimationSlot"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""NextAgingSlot"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""EstimatedAvailable"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""GrowthSinceLastEstimate"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER LastTrimTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MMSUPPORT_FLAGS Flags
		{
			get
			{
				_MMSUPPORT_FLAGS returnValue = new _MMSUPPORT_FLAGS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 PageFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PeakWorkingSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 WorkingSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 MinimumWorkingSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MaximumWorkingSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 VmWorkingSetList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _LIST_ENTRY WorkingSetExpansionLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 Claim { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 NextEstimationSlot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 NextAgingSlot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 EstimatedAvailable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 GrowthSinceLastEstimate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _EX_WORK_QUEUE
 
	public class _EX_WORK_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_WORK_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 60; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_WORK_QUEUE"": [ 60, {
				 ""WorkerQueue"": [ 0, [ ""_KQUEUE"", ""null"" ]],
				 ""DynamicThreadCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""WorkItemsProcessed"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""WorkItemsProcessedLastPass"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""QueueDepthLastPass"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""Info"": [ 56, [ ""EX_QUEUE_WORKER_INFO"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KQUEUE WorkerQueue
		{
			get
			{
				_KQUEUE returnValue = new _KQUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 DynamicThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 WorkItemsProcessed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 WorkItemsProcessedLastPass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 QueueDepthLastPass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public EX_QUEUE_WORKER_INFO Info
		{
			get
			{
				EX_QUEUE_WORKER_INFO returnValue = new EX_QUEUE_WORKER_INFO(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMSUBSECTION_FLAGS
 
	public class _MMSUBSECTION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUBSECTION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUBSECTION_FLAGS"": [ 4, {
				 ""ReadOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""SubsectionStatic"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""GlobalMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""LargePages"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""StartingSector4132"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""SectorEndOffset"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ReadOnly
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadWrite
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 SubsectionStatic
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 GlobalMemory
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 4  end: 9  Mask: 0000000111110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 496) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 LargePages
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 StartingSector4132
		{
			get
			{
				// start: 10  end: 20  Mask: 11111111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1047552) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 SectorEndOffset
		{
			get
			{
				// start: 20  end: 32  Mask: 11111111111100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4293918720) >> 20;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KMUTANT
 
	public class _KMUTANT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KMUTANT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KMUTANT"": [ 32, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""MutantListEntry"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OwnerThread"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Abandoned"": [ 28, [ ""Byte"", ""null"" ]],
				 ""ApcDisable"": [ 29, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY MutantListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 OwnerThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte Abandoned{ get { return _StructureData[_BufferOffset +28]; } }
		public Byte ApcDisable{ get { return _StructureData[_BufferOffset +29]; } }
	}
	#endregion
	#region _HEAP_TAG_ENTRY
 
	public class _HEAP_TAG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_TAG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_TAG_ENTRY"": [ 64, {
				 ""Allocs"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Frees"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TagIndex"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""CreatorBackTraceIndex"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""TagName"": [ 16, [ ""Array"", ""{\""count\"":24,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Allocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Frees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt16[] TagName
		{
			get
			{
				UInt16[] returnValue = new UInt16[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPTE_HIGHLOW
 
	public class _MMPTE_HIGHLOW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_HIGHLOW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_HIGHLOW"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HighPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KEVENT
 
	public class _KEVENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KEVENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KEVENT"": [ 16, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EPROCESS_QUOTA_BLOCK
 
	public class _EPROCESS_QUOTA_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPROCESS_QUOTA_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPROCESS_QUOTA_BLOCK"": [ 64, {
				 ""QuotaEntry"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""QuotaList"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReferenceCount"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""ProcessCount"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EPROCESS_QUOTA_ENTRY[] QuotaEntry
		{
			get
			{
				_EPROCESS_QUOTA_ENTRY[] returnValue = new _EPROCESS_QUOTA_ENTRY[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _EPROCESS_QUOTA_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY QuotaList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 ProcessCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _UNICODE_STRING
 
	public class _UNICODE_STRING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _UNICODE_STRING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_UNICODE_STRING"": [ 8, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaximumLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Buffer"": [ 4, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaximumLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Buffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _EVENT_COUNTER
 
	public class _EVENT_COUNTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_COUNTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_COUNTER"": [ 24, {
				 ""ListEntry"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""RefCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Event"": [ 8, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY ListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EJOB
 
	public class _EJOB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EJOB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 384; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EJOB"": [ 384, {
				 ""Event"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""JobLinks"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ProcessListHead"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""JobLock"": [ 32, [ ""_ERESOURCE"", ""null"" ]],
				 ""TotalUserTime"": [ 88, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TotalKernelTime"": [ 96, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ThisPeriodTotalUserTime"": [ 104, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ThisPeriodTotalKernelTime"": [ 112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TotalPageFaultCount"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""TotalProcesses"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""ActiveProcesses"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""TotalTerminatedProcesses"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""PerProcessUserTimeLimit"": [ 136, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PerJobUserTimeLimit"": [ 144, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LimitFlags"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""MinimumWorkingSetSize"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""MaximumWorkingSetSize"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""ActiveProcessLimit"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""Affinity"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""PriorityClass"": [ 172, [ ""Byte"", ""null"" ]],
				 ""UIRestrictionsClass"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""SecurityLimitFlags"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""Token"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Filter"": [ 188, [ ""Pointer"", ""{\""target\"":\""_PS_JOB_TOKEN_FILTER\""}"" ]],
				 ""EndOfJobTimeAction"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""CompletionPort"": [ 196, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionKey"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionId"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""SchedulingClass"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""ReadOperationCount"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""WriteOperationCount"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""OtherOperationCount"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""ReadTransferCount"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""WriteTransferCount"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""OtherTransferCount"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""IoInfo"": [ 264, [ ""_IO_COUNTERS"", ""null"" ]],
				 ""ProcessMemoryLimit"": [ 312, [ ""UInt32"", ""null"" ]],
				 ""JobMemoryLimit"": [ 316, [ ""UInt32"", ""null"" ]],
				 ""PeakProcessMemoryUsed"": [ 320, [ ""UInt32"", ""null"" ]],
				 ""PeakJobMemoryUsed"": [ 324, [ ""UInt32"", ""null"" ]],
				 ""CurrentJobMemoryUsed"": [ 328, [ ""UInt32"", ""null"" ]],
				 ""MemoryLimitsLock"": [ 332, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""JobSetLinks"": [ 364, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MemberLevel"": [ 372, [ ""UInt32"", ""null"" ]],
				 ""JobFlags"": [ 376, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY JobLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProcessListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _ERESOURCE JobLock
		{
			get
			{
				_ERESOURCE returnValue = new _ERESOURCE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TotalUserTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TotalKernelTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ThisPeriodTotalUserTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ThisPeriodTotalKernelTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 TotalPageFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 TotalProcesses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 ActiveProcesses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 TotalTerminatedProcesses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public _LARGE_INTEGER PerProcessUserTimeLimit
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PerJobUserTimeLimit
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt32 LimitFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 MinimumWorkingSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 MaximumWorkingSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 ActiveProcessLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 Affinity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public Byte PriorityClass{ get { return _StructureData[_BufferOffset +172]; } }
		public UInt32 UIRestrictionsClass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 SecurityLimitFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 Token { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 Filter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 EndOfJobTimeAction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 CompletionPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 CompletionKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public UInt32 SchedulingClass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt64 ReadOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 WriteOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 OtherOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 ReadTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 WriteTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 OtherTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public _IO_COUNTERS IoInfo
		{
			get
			{
				_IO_COUNTERS returnValue = new _IO_COUNTERS(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt32 ProcessMemoryLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 312); } }
		public UInt32 JobMemoryLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 316); } }
		public UInt32 PeakProcessMemoryUsed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 320); } }
		public UInt32 PeakJobMemoryUsed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 324); } }
		public UInt32 CurrentJobMemoryUsed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 328); } }
		public _FAST_MUTEX MemoryLimitsLock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 332);
				return returnValue;
			}
		}
		public _LIST_ENTRY JobSetLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 364);
				return returnValue;
			}
		}
		public UInt32 MemberLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 372); } }
		public UInt32 JobFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 376); } }
	}
	#endregion
	#region _LARGE_CONTROL_AREA
 
	public class _LARGE_CONTROL_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LARGE_CONTROL_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LARGE_CONTROL_AREA"": [ 64, {
				 ""Segment"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEGMENT\""}"" ]],
				 ""DereferenceList"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NumberOfSectionReferences"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPfnReferences"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""NumberOfMappedViews"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSubsections"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""FlushInProgressCount"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""NumberOfUserReferences"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""u"": [ 32, [ ""__unnamed"", ""null"" ]],
				 ""FilePointer"": [ 36, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""WaitingForDeletion"": [ 40, [ ""Pointer"", ""{\""target\"":\""_EVENT_COUNTER\""}"" ]],
				 ""ModifiedWriteCount"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""NumberOfSystemCacheViews"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""StartingFrame"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""UserGlobalList"": [ 52, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SessionId"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Segment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY DereferenceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 NumberOfSectionReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NumberOfPfnReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberOfMappedViews { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt16 NumberOfSubsections { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 FlushInProgressCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt32 NumberOfUserReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 FilePointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 WaitingForDeletion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 ModifiedWriteCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 NumberOfSystemCacheViews { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt32 StartingFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _LIST_ENTRY UserGlobalList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 52);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _GUID
 
	public class _GUID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GUID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GUID"": [ 16, {
				 ""Data1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Data2"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Data3"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""Data4"": [ 8, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Data1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 Data2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Data3 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Byte[] Data4
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 8];
				return returnValue;
			}
		}
	}
	#endregion
	#region _PS_JOB_TOKEN_FILTER
 
	public class _PS_JOB_TOKEN_FILTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_JOB_TOKEN_FILTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_JOB_TOKEN_FILTER"": [ 36, {
				 ""CapturedSidCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CapturedSids"": [ 4, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""CapturedSidsLength"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CapturedGroupCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CapturedGroups"": [ 16, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""CapturedGroupsLength"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CapturedPrivilegeCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CapturedPrivileges"": [ 28, [ ""Pointer"", ""{\""target\"":\""_LUID_AND_ATTRIBUTES\""}"" ]],
				 ""CapturedPrivilegesLength"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CapturedSidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CapturedSids { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CapturedSidsLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CapturedGroupCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CapturedGroups { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 CapturedGroupsLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CapturedPrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 CapturedPrivileges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 CapturedPrivilegesLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _FAST_MUTEX
 
	public class _FAST_MUTEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_MUTEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_MUTEX"": [ 32, {
				 ""Count"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Owner"": [ 4, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Contention"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Event"": [ 12, [ ""_KEVENT"", ""null"" ]],
				 ""OldIrql"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Count { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Owner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Contention { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 OldIrql { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _MM_DRIVER_VERIFIER_DATA
 
	public class _MM_DRIVER_VERIFIER_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_DRIVER_VERIFIER_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_DRIVER_VERIFIER_DATA"": [ 112, {
				 ""Level"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RaiseIrqls"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""AcquireSpinLocks"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SynchronizeExecutions"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AllocationsAttempted"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AllocationsSucceeded"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""AllocationsSucceededSpecialPool"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AllocationsWithNoTag"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""TrimRequests"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Trims"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""AllocationsFailed"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""AllocationsFailedDeliberately"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Loads"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Unloads"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""UnTrackedPool"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""UserTrims"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""CurrentPagedPoolAllocations"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""CurrentNonPagedPoolAllocations"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PeakPagedPoolAllocations"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""PeakNonPagedPoolAllocations"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""PagedBytes"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""NonPagedBytes"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""PeakPagedBytes"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""PeakNonPagedBytes"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""BurstAllocationsFailedDeliberately"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""SessionTrims"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 104, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Level { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RaiseIrqls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 AcquireSpinLocks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SynchronizeExecutions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AllocationsAttempted { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 AllocationsSucceeded { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 AllocationsSucceededSpecialPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AllocationsWithNoTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 TrimRequests { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Trims { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 AllocationsFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 AllocationsFailedDeliberately { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Loads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Unloads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 UnTrackedPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 UserTrims { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CurrentPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 CurrentNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PeakPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 PeakNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 PagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 NonPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 PeakPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 PeakNonPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 BurstAllocationsFailedDeliberately { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 SessionTrims { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 104);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_FILE_HEADER
 
	public class _IMAGE_FILE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_FILE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_FILE_HEADER"": [ 20, {
				 ""Machine"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""NumberOfSections"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TimeDateStamp"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PointerToSymbolTable"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSymbols"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfOptionalHeader"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""Characteristics"": [ 18, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Machine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 NumberOfSections { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PointerToSymbolTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NumberOfSymbols { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt16 SizeOfOptionalHeader { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 Characteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
	}
	#endregion
	#region _FILE_OBJECT
 
	public class _FILE_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_OBJECT"": [ 112, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""DeviceObject"": [ 4, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Vpb"": [ 8, [ ""Pointer"", ""{\""target\"":\""_VPB\""}"" ]],
				 ""FsContext"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FsContext2"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SectionObjectPointer"": [ 20, [ ""Pointer"", ""{\""target\"":\""_SECTION_OBJECT_POINTERS\""}"" ]],
				 ""PrivateCacheMap"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FinalStatus"": [ 28, [ ""Int32"", ""null"" ]],
				 ""RelatedFileObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""LockOperation"": [ 36, [ ""Byte"", ""null"" ]],
				 ""DeletePending"": [ 37, [ ""Byte"", ""null"" ]],
				 ""ReadAccess"": [ 38, [ ""Byte"", ""null"" ]],
				 ""WriteAccess"": [ 39, [ ""Byte"", ""null"" ]],
				 ""DeleteAccess"": [ 40, [ ""Byte"", ""null"" ]],
				 ""SharedRead"": [ 41, [ ""Byte"", ""null"" ]],
				 ""SharedWrite"": [ 42, [ ""Byte"", ""null"" ]],
				 ""SharedDelete"": [ 43, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""FileName"": [ 48, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CurrentByteOffset"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Waiters"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Busy"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""LastLock"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Lock"": [ 76, [ ""_KEVENT"", ""null"" ]],
				 ""Event"": [ 92, [ ""_KEVENT"", ""null"" ]],
				 ""CompletionContext"": [ 108, [ ""Pointer"", ""{\""target\"":\""_IO_COMPLETION_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Vpb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FsContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 FsContext2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SectionObjectPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PrivateCacheMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Int32 FinalStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 RelatedFileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte LockOperation{ get { return _StructureData[_BufferOffset +36]; } }
		public Byte DeletePending{ get { return _StructureData[_BufferOffset +37]; } }
		public Byte ReadAccess{ get { return _StructureData[_BufferOffset +38]; } }
		public Byte WriteAccess{ get { return _StructureData[_BufferOffset +39]; } }
		public Byte DeleteAccess{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte SharedRead{ get { return _StructureData[_BufferOffset +41]; } }
		public Byte SharedWrite{ get { return _StructureData[_BufferOffset +42]; } }
		public Byte SharedDelete{ get { return _StructureData[_BufferOffset +43]; } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _UNICODE_STRING FileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LARGE_INTEGER CurrentByteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32 Waiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Busy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 LastLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public _KEVENT Lock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 76);
				return returnValue;
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 92);
				return returnValue;
			}
		}
		public UInt32 CompletionContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
	}
	#endregion
	#region _MMPTE_HARDWARE
 
	public class _MMPTE_HARDWARE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_HARDWARE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_HARDWARE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Write"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Owner"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""WriteThrough"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""CacheDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Accessed"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Dirty"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""LargePage"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""Global"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""CopyOnWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""reserved0"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFrameNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":38,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":38,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Write
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Owner
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 WriteThrough
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 CacheDisable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Accessed
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Dirty
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 LargePage
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 Global
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 CopyOnWrite
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 reserved0
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFrameNumber
		{
			get
			{
				// start: 12  end: 38  Mask: 00000011111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 274877902848) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 reserved1
		{
			get
			{
				// start: 38  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446743798831644672) >> 38;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _IO_COMPLETION_CONTEXT
 
	public class _IO_COMPLETION_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_COMPLETION_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_COMPLETION_CONTEXT"": [ 8, {
				 ""Port"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Key"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _CALL_HASH_ENTRY
 
	public class _CALL_HASH_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CALL_HASH_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CALL_HASH_ENTRY"": [ 20, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CallersAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallersCaller"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallCount"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 CallersAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CallersCaller { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CallCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HMAP_ENTRY
 
	public class _HMAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HMAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HMAP_ENTRY"": [ 16, {
				 ""BlockAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BinAddress"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CmView"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_VIEW_OF_FILE\""}"" ]],
				 ""MemAlloc"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BlockAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BinAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CmView { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MemAlloc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_SET_CONTEXT
 
	public class _DBGKD_SET_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_CONTEXT"": [ 4, {
				 ""ContextFlags"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ContextFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KLOCK_QUEUE_HANDLE
 
	public class _KLOCK_QUEUE_HANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KLOCK_QUEUE_HANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KLOCK_QUEUE_HANDLE"": [ 12, {
				 ""LockQueue"": [ 0, [ ""_KSPIN_LOCK_QUEUE"", ""null"" ]],
				 ""OldIrql"": [ 8, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KSPIN_LOCK_QUEUE LockQueue
		{
			get
			{
				_KSPIN_LOCK_QUEUE returnValue = new _KSPIN_LOCK_QUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte OldIrql{ get { return _StructureData[_BufferOffset +8]; } }
	}
	#endregion
	#region _MMSECTION_FLAGS
 
	public class _MMSECTION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSECTION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSECTION_FLAGS"": [ 4, {
				 ""BeingDeleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""BeingCreated"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""BeingPurged"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoModifiedWriting"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""FailAllIo"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Image"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Based"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""File"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""Networked"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""NoCache"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""PhysicalMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""CopyOnWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""Reserve"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""Commit"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""FloppyMedia"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""WasPurged"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""UserReference"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""GlobalMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteOnClose"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""FilePointerNull"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""DebugSymbolsLoaded"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""SetMappedFileIoComplete"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""CollidedFlush"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""HadUserReference"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""ImageMappedInSystemSpace"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""UserWritable"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""Accessed"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""GlobalOnlyPerSession"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""Rom"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""filler"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BeingDeleted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 BeingCreated
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 BeingPurged
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoModifiedWriting
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 FailAllIo
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Image
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Based
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 File
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 Networked
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 NoCache
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 PhysicalMemory
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 CopyOnWrite
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserve
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 Commit
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 FloppyMedia
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 WasPurged
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 UserReference
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 GlobalMemory
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 DeleteOnClose
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 FilePointerNull
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 DebugSymbolsLoaded
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 SetMappedFileIoComplete
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 CollidedFlush
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 HadUserReference
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageMappedInSystemSpace
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 UserWritable
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 Accessed
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 GlobalOnlyPerSession
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 Rom
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 filler
		{
			get
			{
				// start: 30  end: 32  Mask: 11000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3221225472) >> 30;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _DEFERRED_WRITE
 
	public class _DEFERRED_WRITE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEFERRED_WRITE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEFERRED_WRITE"": [ 40, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""Int16"", ""null"" ]],
				 ""FileObject"": [ 4, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""BytesToWrite"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DeferredWriteLinks"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Event"": [ 20, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""PostRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context1"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context2"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LimitModifiedPages"": [ 36, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteSize { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BytesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY DeferredWriteLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 Event { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PostRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Context1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Context2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte LimitModifiedPages{ get { return _StructureData[_BufferOffset +36]; } }
	}
	#endregion
	#region _TRACE_ENABLE_FLAG_EXTENSION
 
	public class _TRACE_ENABLE_FLAG_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRACE_ENABLE_FLAG_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRACE_ENABLE_FLAG_EXTENSION"": [ 4, {
				 ""Offset"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Length"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Flag"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Offset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Length{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Flag{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _SID_AND_ATTRIBUTES
 
	public class _SID_AND_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID_AND_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID_AND_ATTRIBUTES"": [ 8, {
				 ""Sid"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Attributes"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Sid { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HIVE_LIST_ENTRY
 
	public class _HIVE_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HIVE_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HIVE_LIST_ENTRY"": [ 24, {
				 ""Name"": [ 0, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""BaseName"": [ 4, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""CmHive"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CMHIVE\""}"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CmHive2"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CMHIVE\""}"" ]],
				 ""ThreadFinished"": [ 20, [ ""Byte"", ""null"" ]],
				 ""ThreadStarted"": [ 21, [ ""Byte"", ""null"" ]],
				 ""Allocate"": [ 22, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Name { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BaseName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CmHive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CmHive2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte ThreadFinished{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte ThreadStarted{ get { return _StructureData[_BufferOffset +21]; } }
		public Byte Allocate{ get { return _StructureData[_BufferOffset +22]; } }
	}
	#endregion
	#region _KSPIN_LOCK_QUEUE
 
	public class _KSPIN_LOCK_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSPIN_LOCK_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSPIN_LOCK_QUEUE"": [ 8, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KSPIN_LOCK_QUEUE\""}"" ]],
				 ""Lock"": [ 4, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PS_IMPERSONATION_INFORMATION
 
	public class _PS_IMPERSONATION_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_IMPERSONATION_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_IMPERSONATION_INFORMATION"": [ 12, {
				 ""Token"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CopyOnOpen"": [ 4, [ ""Byte"", ""null"" ]],
				 ""EffectiveOnly"": [ 5, [ ""Byte"", ""null"" ]],
				 ""ImpersonationLevel"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Token { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte CopyOnOpen{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte EffectiveOnly{ get { return _StructureData[_BufferOffset +5]; } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DEVICE_NODE
 
	public class _DEVICE_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 280; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_NODE"": [ 280, {
				 ""Sibling"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""Child"": [ 4, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""Parent"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""LastChild"": [ 12, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""Level"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Notify"": [ 20, [ ""Pointer"", ""{\""target\"":\""_PO_DEVICE_NOTIFY\""}"" ]],
				 ""State"": [ 24, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PreviousState"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""StateHistory"": [ 32, [ ""Array"", ""{\""size\"":80,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}}"" ]],
				 ""StateHistoryEntry"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""CompletionStatus"": [ 116, [ ""Int32"", ""null"" ]],
				 ""PendingIrp"": [ 120, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Flags"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""UserFlags"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""Problem"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""PhysicalDeviceObject"": [ 136, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ResourceList"": [ 140, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""ResourceListTranslated"": [ 144, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""InstancePath"": [ 148, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ServiceName"": [ 156, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DuplicatePDO"": [ 164, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ResourceRequirements"": [ 168, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_REQUIREMENTS_LIST\""}"" ]],
				 ""InterfaceType"": [ 172, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""ChildInterfaceType"": [ 180, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ChildBusNumber"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""ChildBusTypeIndex"": [ 188, [ ""UInt16"", ""null"" ]],
				 ""RemovalPolicy"": [ 190, [ ""Byte"", ""null"" ]],
				 ""HardwareRemovalPolicy"": [ 191, [ ""Byte"", ""null"" ]],
				 ""TargetDeviceNotify"": [ 192, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceArbiterList"": [ 200, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceTranslatorList"": [ 208, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NoTranslatorMask"": [ 216, [ ""UInt16"", ""null"" ]],
				 ""QueryTranslatorMask"": [ 218, [ ""UInt16"", ""null"" ]],
				 ""NoArbiterMask"": [ 220, [ ""UInt16"", ""null"" ]],
				 ""QueryArbiterMask"": [ 222, [ ""UInt16"", ""null"" ]],
				 ""OverUsed1"": [ 224, [ ""__unnamed"", ""null"" ]],
				 ""OverUsed2"": [ 228, [ ""__unnamed"", ""null"" ]],
				 ""BootResources"": [ 232, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""CapabilityFlags"": [ 236, [ ""UInt32"", ""null"" ]],
				 ""DockInfo"": [ 240, [ ""__unnamed"", ""null"" ]],
				 ""DisableableDepends"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""PendedSetInterfaceState"": [ 260, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LegacyBusListEntry"": [ 268, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DriverUnloadRetryCount"": [ 276, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Sibling { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Child { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LastChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Level { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Notify { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _PNP_DEVNODE_STATE State { get { return (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _PNP_DEVNODE_STATE PreviousState { get { return (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _PNP_DEVNODE_STATE[] StateHistory
		{
			get
			{
				_PNP_DEVNODE_STATE[] returnValue = new _PNP_DEVNODE_STATE[20];
				int size = 4;
				for(int i=0; i<20; i++ )
					returnValue[i] = (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 StateHistoryEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public Int32 CompletionStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 PendingIrp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 UserFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 Problem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 PhysicalDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 ResourceList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 ResourceListTranslated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public _UNICODE_STRING InstancePath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
		public _UNICODE_STRING ServiceName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public UInt32 DuplicatePDO { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 ResourceRequirements { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public _INTERFACE_TYPE ChildInterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 ChildBusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt16 ChildBusTypeIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 188); } }
		public Byte RemovalPolicy{ get { return _StructureData[_BufferOffset +190]; } }
		public Byte HardwareRemovalPolicy{ get { return _StructureData[_BufferOffset +191]; } }
		public _LIST_ENTRY TargetDeviceNotify
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeviceArbiterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeviceTranslatorList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public UInt16 NoTranslatorMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 216); } }
		public UInt16 QueryTranslatorMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 218); } }
		public UInt16 NoArbiterMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 220); } }
		public UInt16 QueryArbiterMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 222); } }
		public __unnamed OverUsed1
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public __unnamed OverUsed2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 228);
				return returnValue;
			}
		}
		public UInt32 BootResources { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt32 CapabilityFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public __unnamed DockInfo
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt32 DisableableDepends { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public _LIST_ENTRY PendedSetInterfaceState
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 260);
				return returnValue;
			}
		}
		public _LIST_ENTRY LegacyBusListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 268);
				return returnValue;
			}
		}
		public UInt32 DriverUnloadRetryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
	}
	#endregion
	#region _HEAP_LOCK
 
	public class _HEAP_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LOCK"": [ 56, {
				 ""Lock"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed Lock
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KPCR
 
	public class _KPCR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPCR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3440; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPCR"": [ 3440, {
				 ""NtTib"": [ 0, [ ""_NT_TIB"", ""null"" ]],
				 ""SelfPcr"": [ 28, [ ""Pointer"", ""{\""target\"":\""_KPCR\""}"" ]],
				 ""Prcb"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KPRCB\""}"" ]],
				 ""Irql"": [ 36, [ ""Byte"", ""null"" ]],
				 ""IRR"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""IrrActive"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""IDR"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""KdVersionBlock"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IDT"": [ 56, [ ""Pointer"", ""{\""target\"":\""_KIDTENTRY\""}"" ]],
				 ""GDT"": [ 60, [ ""Pointer"", ""{\""target\"":\""_KGDTENTRY\""}"" ]],
				 ""TSS"": [ 64, [ ""Pointer"", ""{\""target\"":\""_KTSS\""}"" ]],
				 ""MajorVersion"": [ 68, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 70, [ ""UInt16"", ""null"" ]],
				 ""SetMember"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""StallScaleFactor"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""DebugActive"": [ 80, [ ""Byte"", ""null"" ]],
				 ""Number"": [ 81, [ ""Byte"", ""null"" ]],
				 ""Spare0"": [ 82, [ ""Byte"", ""null"" ]],
				 ""SecondLevelCacheAssociativity"": [ 83, [ ""Byte"", ""null"" ]],
				 ""VdmAlert"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""KernelReserved"": [ 88, [ ""Array"", ""{\""count\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""SecondLevelCacheSize"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""HalReserved"": [ 148, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""InterruptMode"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""Spare1"": [ 216, [ ""Byte"", ""null"" ]],
				 ""KernelReserved2"": [ 220, [ ""Array"", ""{\""count\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""PrcbData"": [ 288, [ ""_KPRCB"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _NT_TIB NtTib
		{
			get
			{
				_NT_TIB returnValue = new _NT_TIB(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SelfPcr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Prcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte Irql{ get { return _StructureData[_BufferOffset +36]; } }
		public UInt32 IRR { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 IrrActive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 IDR { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 KdVersionBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 IDT { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 GDT { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 TSS { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 68); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 70); } }
		public UInt32 SetMember { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 StallScaleFactor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public Byte DebugActive{ get { return _StructureData[_BufferOffset +80]; } }
		public Byte Number{ get { return _StructureData[_BufferOffset +81]; } }
		public Byte Spare0{ get { return _StructureData[_BufferOffset +82]; } }
		public Byte SecondLevelCacheAssociativity{ get { return _StructureData[_BufferOffset +83]; } }
		public UInt32 VdmAlert { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32[] KernelReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[14];
				for(int i=0; i<14; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 SecondLevelCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32[] HalReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 148);
				return returnValue;
			}
		}
		public UInt32 InterruptMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public Byte Spare1{ get { return _StructureData[_BufferOffset +216]; } }
		public UInt32[] KernelReserved2
		{
			get
			{
				UInt32[] returnValue = new UInt32[17];
				for(int i=0; i<17; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 220);
				return returnValue;
			}
		}
		public _KPRCB PrcbData
		{
			get
			{
				_KPRCB returnValue = new _KPRCB(_StructureData, _BufferOffset + 288);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMCOLOR_TABLES
 
	public class _MMCOLOR_TABLES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMCOLOR_TABLES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMCOLOR_TABLES"": [ 12, {
				 ""Flink"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Blink"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Count"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_FILL_MEMORY
 
	public class _DBGKD_FILL_MEMORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_FILL_MEMORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_FILL_MEMORY"": [ 16, {
				 ""Address"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Length"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""PatternLength"": [ 14, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 PatternLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
	}
	#endregion
	#region _PP_LOOKASIDE_LIST
 
	public class _PP_LOOKASIDE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PP_LOOKASIDE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PP_LOOKASIDE_LIST"": [ 8, {
				 ""P"": [ 0, [ ""Pointer"", ""{\""target\"":\""_GENERAL_LOOKASIDE\""}"" ]],
				 ""L"": [ 4, [ ""Pointer"", ""{\""target\"":\""_GENERAL_LOOKASIDE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 P { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 L { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PHYSICAL_MEMORY_RUN
 
	public class _PHYSICAL_MEMORY_RUN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PHYSICAL_MEMORY_RUN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PHYSICAL_MEMORY_RUN"": [ 8, {
				 ""BasePage"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PageCount"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BasePage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MMPFN
 
	public class _MMPFN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFN"": [ 28, {
				 ""u1"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""PteAddress"": [ 4, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""u2"": [ 8, [ ""__unnamed"", ""null"" ]],
				 ""u3"": [ 12, [ ""__unnamed"", ""null"" ]],
				 ""OriginalPte"": [ 16, [ ""_MMPTE"", ""null"" ]],
				 ""u4"": [ 24, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed u1
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 PteAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public __unnamed u2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public __unnamed u3
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _MMPTE OriginalPte
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public __unnamed u4
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MM_SESSION_SPACE
 
	public class _MM_SESSION_SPACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_SESSION_SPACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4728; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_SESSION_SPACE"": [ 4728, {
				 ""ReferenceCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""u"": [ 4, [ ""__unnamed"", ""null"" ]],
				 ""SessionId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SessionPageDirectoryIndex"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""GlobalVirtualAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MM_SESSION_SPACE\""}"" ]],
				 ""ProcessList"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NonPagedPoolBytes"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PagedPoolBytes"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""NonPagedPoolAllocations"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""PagedPoolAllocations"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""NonPagablePages"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""CommittedPages"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""LastProcessSwappedOutTime"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PageTables"": [ 64, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""PagedPoolMutex"": [ 68, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""PagedPoolStart"": [ 100, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PagedPoolEnd"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PagedPoolBasePde"": [ 108, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""PagedPoolInfo"": [ 112, [ ""_MM_PAGED_POOL_INFO"", ""null"" ]],
				 ""Color"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""ProcessOutSwapCount"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""ImageList"": [ 156, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""GlobalPteEntry"": [ 164, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""CopyOnWriteCount"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""SessionPoolAllocationFailures"": [ 172, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""AttachCount"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""AttachEvent"": [ 192, [ ""_KEVENT"", ""null"" ]],
				 ""LastProcess"": [ 208, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""Vm"": [ 216, [ ""_MMSUPPORT"", ""null"" ]],
				 ""Wsle"": [ 280, [ ""Pointer"", ""{\""target\"":\""_MMWSLE\""}"" ]],
				 ""WsLock"": [ 284, [ ""_ERESOURCE"", ""null"" ]],
				 ""WsListEntry"": [ 340, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Session"": [ 348, [ ""_MMSESSION"", ""null"" ]],
				 ""Win32KDriverObject"": [ 408, [ ""_DRIVER_OBJECT"", ""null"" ]],
				 ""WorkingSetLockOwner"": [ 576, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""PagedPool"": [ 580, [ ""_POOL_DESCRIPTOR"", ""null"" ]],
				 ""ProcessReferenceToSession"": [ 4716, [ ""Int32"", ""null"" ]],
				 ""LocaleId"": [ 4720, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SessionPageDirectoryIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 GlobalVirtualAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY ProcessList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 NonPagedPoolBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PagedPoolBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 NonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 PagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 NonPagablePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 CommittedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _LARGE_INTEGER LastProcessSwappedOutTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32 PageTables { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _FAST_MUTEX PagedPoolMutex
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 68);
				return returnValue;
			}
		}
		public UInt32 PagedPoolStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 PagedPoolEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 PagedPoolBasePde { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _MM_PAGED_POOL_INFO PagedPoolInfo
		{
			get
			{
				_MM_PAGED_POOL_INFO returnValue = new _MM_PAGED_POOL_INFO(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 Color { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 ProcessOutSwapCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public _LIST_ENTRY ImageList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public UInt32 GlobalPteEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 CopyOnWriteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32[] SessionPoolAllocationFailures
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 172);
				return returnValue;
			}
		}
		public UInt32 AttachCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _KEVENT AttachEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt32 LastProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public _MMSUPPORT Vm
		{
			get
			{
				_MMSUPPORT returnValue = new _MMSUPPORT(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public UInt32 Wsle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public _ERESOURCE WsLock
		{
			get
			{
				_ERESOURCE returnValue = new _ERESOURCE(_StructureData, _BufferOffset + 284);
				return returnValue;
			}
		}
		public _LIST_ENTRY WsListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 340);
				return returnValue;
			}
		}
		public _MMSESSION Session
		{
			get
			{
				_MMSESSION returnValue = new _MMSESSION(_StructureData, _BufferOffset + 348);
				return returnValue;
			}
		}
		public _DRIVER_OBJECT Win32KDriverObject
		{
			get
			{
				_DRIVER_OBJECT returnValue = new _DRIVER_OBJECT(_StructureData, _BufferOffset + 408);
				return returnValue;
			}
		}
		public UInt32 WorkingSetLockOwner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 576); } }
		public _POOL_DESCRIPTOR PagedPool
		{
			get
			{
				_POOL_DESCRIPTOR returnValue = new _POOL_DESCRIPTOR(_StructureData, _BufferOffset + 580);
				return returnValue;
			}
		}
		public Int32 ProcessReferenceToSession { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4716); } }
		public UInt32 LocaleId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4720); } }
	}
	#endregion
	#region _PEB
 
	public class _PEB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 528; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB"": [ 528, {
				 ""InheritedAddressSpace"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ReadImageFileExecOptions"": [ 1, [ ""Byte"", ""null"" ]],
				 ""BeingDebugged"": [ 2, [ ""Byte"", ""null"" ]],
				 ""SpareBool"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Mutant"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageBaseAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Ldr"": [ 12, [ ""Pointer"", ""{\""target\"":\""_PEB_LDR_DATA\""}"" ]],
				 ""ProcessParameters"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_USER_PROCESS_PARAMETERS\""}"" ]],
				 ""SubSystemData"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessHeap"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastPebLock"": [ 28, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION\""}"" ]],
				 ""FastPebLockRoutine"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastPebUnlockRoutine"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EnvironmentUpdateCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""KernelCallbackTable"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemReserved"": [ 48, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""AtlThunkSListPtr32"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""FreeList"": [ 56, [ ""Pointer"", ""{\""target\"":\""_PEB_FREE_BLOCK\""}"" ]],
				 ""TlsExpansionCounter"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""TlsBitmap"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsBitmapBits"": [ 68, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ReadOnlySharedMemoryBase"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadOnlySharedMemoryHeap"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadOnlyStaticServerData"": [ 84, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""AnsiCodePageData"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OemCodePageData"": [ 92, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnicodeCaseTableData"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfProcessors"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""NtGlobalFlag"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""CriticalSectionTimeout"": [ 112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""HeapSegmentReserve"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""HeapSegmentCommit"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""HeapDeCommitTotalFreeThreshold"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""HeapDeCommitFreeBlockThreshold"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""NumberOfHeaps"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""MaximumNumberOfHeaps"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeaps"": [ 144, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""GdiSharedHandleTable"": [ 148, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessStarterHelper"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GdiDCAttributeList"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""LoaderLock"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OSMajorVersion"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""OSMinorVersion"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""OSBuildNumber"": [ 172, [ ""UInt16"", ""null"" ]],
				 ""OSCSDVersion"": [ 174, [ ""UInt16"", ""null"" ]],
				 ""OSPlatformId"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystem"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMajorVersion"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMinorVersion"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""ImageProcessAffinityMask"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""GdiHandleBuffer"": [ 196, [ ""Array"", ""{\""count\"":34,\""target\"":\""UInt32\""}"" ]],
				 ""PostProcessInitRoutine"": [ 332, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsExpansionBitmap"": [ 336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsExpansionBitmapBits"": [ 340, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]],
				 ""SessionId"": [ 468, [ ""UInt32"", ""null"" ]],
				 ""AppCompatFlags"": [ 472, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""AppCompatFlagsUser"": [ 480, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""pShimData"": [ 488, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AppCompatInfo"": [ 492, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CSDVersion"": [ 496, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ActivationContextData"": [ 504, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessAssemblyStorageMap"": [ 508, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemDefaultActivationContextData"": [ 512, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemAssemblyStorageMap"": [ 516, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MinimumStackCommit"": [ 520, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte InheritedAddressSpace{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ReadImageFileExecOptions{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte BeingDebugged{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte SpareBool{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 Mutant { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ImageBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Ldr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ProcessParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SubSystemData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ProcessHeap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FastPebLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FastPebLockRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FastPebUnlockRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 EnvironmentUpdateCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 KernelCallbackTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32[] SystemReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 AtlThunkSListPtr32 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 FreeList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 TlsExpansionCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 TlsBitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32[] TlsBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 68);
				return returnValue;
			}
		}
		public UInt32 ReadOnlySharedMemoryBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 ReadOnlySharedMemoryHeap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ReadOnlyStaticServerData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 AnsiCodePageData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 OemCodePageData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 UnicodeCaseTableData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 NumberOfProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 NtGlobalFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public _LARGE_INTEGER CriticalSectionTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 HeapSegmentReserve { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 HeapSegmentCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 HeapDeCommitTotalFreeThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 HeapDeCommitFreeBlockThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 NumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 MaximumNumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 ProcessHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 GdiSharedHandleTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 ProcessStarterHelper { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 GdiDCAttributeList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 LoaderLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 OSMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 OSMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt16 OSBuildNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 172); } }
		public UInt16 OSCSDVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 174); } }
		public UInt32 OSPlatformId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 ImageSubsystem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 ImageSubsystemMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 ImageSubsystemMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 ImageProcessAffinityMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32[] GdiHandleBuffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[34];
				for(int i=0; i<34; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 196);
				return returnValue;
			}
		}
		public UInt32 PostProcessInitRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 332); } }
		public UInt32 TlsExpansionBitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 336); } }
		public UInt32[] TlsExpansionBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 340);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 468); } }
		public _ULARGE_INTEGER AppCompatFlags
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER AppCompatFlagsUser
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 480);
				return returnValue;
			}
		}
		public UInt32 pShimData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 488); } }
		public UInt32 AppCompatInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 492); } }
		public _UNICODE_STRING CSDVersion
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 496);
				return returnValue;
			}
		}
		public UInt32 ActivationContextData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 504); } }
		public UInt32 ProcessAssemblyStorageMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 508); } }
		public UInt32 SystemDefaultActivationContextData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 512); } }
		public UInt32 SystemAssemblyStorageMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 516); } }
		public UInt32 MinimumStackCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
	}
	#endregion
	#region _HEAP_FREE_ENTRY
 
	public class _HEAP_FREE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_FREE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_FREE_ENTRY"": [ 16, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""PreviousSize"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""SubSegmentCode"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SmallTagIndex"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 5, [ ""Byte"", ""null"" ]],
				 ""UnusedBytes"": [ 6, [ ""Byte"", ""null"" ]],
				 ""SegmentIndex"": [ 7, [ ""Byte"", ""null"" ]],
				 ""FreeList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 PreviousSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 SubSegmentCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte SmallTagIndex{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte UnusedBytes{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte SegmentIndex{ get { return _StructureData[_BufferOffset +7]; } }
		public _LIST_ENTRY FreeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ERESOURCE
 
	public class _ERESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ERESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ERESOURCE"": [ 56, {
				 ""SystemResourcesList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OwnerTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_OWNER_ENTRY\""}"" ]],
				 ""ActiveCount"": [ 12, [ ""Int16"", ""null"" ]],
				 ""Flag"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""SharedWaiters"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KSEMAPHORE\""}"" ]],
				 ""ExclusiveWaiters"": [ 20, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""OwnerThreads"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ContentionCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSharedWaiters"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""NumberOfExclusiveWaiters"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""Address"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreatorBackTraceIndex"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""SpinLock"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY SystemResourcesList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 OwnerTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int16 ActiveCount { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 Flag { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt32 SharedWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ExclusiveWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _OWNER_ENTRY[] OwnerThreads
		{
			get
			{
				_OWNER_ENTRY[] returnValue = new _OWNER_ENTRY[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _OWNER_ENTRY(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 ContentionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 NumberOfSharedWaiters { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 NumberOfExclusiveWaiters { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt32 Address { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 CreatorBackTraceIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 SpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _DBGKD_GET_CONTEXT
 
	public class _DBGKD_GET_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_CONTEXT"": [ 4, {
				 ""Unused"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Unused { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MMPTE_SOFTWARE
 
	public class _MMPTE_SOFTWARE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_SOFTWARE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_SOFTWARE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileLow"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileHigh"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileLow
		{
			get
			{
				// start: 1  end: 5  Mask: 0000000000011110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 30) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Transition
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 12  end: 32  Mask: 11111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294963200) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileHigh
		{
			get
			{
				// start: 32  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744069414584320) >> 32;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _IO_RESOURCE_REQUIREMENTS_LIST
 
	public class _IO_RESOURCE_REQUIREMENTS_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_RESOURCE_REQUIREMENTS_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_RESOURCE_REQUIREMENTS_LIST"": [ 72, {
				 ""ListSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SlotNumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 16, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""AlternativeLists"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ListSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 AlternativeLists { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _IO_RESOURCE_LIST[] List
		{
			get
			{
				_IO_RESOURCE_LIST[] returnValue = new _IO_RESOURCE_LIST[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _IO_RESOURCE_LIST(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CACHE_UNINITIALIZE_EVENT
 
	public class _CACHE_UNINITIALIZE_EVENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHE_UNINITIALIZE_EVENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHE_UNINITIALIZE_EVENT"": [ 20, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CACHE_UNINITIALIZE_EVENT\""}"" ]],
				 ""Event"": [ 4, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_RESOURCE_LIST
 
	public class _CM_RESOURCE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_RESOURCE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_RESOURCE_LIST"": [ 36, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _CM_FULL_RESOURCE_DESCRIPTOR[] List
		{
			get
			{
				_CM_FULL_RESOURCE_DESCRIPTOR[] returnValue = new _CM_FULL_RESOURCE_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _CM_FULL_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_FULL_RESOURCE_DESCRIPTOR
 
	public class _CM_FULL_RESOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_FULL_RESOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_FULL_RESOURCE_DESCRIPTOR"": [ 32, {
				 ""InterfaceType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PartialResourceList"": [ 8, [ ""_CM_PARTIAL_RESOURCE_LIST"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _CM_PARTIAL_RESOURCE_LIST PartialResourceList
		{
			get
			{
				_CM_PARTIAL_RESOURCE_LIST returnValue = new _CM_PARTIAL_RESOURCE_LIST(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EPROCESS_QUOTA_ENTRY
 
	public class _EPROCESS_QUOTA_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPROCESS_QUOTA_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPROCESS_QUOTA_ENTRY"": [ 16, {
				 ""Usage"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Limit"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Peak"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Return"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Usage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Limit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Peak { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Return { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _CM_CACHED_VALUE_INDEX
 
	public class _CM_CACHED_VALUE_INDEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_CACHED_VALUE_INDEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 84; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_CACHED_VALUE_INDEX"": [ 84, {
				 ""CellIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Data"": [ 4, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CellIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public __unnamed Data
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WMI_BUFFER_HEADER
 
	public class _WMI_BUFFER_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_BUFFER_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_BUFFER_HEADER"": [ 72, {
				 ""Wnode"": [ 0, [ ""_WNODE_HEADER"", ""null"" ]],
				 ""Reserved1"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Reserved2"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Reserved3"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Alignment"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SlistEntry"": [ 28, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Entry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReferenceCount"": [ 0, [ ""Int32"", ""null"" ]],
				 ""SavedOffset"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentOffset"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UsePerfClock"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""TimeStamp"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Guid"": [ 24, [ ""_GUID"", ""null"" ]],
				 ""ClientContext"": [ 40, [ ""_WMI_CLIENT_CONTEXT"", ""null"" ]],
				 ""State"": [ 44, [ ""_WMI_BUFFER_STATE"", ""null"" ]],
				 ""Flags"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Offset"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""EventsLost"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""InstanceGuid"": [ 56, [ ""_GUID"", ""null"" ]],
				 ""LoggerContext"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GlobalEntry"": [ 60, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WNODE_HEADER Wnode
		{
			get
			{
				_WNODE_HEADER returnValue = new _WNODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Reserved1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER Reserved3
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Alignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _SINGLE_LIST_ENTRY SlistEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SavedOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 UsePerfClock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _GUID Guid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _WMI_CLIENT_CONTEXT ClientContext
		{
			get
			{
				_WMI_CLIENT_CONTEXT returnValue = new _WMI_CLIENT_CONTEXT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _WMI_BUFFER_STATE State
		{
			get
			{
				_WMI_BUFFER_STATE returnValue = new _WMI_BUFFER_STATE(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 EventsLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _GUID InstanceGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32 LoggerContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _SINGLE_LIST_ENTRY GlobalEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSEMAPHORE
 
	public class _KSEMAPHORE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSEMAPHORE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSEMAPHORE"": [ 20, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""Limit"": [ 16, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Limit { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PROCESSOR_POWER_STATE
 
	public class _PROCESSOR_POWER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_POWER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 288; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_POWER_STATE"": [ 288, {
				 ""IdleFunction"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Idle0KernelTimeLimit"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Idle0LastTime"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""IdleHandlers"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleState"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleHandlersCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""LastCheck"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""IdleTimes"": [ 32, [ ""PROCESSOR_IDLE_TIMES"", ""null"" ]],
				 ""IdleTime1"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""PromotionCheck"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""IdleTime2"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""CurrentThrottle"": [ 76, [ ""Byte"", ""null"" ]],
				 ""ThermalThrottleLimit"": [ 77, [ ""Byte"", ""null"" ]],
				 ""CurrentThrottleIndex"": [ 78, [ ""Byte"", ""null"" ]],
				 ""ThermalThrottleIndex"": [ 79, [ ""Byte"", ""null"" ]],
				 ""LastKernelUserTime"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""LastIdleThreadKernelTime"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""PackageIdleStartTime"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""PackageIdleTime"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DebugCount"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""LastSysTime"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""TotalIdleStateTime"": [ 104, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""TotalIdleTransitions"": [ 128, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""PreviousC3StateTime"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""KneeThrottleIndex"": [ 152, [ ""Byte"", ""null"" ]],
				 ""ThrottleLimitIndex"": [ 153, [ ""Byte"", ""null"" ]],
				 ""PerfStatesCount"": [ 154, [ ""Byte"", ""null"" ]],
				 ""ProcessorMinThrottle"": [ 155, [ ""Byte"", ""null"" ]],
				 ""ProcessorMaxThrottle"": [ 156, [ ""Byte"", ""null"" ]],
				 ""EnableIdleAccounting"": [ 157, [ ""Byte"", ""null"" ]],
				 ""LastC3Percentage"": [ 158, [ ""Byte"", ""null"" ]],
				 ""LastAdjustedBusyPercentage"": [ 159, [ ""Byte"", ""null"" ]],
				 ""PromotionCount"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""DemotionCount"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""ErrorCount"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""RetryCount"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""PerfCounterFrequency"": [ 184, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PerfTickCount"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""PerfTimer"": [ 200, [ ""_KTIMER"", ""null"" ]],
				 ""PerfDpc"": [ 240, [ ""_KDPC"", ""null"" ]],
				 ""PerfStates"": [ 272, [ ""Pointer"", ""{\""target\"":\""PROCESSOR_PERF_STATE\""}"" ]],
				 ""PerfSetThrottle"": [ 276, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LastC3KernelUserTime"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""LastPackageIdleTime"": [ 284, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 IdleFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Idle0KernelTimeLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Idle0LastTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 IdleHandlers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 IdleState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 IdleHandlersCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 LastCheck { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public PROCESSOR_IDLE_TIMES IdleTimes
		{
			get
			{
				PROCESSOR_IDLE_TIMES returnValue = new PROCESSOR_IDLE_TIMES(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 IdleTime1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 PromotionCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 IdleTime2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public Byte CurrentThrottle{ get { return _StructureData[_BufferOffset +76]; } }
		public Byte ThermalThrottleLimit{ get { return _StructureData[_BufferOffset +77]; } }
		public Byte CurrentThrottleIndex{ get { return _StructureData[_BufferOffset +78]; } }
		public Byte ThermalThrottleIndex{ get { return _StructureData[_BufferOffset +79]; } }
		public UInt32 LastKernelUserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 LastIdleThreadKernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 PackageIdleStartTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 PackageIdleTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 DebugCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 LastSysTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt64[] TotalIdleStateTime
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32[] TotalIdleTransitions
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 PreviousC3StateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public Byte KneeThrottleIndex{ get { return _StructureData[_BufferOffset +152]; } }
		public Byte ThrottleLimitIndex{ get { return _StructureData[_BufferOffset +153]; } }
		public Byte PerfStatesCount{ get { return _StructureData[_BufferOffset +154]; } }
		public Byte ProcessorMinThrottle{ get { return _StructureData[_BufferOffset +155]; } }
		public Byte ProcessorMaxThrottle{ get { return _StructureData[_BufferOffset +156]; } }
		public Byte EnableIdleAccounting{ get { return _StructureData[_BufferOffset +157]; } }
		public Byte LastC3Percentage{ get { return _StructureData[_BufferOffset +158]; } }
		public Byte LastAdjustedBusyPercentage{ get { return _StructureData[_BufferOffset +159]; } }
		public UInt32 PromotionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 DemotionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 ErrorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 RetryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public _LARGE_INTEGER PerfCounterFrequency
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public UInt32 PerfTickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public _KTIMER PerfTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public _KDPC PerfDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt32 PerfStates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 PerfSetThrottle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
		public UInt32 LastC3KernelUserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 LastPackageIdleTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_MSR
 
	public class _DBGKD_READ_WRITE_MSR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_MSR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_MSR"": [ 12, {
				 ""Msr"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DataValueLow"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DataValueHigh"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Msr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DataValueLow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DataValueHigh { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MMPFNENTRY
 
	public class _MMPFNENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFNENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFNENTRY"": [ 4, {
				 ""Modified"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""WriteInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""PrototypePte"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""PageColor"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ParityError"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""PageLocation"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""RemovalRequested"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""CacheAttribute"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""Rom"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""LockCharged"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""DontUse"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Modified
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadInProgress
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 WriteInProgress
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 PrototypePte
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 PageColor
		{
			get
			{
				// start: 4  end: 7  Mask: 0000000001110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 112) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ParityError
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 PageLocation
		{
			get
			{
				// start: 8  end: 11  Mask: 0000011100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1792) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 RemovalRequested
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 CacheAttribute
		{
			get
			{
				// start: 12  end: 14  Mask: 0011000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 12288) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 Rom
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 LockCharged
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 DontUse
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _IO_COUNTERS
 
	public class _IO_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_COUNTERS"": [ 48, {
				 ""ReadOperationCount"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""WriteOperationCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""OtherOperationCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ReadTransferCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""WriteTransferCount"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""OtherTransferCount"": [ 40, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ReadOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 WriteOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 OtherOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ReadTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 WriteTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 OtherTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _KTSS
 
	public class _KTSS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTSS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8364; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTSS"": [ 8364, {
				 ""Backlink"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Reserved0"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Esp0"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Ss0"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Reserved1"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""NotUsed1"": [ 12, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""CR3"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Eip"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""EFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Eax"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Ecx"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Edx"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Ebx"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""Esp"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Ebp"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Esi"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Edi"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""Es"": [ 72, [ ""UInt16"", ""null"" ]],
				 ""Reserved2"": [ 74, [ ""UInt16"", ""null"" ]],
				 ""Cs"": [ 76, [ ""UInt16"", ""null"" ]],
				 ""Reserved3"": [ 78, [ ""UInt16"", ""null"" ]],
				 ""Ss"": [ 80, [ ""UInt16"", ""null"" ]],
				 ""Reserved4"": [ 82, [ ""UInt16"", ""null"" ]],
				 ""Ds"": [ 84, [ ""UInt16"", ""null"" ]],
				 ""Reserved5"": [ 86, [ ""UInt16"", ""null"" ]],
				 ""Fs"": [ 88, [ ""UInt16"", ""null"" ]],
				 ""Reserved6"": [ 90, [ ""UInt16"", ""null"" ]],
				 ""Gs"": [ 92, [ ""UInt16"", ""null"" ]],
				 ""Reserved7"": [ 94, [ ""UInt16"", ""null"" ]],
				 ""LDT"": [ 96, [ ""UInt16"", ""null"" ]],
				 ""Reserved8"": [ 98, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 100, [ ""UInt16"", ""null"" ]],
				 ""IoMapBase"": [ 102, [ ""UInt16"", ""null"" ]],
				 ""IoMaps"": [ 104, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""IntDirectionMap"": [ 8332, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Backlink { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Reserved0 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Esp0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 Ss0 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 Reserved1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32[] NotUsed1
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 CR3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Eip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Eax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Ecx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Edx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Ebx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 Esp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 Ebp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Esi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Edi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt16 Es { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 72); } }
		public UInt16 Reserved2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 74); } }
		public UInt16 Cs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 76); } }
		public UInt16 Reserved3 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 78); } }
		public UInt16 Ss { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 80); } }
		public UInt16 Reserved4 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 82); } }
		public UInt16 Ds { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 84); } }
		public UInt16 Reserved5 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 86); } }
		public UInt16 Fs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 88); } }
		public UInt16 Reserved6 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 90); } }
		public UInt16 Gs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 92); } }
		public UInt16 Reserved7 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 94); } }
		public UInt16 LDT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 96); } }
		public UInt16 Reserved8 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 98); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 100); } }
		public UInt16 IoMapBase { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 102); } }
		public _KiIoAccessMap[] IoMaps
		{
			get
			{
				_KiIoAccessMap[] returnValue = new _KiIoAccessMap[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _KiIoAccessMap(_StructureData, (i * size) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public Byte[] IntDirectionMap
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 8332];
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_QUERY_MEMORY
 
	public class _DBGKD_QUERY_MEMORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_QUERY_MEMORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_QUERY_MEMORY"": [ 24, {
				 ""Address"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""AddressSpace"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _KIDTENTRY
 
	public class _KIDTENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KIDTENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KIDTENTRY"": [ 8, {
				 ""Offset"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Selector"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Access"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""ExtendedOffset"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Offset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Selector { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Access { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 ExtendedOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region _DEVICE_OBJECT_POWER_EXTENSION
 
	public class _DEVICE_OBJECT_POWER_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_OBJECT_POWER_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_OBJECT_POWER_EXTENSION"": [ 76, {
				 ""IdleCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ConservationIdleTime"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PerformanceIdleTime"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 12, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""IdleList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceType"": [ 24, [ ""Byte"", ""null"" ]],
				 ""State"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NotifySourceList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NotifyTargetList"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PowerChannelSummary"": [ 48, [ ""_POWER_CHANNEL_SUMMARY"", ""null"" ]],
				 ""Volume"": [ 68, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 IdleCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ConservationIdleTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PerformanceIdleTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LIST_ENTRY IdleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte DeviceType{ get { return _StructureData[_BufferOffset +24]; } }
		public _DEVICE_POWER_STATE State { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _LIST_ENTRY NotifySourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY NotifyTargetList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _POWER_CHANNEL_SUMMARY PowerChannelSummary
		{
			get
			{
				_POWER_CHANNEL_SUMMARY returnValue = new _POWER_CHANNEL_SUMMARY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY Volume
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 68);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMSUPPORT_FLAGS
 
	public class _MMSUPPORT_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT_FLAGS"": [ 4, {
				 ""SessionSpace"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""BeingTrimmed"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""SessionLeader"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""TrimHard"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""WorkingSetHard"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""AddressSpaceBeingDeleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Available"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""AllowWorkingSetAdjustment"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""MemoryPriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SessionSpace
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 BeingTrimmed
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 SessionLeader
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 TrimHard
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 WorkingSetHard
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressSpaceBeingDeleted
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Available
		{
			get
			{
				// start: 6  end: 16  Mask: 1111111111000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65472) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 AllowWorkingSetAdjustment
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16711680) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 MemoryPriority
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _TERMINATION_PORT
 
	public class _TERMINATION_PORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TERMINATION_PORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TERMINATION_PORT"": [ 8, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_TERMINATION_PORT\""}"" ]],
				 ""Port"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _SYSTEM_POWER_POLICY
 
	public class _SYSTEM_POWER_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SYSTEM_POWER_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 232; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SYSTEM_POWER_POLICY"": [ 232, {
				 ""Revision"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PowerButton"": [ 4, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""SleepButton"": [ 16, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""LidClose"": [ 28, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""LidOpenWake"": [ 40, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Idle"": [ 48, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""IdleTimeout"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""IdleSensitivity"": [ 64, [ ""Byte"", ""null"" ]],
				 ""DynamicThrottle"": [ 65, [ ""Byte"", ""null"" ]],
				 ""Spare2"": [ 66, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""MinSleep"": [ 68, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""MaxSleep"": [ 72, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ReducedLatencySleep"": [ 76, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""WinLogonFlags"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Spare3"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""DozeS4Timeout"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""BroadcastCapacityResolution"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DischargePolicy"": [ 96, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""VideoTimeout"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""VideoDimDisplay"": [ 196, [ ""Byte"", ""null"" ]],
				 ""VideoReserved"": [ 200, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""SpindownTimeout"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""OptimizeForPower"": [ 216, [ ""Byte"", ""null"" ]],
				 ""FanThrottleTolerance"": [ 217, [ ""Byte"", ""null"" ]],
				 ""ForcedThrottle"": [ 218, [ ""Byte"", ""null"" ]],
				 ""MinThrottle"": [ 219, [ ""Byte"", ""null"" ]],
				 ""OverThrottled"": [ 220, [ ""POWER_ACTION_POLICY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Revision { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public POWER_ACTION_POLICY PowerButton
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public POWER_ACTION_POLICY SleepButton
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public POWER_ACTION_POLICY LidClose
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE LidOpenWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public POWER_ACTION_POLICY Idle
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 IdleTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public Byte IdleSensitivity{ get { return _StructureData[_BufferOffset +64]; } }
		public Byte DynamicThrottle{ get { return _StructureData[_BufferOffset +65]; } }
		public Byte[] Spare2
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 66];
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE MinSleep { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public _SYSTEM_POWER_STATE MaxSleep { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public _SYSTEM_POWER_STATE ReducedLatencySleep { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 WinLogonFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Spare3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 DozeS4Timeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 BroadcastCapacityResolution { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public SYSTEM_POWER_LEVEL[] DischargePolicy
		{
			get
			{
				SYSTEM_POWER_LEVEL[] returnValue = new SYSTEM_POWER_LEVEL[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new SYSTEM_POWER_LEVEL(_StructureData, (i * size) + _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt32 VideoTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public Byte VideoDimDisplay{ get { return _StructureData[_BufferOffset +196]; } }
		public UInt32[] VideoReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt32 SpindownTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public Byte OptimizeForPower{ get { return _StructureData[_BufferOffset +216]; } }
		public Byte FanThrottleTolerance{ get { return _StructureData[_BufferOffset +217]; } }
		public Byte ForcedThrottle{ get { return _StructureData[_BufferOffset +218]; } }
		public Byte MinThrottle{ get { return _StructureData[_BufferOffset +219]; } }
		public POWER_ACTION_POLICY OverThrottled
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 220);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_THERMAL_ZONE
 
	public class _POP_THERMAL_ZONE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_THERMAL_ZONE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 208; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_THERMAL_ZONE"": [ 208, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""State"": [ 8, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 9, [ ""Byte"", ""null"" ]],
				 ""Mode"": [ 10, [ ""Byte"", ""null"" ]],
				 ""PendingMode"": [ 11, [ ""Byte"", ""null"" ]],
				 ""ActivePoint"": [ 12, [ ""Byte"", ""null"" ]],
				 ""PendingActivePoint"": [ 13, [ ""Byte"", ""null"" ]],
				 ""Throttle"": [ 16, [ ""Int32"", ""null"" ]],
				 ""LastTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""SampleRate"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""LastTemp"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""PassiveTimer"": [ 40, [ ""_KTIMER"", ""null"" ]],
				 ""PassiveDpc"": [ 80, [ ""_KDPC"", ""null"" ]],
				 ""OverThrottled"": [ 112, [ ""_POP_ACTION_TRIGGER"", ""null"" ]],
				 ""Irp"": [ 124, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Info"": [ 128, [ ""_THERMAL_INFORMATION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte State{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte Mode{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte PendingMode{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte ActivePoint{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte PendingActivePoint{ get { return _StructureData[_BufferOffset +13]; } }
		public Int32 Throttle { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 LastTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 SampleRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 LastTemp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _KTIMER PassiveTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _KDPC PassiveDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _POP_ACTION_TRIGGER OverThrottled
		{
			get
			{
				_POP_ACTION_TRIGGER returnValue = new _POP_ACTION_TRIGGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 Irp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public _THERMAL_INFORMATION Info
		{
			get
			{
				_THERMAL_INFORMATION returnValue = new _THERMAL_INFORMATION(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_CONTINUE2
 
	public class _DBGKD_CONTINUE2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_CONTINUE2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_CONTINUE2"": [ 32, {
				 ""ContinueStatus"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ControlSet"": [ 4, [ ""_X86_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""AnyControlSet"": [ 4, [ ""_DBGKD_ANY_CONTROL_SET"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 ContinueStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _X86_DBGKD_CONTROL_SET ControlSet
		{
			get
			{
				_X86_DBGKD_CONTROL_SET returnValue = new _X86_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _DBGKD_ANY_CONTROL_SET AnyControlSet
		{
			get
			{
				_DBGKD_ANY_CONTROL_SET returnValue = new _DBGKD_ANY_CONTROL_SET(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROCESSOR_POWER_POLICY
 
	public class _PROCESSOR_POWER_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_POWER_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_POWER_POLICY"": [ 76, {
				 ""Revision"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DynamicThrottle"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 5, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""DisableCStates"": [ 8, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 8, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PolicyCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Policy"": [ 16, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Revision { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte DynamicThrottle{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5];
				return returnValue;
			}
		}
		public UInt32 DisableCStates
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4294967294) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PolicyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _PROCESSOR_POWER_POLICY_INFO[] Policy
		{
			get
			{
				_PROCESSOR_POWER_POLICY_INFO[] returnValue = new _PROCESSOR_POWER_POLICY_INFO[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _PROCESSOR_POWER_POLICY_INFO(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_DOS_HEADER
 
	public class _IMAGE_DOS_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_DOS_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_DOS_HEADER"": [ 64, {
				 ""e_magic"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""e_cblp"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""e_cp"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""e_crlc"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""e_cparhdr"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""e_minalloc"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""e_maxalloc"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""e_ss"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""e_sp"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""e_csum"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""e_ip"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""e_cs"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""e_lfarlc"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""e_ovno"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""e_res"": [ 28, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""e_oemid"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""e_oeminfo"": [ 38, [ ""UInt16"", ""null"" ]],
				 ""e_res2"": [ 40, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""e_lfanew"": [ 60, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 e_magic { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 e_cblp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 e_cp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 e_crlc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 e_cparhdr { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 e_minalloc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt16 e_maxalloc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 e_ss { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt16 e_sp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 e_csum { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16 e_ip { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 e_cs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt16 e_lfarlc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 e_ovno { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt16[] e_res
		{
			get
			{
				UInt16[] returnValue = new UInt16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt16 e_oemid { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public UInt16 e_oeminfo { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 38); } }
		public UInt16[] e_res2
		{
			get
			{
				UInt16[] returnValue = new UInt16[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public Int32 e_lfanew { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _OWNER_ENTRY
 
	public class _OWNER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OWNER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OWNER_ENTRY"": [ 8, {
				 ""OwnerThread"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""OwnerCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""TableSize"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 OwnerThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 OwnerCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HEAP_VIRTUAL_ALLOC_ENTRY
 
	public class _HEAP_VIRTUAL_ALLOC_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VIRTUAL_ALLOC_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VIRTUAL_ALLOC_ENTRY"": [ 32, {
				 ""Entry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExtraStuff"": [ 8, [ ""_HEAP_ENTRY_EXTRA"", ""null"" ]],
				 ""CommitSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ReserveSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BusyBlock"": [ 24, [ ""_HEAP_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _HEAP_ENTRY_EXTRA ExtraStuff
		{
			get
			{
				_HEAP_ENTRY_EXTRA returnValue = new _HEAP_ENTRY_EXTRA(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 CommitSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ReserveSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _HEAP_ENTRY BusyBlock
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_ATOM_TABLE
 
	public class _RTL_ATOM_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_ATOM_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_ATOM_TABLE"": [ 68, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CriticalSection"": [ 4, [ ""_RTL_CRITICAL_SECTION"", ""null"" ]],
				 ""RtlHandleTable"": [ 28, [ ""_RTL_HANDLE_TABLE"", ""null"" ]],
				 ""NumberOfBuckets"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Buckets"": [ 64, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_RTL_ATOM_TABLE_ENTRY\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _RTL_CRITICAL_SECTION CriticalSection
		{
			get
			{
				_RTL_CRITICAL_SECTION returnValue = new _RTL_CRITICAL_SECTION(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _RTL_HANDLE_TABLE RtlHandleTable
		{
			get
			{
				_RTL_HANDLE_TABLE returnValue = new _RTL_HANDLE_TABLE(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 NumberOfBuckets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32[] Buckets
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				int size = 4;
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FNSAVE_FORMAT
 
	public class _FNSAVE_FORMAT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FNSAVE_FORMAT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 108; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FNSAVE_FORMAT"": [ 108, {
				 ""ControlWord"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StatusWord"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TagWord"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ErrorOffset"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ErrorSelector"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataOffset"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DataSelector"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""RegisterArea"": [ 28, [ ""Array"", ""{\""count\"":80,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ControlWord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StatusWord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TagWord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ErrorOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ErrorSelector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DataSelector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte[] RegisterArea
		{
			get
			{
				Byte[] returnValue = new Byte[80];
				for(int i=0; i<80; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 28];
				return returnValue;
			}
		}
	}
	#endregion
	#region EX_QUEUE_WORKER_INFO
 
	public class EX_QUEUE_WORKER_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public EX_QUEUE_WORKER_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""EX_QUEUE_WORKER_INFO"": [ 4, {
				 ""QueueDisabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""MakeThreadsAsNecessary"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""WaitMode"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""WorkerCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""QueueWorkerInfo"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 QueueDisabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 MakeThreadsAsNecessary
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 WaitMode
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 WorkerCount
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public Int32 QueueWorkerInfo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region SYSTEM_POWER_LEVEL
 
	public class SYSTEM_POWER_LEVEL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public SYSTEM_POWER_LEVEL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""SYSTEM_POWER_LEVEL"": [ 24, {
				 ""Enable"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 1, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""BatteryLevel"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PowerPolicy"": [ 8, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""MinSystemState"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Enable{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1];
				return returnValue;
			}
		}
		public UInt32 BatteryLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public POWER_ACTION_POLICY PowerPolicy
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE MinSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region POWER_ACTION_POLICY
 
	public class POWER_ACTION_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public POWER_ACTION_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""POWER_ACTION_POLICY"": [ 12, {
				 ""Action"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_ACTION\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""EventCode"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public POWER_ACTION Action { get { return (POWER_ACTION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 EventCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region PROCESSOR_PERF_STATE
 
	public class PROCESSOR_PERF_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PROCESSOR_PERF_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PROCESSOR_PERF_STATE"": [ 32, {
				 ""PercentFrequency"": [ 0, [ ""Byte"", ""null"" ]],
				 ""MinCapacity"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Power"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""IncreaseLevel"": [ 4, [ ""Byte"", ""null"" ]],
				 ""DecreaseLevel"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""IncreaseTime"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DecreaseTime"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IncreaseCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DecreaseCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PerformanceTime"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte PercentFrequency{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte MinCapacity{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Power { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte IncreaseLevel{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte DecreaseLevel{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 IncreaseTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DecreaseTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 IncreaseCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DecreaseCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 PerformanceTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region PROCESSOR_IDLE_TIMES
 
	public class PROCESSOR_IDLE_TIMES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PROCESSOR_IDLE_TIMES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PROCESSOR_IDLE_TIMES"": [ 32, {
				 ""StartTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""EndTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""IdleHandlerReserved"": [ 16, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 StartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 EndTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32[] IdleHandlerReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_ROM_OPTIONAL_HEADER
 
	public class _IMAGE_ROM_OPTIONAL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_ROM_OPTIONAL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_ROM_OPTIONAL_HEADER"": [ 56, {
				 ""Magic"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MajorLinkerVersion"": [ 2, [ ""Byte"", ""null"" ]],
				 ""MinorLinkerVersion"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SizeOfCode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SizeOfInitializedData"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SizeOfUninitializedData"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AddressOfEntryPoint"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BaseOfCode"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BaseOfData"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""BaseOfBss"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""GprMask"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CprMask"": [ 36, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""GpValue"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Magic { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte MajorLinkerVersion{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte MinorLinkerVersion{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 SizeOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SizeOfInitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SizeOfUninitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AddressOfEntryPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 BaseOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BaseOfData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 BaseOfBss { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 GprMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32[] CprMask
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 GpValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _MMPTE_LIST
 
	public class _MMPTE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_LIST"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""OneEntry"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""filler0"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""filler1"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""NextEntry"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 OneEntry
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 filler0
		{
			get
			{
				// start: 2  end: 10  Mask: 0000001111111100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1020) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 filler1
		{
			get
			{
				// start: 11  end: 32  Mask: 11111111111111111111100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294965248) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 NextEntry
		{
			get
			{
				// start: 32  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744069414584320) >> 32;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _CMHIVE
 
	public class _CMHIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMHIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1180; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMHIVE"": [ 1180, {
				 ""Hive"": [ 0, [ ""_HHIVE"", ""null"" ]],
				 ""FileHandles"": [ 528, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""NotifyList"": [ 540, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HiveList"": [ 548, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HiveLock"": [ 556, [ ""Pointer"", ""{\""target\"":\""_FAST_MUTEX\""}"" ]],
				 ""ViewLock"": [ 560, [ ""Pointer"", ""{\""target\"":\""_FAST_MUTEX\""}"" ]],
				 ""LRUViewListHead"": [ 564, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PinViewListHead"": [ 572, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FileObject"": [ 580, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""FileFullPath"": [ 584, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""FileUserName"": [ 592, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""MappedViews"": [ 600, [ ""UInt16"", ""null"" ]],
				 ""PinnedViews"": [ 602, [ ""UInt16"", ""null"" ]],
				 ""UseCount"": [ 604, [ ""UInt32"", ""null"" ]],
				 ""SecurityCount"": [ 608, [ ""UInt32"", ""null"" ]],
				 ""SecurityCacheSize"": [ 612, [ ""UInt32"", ""null"" ]],
				 ""SecurityHitHint"": [ 616, [ ""Int32"", ""null"" ]],
				 ""SecurityCache"": [ 620, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE_ENTRY\""}"" ]],
				 ""SecurityHash"": [ 624, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""UnloadEvent"": [ 1136, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""RootKcb"": [ 1140, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""Frozen"": [ 1144, [ ""Byte"", ""null"" ]],
				 ""UnloadWorkItem"": [ 1148, [ ""Pointer"", ""{\""target\"":\""_WORK_QUEUE_ITEM\""}"" ]],
				 ""GrowOnlyMode"": [ 1152, [ ""Byte"", ""null"" ]],
				 ""GrowOffset"": [ 1156, [ ""UInt32"", ""null"" ]],
				 ""KcbConvertListHead"": [ 1160, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KnodeConvertListHead"": [ 1168, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CellRemapArray"": [ 1176, [ ""Pointer"", ""{\""target\"":\""_CM_CELL_REMAP_BLOCK\""}"" ]] }]
				 }
				)";
			}
		}
		public _HHIVE Hive
		{
			get
			{
				_HHIVE returnValue = new _HHIVE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] FileHandles
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				int size = 4;
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 528);
				return returnValue;
			}
		}
		public _LIST_ENTRY NotifyList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 540);
				return returnValue;
			}
		}
		public _LIST_ENTRY HiveList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 548);
				return returnValue;
			}
		}
		public UInt32 HiveLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 556); } }
		public UInt32 ViewLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 560); } }
		public _LIST_ENTRY LRUViewListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 564);
				return returnValue;
			}
		}
		public _LIST_ENTRY PinViewListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 572);
				return returnValue;
			}
		}
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 580); } }
		public _UNICODE_STRING FileFullPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 584);
				return returnValue;
			}
		}
		public _UNICODE_STRING FileUserName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public UInt16 MappedViews { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 600); } }
		public UInt16 PinnedViews { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 602); } }
		public UInt32 UseCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 604); } }
		public UInt32 SecurityCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 608); } }
		public UInt32 SecurityCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 612); } }
		public Int32 SecurityHitHint { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 616); } }
		public UInt32 SecurityCache { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 620); } }
		public _LIST_ENTRY[] SecurityHash
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 624);
				return returnValue;
			}
		}
		public UInt32 UnloadEvent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1136); } }
		public UInt32 RootKcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1140); } }
		public Byte Frozen{ get { return _StructureData[_BufferOffset +1144]; } }
		public UInt32 UnloadWorkItem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1148); } }
		public Byte GrowOnlyMode{ get { return _StructureData[_BufferOffset +1152]; } }
		public UInt32 GrowOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1156); } }
		public _LIST_ENTRY KcbConvertListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1160);
				return returnValue;
			}
		}
		public _LIST_ENTRY KnodeConvertListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1168);
				return returnValue;
			}
		}
		public UInt32 CellRemapArray { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1176); } }
	}
	#endregion
	#region _HANDLE_TRACE_DEBUG_INFO
 
	public class _HANDLE_TRACE_DEBUG_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TRACE_DEBUG_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 327684; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TRACE_DEBUG_INFO"": [ 327684, {
				 ""CurrentStackIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TraceDb"": [ 4, [ ""Array"", ""{\""count\"":4096,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CurrentStackIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _HANDLE_TRACE_DB_ENTRY[] TraceDb
		{
			get
			{
				_HANDLE_TRACE_DB_ENTRY[] returnValue = new _HANDLE_TRACE_DB_ENTRY[4096];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4096; i++ )
					returnValue[i] = new _HANDLE_TRACE_DB_ENTRY(_StructureData, (i * size) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HHIVE
 
	public class _HHIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HHIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 528; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HHIVE"": [ 528, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GetCellRoutine"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseCellRoutine"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Allocate"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Free"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FileSetSize"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FileWrite"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FileRead"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FileFlush"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BaseBlock"": [ 36, [ ""Pointer"", ""{\""target\"":\""_HBASE_BLOCK\""}"" ]],
				 ""DirtyVector"": [ 40, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""DirtyCount"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""DirtyAlloc"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""RealWrites"": [ 56, [ ""Byte"", ""null"" ]],
				 ""Cluster"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Flat"": [ 64, [ ""Byte"", ""null"" ]],
				 ""ReadOnly"": [ 65, [ ""Byte"", ""null"" ]],
				 ""Log"": [ 66, [ ""Byte"", ""null"" ]],
				 ""HiveFlags"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""LogSize"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""RefreshCount"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""StorageTypeCount"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Storage"": [ 88, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GetCellRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ReleaseCellRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Allocate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Free { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 FileSetSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 FileWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FileRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FileFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 BaseBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _RTL_BITMAP DirtyVector
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 DirtyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 DirtyAlloc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public Byte RealWrites{ get { return _StructureData[_BufferOffset +56]; } }
		public UInt32 Cluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public Byte Flat{ get { return _StructureData[_BufferOffset +64]; } }
		public Byte ReadOnly{ get { return _StructureData[_BufferOffset +65]; } }
		public Byte Log{ get { return _StructureData[_BufferOffset +66]; } }
		public UInt32 HiveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 LogSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 RefreshCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 StorageTypeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public _DUAL[] Storage
		{
			get
			{
				_DUAL[] returnValue = new _DUAL[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _DUAL(_StructureData, (i * size) + _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PAGEFAULT_HISTORY
 
	public class _PAGEFAULT_HISTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PAGEFAULT_HISTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PAGEFAULT_HISTORY"": [ 24, {
				 ""CurrentIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaxIndex"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SpinLock"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WatchInfo"": [ 16, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CurrentIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaxIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _PROCESS_WS_WATCH_INFORMATION[] WatchInfo
		{
			get
			{
				_PROCESS_WS_WATCH_INFORMATION[] returnValue = new _PROCESS_WS_WATCH_INFORMATION[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PROCESS_WS_WATCH_INFORMATION(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_ATOM_TABLE_ENTRY
 
	public class _RTL_ATOM_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_ATOM_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_ATOM_TABLE_ENTRY"": [ 16, {
				 ""HashLink"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_ATOM_TABLE_ENTRY\""}"" ]],
				 ""HandleIndex"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Atom"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ReferenceCount"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 10, [ ""Byte"", ""null"" ]],
				 ""NameLength"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Name"": [ 12, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HashLink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 HandleIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Atom { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 ReferenceCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte NameLength{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MM_SESSION_SPACE_FLAGS
 
	public class _MM_SESSION_SPACE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_SESSION_SPACE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_SESSION_SPACE_FLAGS"": [ 4, {
				 ""Initialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Filler0"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""HasWsLock"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""DeletePending"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Filler"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Initialized
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Filler0
		{
			get
			{
				// start: 1  end: 4  Mask: 0000000000001110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 14) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 HasWsLock
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 DeletePending
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Filler
		{
			get
			{
				// start: 6  end: 32  Mask: 11111111111111111111111111000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967232) >> 6;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _CM_PARTIAL_RESOURCE_LIST
 
	public class _CM_PARTIAL_RESOURCE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_PARTIAL_RESOURCE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_PARTIAL_RESOURCE_LIST"": [ 24, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PartialDescriptors"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _CM_PARTIAL_RESOURCE_DESCRIPTOR[] PartialDescriptors
		{
			get
			{
				_CM_PARTIAL_RESOURCE_DESCRIPTOR[] returnValue = new _CM_PARTIAL_RESOURCE_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _CM_PARTIAL_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DRIVER_OBJECT
 
	public class _DRIVER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DRIVER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DRIVER_OBJECT"": [ 168, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""DeviceObject"": [ 4, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DriverStart"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DriverSection"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverExtension"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DRIVER_EXTENSION\""}"" ]],
				 ""DriverName"": [ 28, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""HardwareDatabase"": [ 36, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""FastIoDispatch"": [ 40, [ ""Pointer"", ""{\""target\"":\""_FAST_IO_DISPATCH\""}"" ]],
				 ""DriverInit"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverStartIo"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverUnload"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MajorFunction"": [ 56, [ ""Array"", ""{\""count\"":28,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DriverStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DriverSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DriverSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DriverExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _UNICODE_STRING DriverName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 HardwareDatabase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 FastIoDispatch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 DriverInit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 DriverStartIo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 DriverUnload { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32[] MajorFunction
		{
			get
			{
				UInt32[] returnValue = new UInt32[28];
				int size = 4;
				for(int i=0; i<28; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WMI_BUFFER_STATE
 
	public class _WMI_BUFFER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_BUFFER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_BUFFER_STATE"": [ 4, {
				 ""Free"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""InUse"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Flush"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Free
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 InUse
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Flush
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _MMFREE_POOL_ENTRY
 
	public class _MMFREE_POOL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMFREE_POOL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMFREE_POOL_ENTRY"": [ 20, {
				 ""List"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Signature"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Owner"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMFREE_POOL_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Owner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _DEVICE_OBJECT
 
	public class _DEVICE_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 184; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_OBJECT"": [ 184, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ReferenceCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""DriverObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DRIVER_OBJECT\""}"" ]],
				 ""NextDevice"": [ 12, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""AttachedDevice"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""CurrentIrp"": [ 20, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Timer"": [ 24, [ ""Pointer"", ""{\""target\"":\""_IO_TIMER\""}"" ]],
				 ""Flags"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Characteristics"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Vpb"": [ 36, [ ""Pointer"", ""{\""target\"":\""_VPB\""}"" ]],
				 ""DeviceExtension"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceType"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""StackSize"": [ 48, [ ""Char"", ""null"" ]],
				 ""Queue"": [ 52, [ ""__unnamed"", ""null"" ]],
				 ""AlignmentRequirement"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DeviceQueue"": [ 96, [ ""_KDEVICE_QUEUE"", ""null"" ]],
				 ""Dpc"": [ 116, [ ""_KDPC"", ""null"" ]],
				 ""ActiveThreadCount"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptor"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceLock"": [ 156, [ ""_KEVENT"", ""null"" ]],
				 ""SectorSize"": [ 172, [ ""UInt16"", ""null"" ]],
				 ""Spare1"": [ 174, [ ""UInt16"", ""null"" ]],
				 ""DeviceObjectExtension"": [ 176, [ ""Pointer"", ""{\""target\"":\""_DEVOBJ_EXTENSION\""}"" ]],
				 ""Reserved"": [ 180, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DriverObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NextDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AttachedDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 CurrentIrp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Timer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Characteristics { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Vpb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 DeviceExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 DeviceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Char StackSize { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 48); } }
		public __unnamed Queue
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 52);
				return returnValue;
			}
		}
		public UInt32 AlignmentRequirement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _KDEVICE_QUEUE DeviceQueue
		{
			get
			{
				_KDEVICE_QUEUE returnValue = new _KDEVICE_QUEUE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _KDPC Dpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 116);
				return returnValue;
			}
		}
		public UInt32 ActiveThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 SecurityDescriptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public _KEVENT DeviceLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public UInt16 SectorSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 172); } }
		public UInt16 Spare1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 174); } }
		public UInt32 DeviceObjectExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
	}
	#endregion
	#region _SECTION_OBJECT_POINTERS
 
	public class _SECTION_OBJECT_POINTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECTION_OBJECT_POINTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECTION_OBJECT_POINTERS"": [ 12, {
				 ""DataSectionObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SharedCacheMap"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageSectionObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSectionObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SharedCacheMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ImageSectionObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_BITMAP
 
	public class _RTL_BITMAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_BITMAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_BITMAP"": [ 8, {
				 ""SizeOfBitMap"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Buffer"": [ 4, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfBitMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Buffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MBCB
 
	public class _MBCB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MBCB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MBCB"": [ 128, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeIsInZone"": [ 2, [ ""Int16"", ""null"" ]],
				 ""PagesToWrite"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DirtyPages"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""BitmapRanges"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResumeWritePage"": [ 24, [ ""Int64"", ""null"" ]],
				 ""BitmapRange1"": [ 32, [ ""_BITMAP_RANGE"", ""null"" ]],
				 ""BitmapRange2"": [ 64, [ ""_BITMAP_RANGE"", ""null"" ]],
				 ""BitmapRange3"": [ 96, [ ""_BITMAP_RANGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeIsInZone { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 PagesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DirtyPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LIST_ENTRY BitmapRanges
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Int64 ResumeWritePage { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _BITMAP_RANGE BitmapRange1
		{
			get
			{
				_BITMAP_RANGE returnValue = new _BITMAP_RANGE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _BITMAP_RANGE BitmapRange2
		{
			get
			{
				_BITMAP_RANGE returnValue = new _BITMAP_RANGE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _BITMAP_RANGE BitmapRange3
		{
			get
			{
				_BITMAP_RANGE returnValue = new _BITMAP_RANGE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POWER_CHANNEL_SUMMARY
 
	public class _POWER_CHANNEL_SUMMARY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POWER_CHANNEL_SUMMARY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POWER_CHANNEL_SUMMARY"": [ 20, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TotalCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""D0Count"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NotifyList"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 D0Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY NotifyList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_VIEW_OF_FILE
 
	public class _CM_VIEW_OF_FILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_VIEW_OF_FILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_VIEW_OF_FILE"": [ 36, {
				 ""LRUViewList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PinViewList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FileOffset"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ViewAddress"": [ 24, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""Bcb"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UseCount"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY LRUViewList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY PinViewList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 FileOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ViewAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Bcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 UseCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _KDEVICE_QUEUE
 
	public class _KDEVICE_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDEVICE_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDEVICE_QUEUE"": [ 20, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""DeviceListHead"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Busy"": [ 16, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public _LIST_ENTRY DeviceListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Byte Busy{ get { return _StructureData[_BufferOffset +16]; } }
	}
	#endregion
	#region _KSYSTEM_TIME
 
	public class _KSYSTEM_TIME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSYSTEM_TIME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSYSTEM_TIME"": [ 12, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""High1Time"": [ 4, [ ""Int32"", ""null"" ]],
				 ""High2Time"": [ 8, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 High1Time { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 High2Time { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KUSER_SHARED_DATA
 
	public class _KUSER_SHARED_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KUSER_SHARED_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 824; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KUSER_SHARED_DATA"": [ 824, {
				 ""TickCountLow"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TickCountMultiplier"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""InterruptTime"": [ 8, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""SystemTime"": [ 20, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""TimeZoneBias"": [ 32, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""ImageNumberLow"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""ImageNumberHigh"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""NtSystemRoot"": [ 48, [ ""Array"", ""{\""count\"":260,\""target\"":\""UInt16\""}"" ]],
				 ""MaxStackTraceDepth"": [ 568, [ ""UInt32"", ""null"" ]],
				 ""CryptoExponent"": [ 572, [ ""UInt32"", ""null"" ]],
				 ""TimeZoneId"": [ 576, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 580, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""NtProductType"": [ 612, [ ""Enumeration"", ""{\""enum_name\"":\""_NT_PRODUCT_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ProductTypeIsValid"": [ 616, [ ""Byte"", ""null"" ]],
				 ""NtMajorVersion"": [ 620, [ ""UInt32"", ""null"" ]],
				 ""NtMinorVersion"": [ 624, [ ""UInt32"", ""null"" ]],
				 ""ProcessorFeatures"": [ 628, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]],
				 ""Reserved1"": [ 692, [ ""UInt32"", ""null"" ]],
				 ""Reserved3"": [ 696, [ ""UInt32"", ""null"" ]],
				 ""TimeSlip"": [ 700, [ ""UInt32"", ""null"" ]],
				 ""AlternativeArchitecture"": [ 704, [ ""Enumeration"", ""{\""enum_name\"":\""_ALTERNATIVE_ARCHITECTURE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SystemExpirationDate"": [ 712, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""SuiteMask"": [ 720, [ ""UInt32"", ""null"" ]],
				 ""KdDebuggerEnabled"": [ 724, [ ""Byte"", ""null"" ]],
				 ""NXSupportPolicy"": [ 725, [ ""Byte"", ""null"" ]],
				 ""ActiveConsoleId"": [ 728, [ ""UInt32"", ""null"" ]],
				 ""DismountCount"": [ 732, [ ""UInt32"", ""null"" ]],
				 ""ComPlusPackage"": [ 736, [ ""UInt32"", ""null"" ]],
				 ""LastSystemRITEventTickCount"": [ 740, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPhysicalPages"": [ 744, [ ""UInt32"", ""null"" ]],
				 ""SafeBootMode"": [ 748, [ ""Byte"", ""null"" ]],
				 ""TraceLogging"": [ 752, [ ""UInt32"", ""null"" ]],
				 ""TestRetInstruction"": [ 760, [ ""UInt64"", ""null"" ]],
				 ""SystemCall"": [ 768, [ ""UInt32"", ""null"" ]],
				 ""SystemCallReturn"": [ 772, [ ""UInt32"", ""null"" ]],
				 ""SystemCallPad"": [ 776, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""TickCount"": [ 800, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""TickCountQuad"": [ 800, [ ""UInt64"", ""null"" ]],
				 ""Cookie"": [ 816, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TickCountLow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TickCountMultiplier { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _KSYSTEM_TIME InterruptTime
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME SystemTime
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME TimeZoneBias
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt16 ImageNumberLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 ImageNumberHigh { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt16[] NtSystemRoot
		{
			get
			{
				UInt16[] returnValue = new UInt16[260];
				for(int i=0; i<260; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 MaxStackTraceDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 568); } }
		public UInt32 CryptoExponent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 572); } }
		public UInt32 TimeZoneId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 576); } }
		public UInt32[] Reserved2
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 580);
				return returnValue;
			}
		}
		public _NT_PRODUCT_TYPE NtProductType { get { return (_NT_PRODUCT_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 612); } }
		public Byte ProductTypeIsValid{ get { return _StructureData[_BufferOffset +616]; } }
		public UInt32 NtMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 620); } }
		public UInt32 NtMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 624); } }
		public Byte[] ProcessorFeatures
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 628];
				return returnValue;
			}
		}
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 692); } }
		public UInt32 Reserved3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 696); } }
		public UInt32 TimeSlip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 700); } }
		public _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture { get { return (_ALTERNATIVE_ARCHITECTURE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 704); } }
		public _LARGE_INTEGER SystemExpirationDate
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 712);
				return returnValue;
			}
		}
		public UInt32 SuiteMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 720); } }
		public Byte KdDebuggerEnabled{ get { return _StructureData[_BufferOffset +724]; } }
		public Byte NXSupportPolicy{ get { return _StructureData[_BufferOffset +725]; } }
		public UInt32 ActiveConsoleId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 728); } }
		public UInt32 DismountCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 732); } }
		public UInt32 ComPlusPackage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 736); } }
		public UInt32 LastSystemRITEventTickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 740); } }
		public UInt32 NumberOfPhysicalPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 744); } }
		public Byte SafeBootMode{ get { return _StructureData[_BufferOffset +748]; } }
		public UInt32 TraceLogging { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 752); } }
		public UInt64 TestRetInstruction { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 760); } }
		public UInt32 SystemCall { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 768); } }
		public UInt32 SystemCallReturn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 772); } }
		public UInt64[] SystemCallPad
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 776);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME TickCount
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 800);
				return returnValue;
			}
		}
		public UInt64 TickCountQuad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 800); } }
		public UInt32 Cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 816); } }
	}
	#endregion
	#region _OBJECT_TYPE_INITIALIZER
 
	public class _OBJECT_TYPE_INITIALIZER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_TYPE_INITIALIZER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_TYPE_INITIALIZER"": [ 76, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""UseDefaultObject"": [ 2, [ ""Byte"", ""null"" ]],
				 ""CaseInsensitive"": [ 3, [ ""Byte"", ""null"" ]],
				 ""InvalidAttributes"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""GenericMapping"": [ 8, [ ""_GENERIC_MAPPING"", ""null"" ]],
				 ""ValidAccessMask"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SecurityRequired"": [ 28, [ ""Byte"", ""null"" ]],
				 ""MaintainHandleCount"": [ 29, [ ""Byte"", ""null"" ]],
				 ""MaintainTypeList"": [ 30, [ ""Byte"", ""null"" ]],
				 ""PoolType"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DefaultPagedPoolCharge"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""DefaultNonPagedPoolCharge"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""DumpProcedure"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OpenProcedure"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CloseProcedure"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteProcedure"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ParseProcedure"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityProcedure"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryNameProcedure"": [ 68, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OkayToCloseProcedure"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte UseDefaultObject{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte CaseInsensitive{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 InvalidAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _GENERIC_MAPPING GenericMapping
		{
			get
			{
				_GENERIC_MAPPING returnValue = new _GENERIC_MAPPING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 ValidAccessMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte SecurityRequired{ get { return _StructureData[_BufferOffset +28]; } }
		public Byte MaintainHandleCount{ get { return _StructureData[_BufferOffset +29]; } }
		public Byte MaintainTypeList{ get { return _StructureData[_BufferOffset +30]; } }
		public _POOL_TYPE PoolType { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DefaultPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 DefaultNonPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 DumpProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 OpenProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 CloseProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 DeleteProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 ParseProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 SecurityProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 QueryNameProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 OkayToCloseProcedure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _SUBSECTION
 
	public class _SUBSECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SUBSECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SUBSECTION"": [ 32, {
				 ""ControlArea"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""u"": [ 4, [ ""__unnamed"", ""null"" ]],
				 ""StartingSector"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NumberOfFullSectors"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SubsectionBase"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""UnusedPtes"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PtesInSubsection"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""NextSubsection"": [ 28, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 StartingSector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NumberOfFullSectors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SubsectionBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 UnusedPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PtesInSubsection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NextSubsection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _WMI_LOGGER_MODE
 
	public class _WMI_LOGGER_MODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_LOGGER_MODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_LOGGER_MODE"": [ 4, {
				 ""SequentialFile"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""CircularFile"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""AppendFile"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Unused1"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""RealTime"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""DelayOpenFile"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""BufferOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateLogger"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""AddHeader"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""UseExisting"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""UseGlobalSequence"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""UseLocalSequence"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""Unused2"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SequentialFile
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 CircularFile
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 AppendFile
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused1
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 248) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 RealTime
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 DelayOpenFile
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 BufferOnly
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateLogger
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 AddHeader
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 UseExisting
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 UseGlobalSequence
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 UseLocalSequence
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused2
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _NT_TIB
 
	public class _NT_TIB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NT_TIB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NT_TIB"": [ 28, {
				 ""ExceptionList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_REGISTRATION_RECORD\""}"" ]],
				 ""StackBase"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackLimit"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SubSystemTib"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FiberData"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Version"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ArbitraryUserPointer"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Self"": [ 24, [ ""Pointer"", ""{\""target\"":\""_NT_TIB\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ExceptionList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StackBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 StackLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SubSystemTib { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 FiberData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ArbitraryUserPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Self { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MMVAD_LONG
 
	public class _MMVAD_LONG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_LONG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 52; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_LONG"": [ 52, {
				 ""StartingVpn"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EndingVpn"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Parent"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""LeftChild"": [ 12, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""RightChild"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""u"": [ 20, [ ""__unnamed"", ""null"" ]],
				 ""ControlArea"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""FirstPrototypePte"": [ 28, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""LastContiguousPte"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""u2"": [ 36, [ ""__unnamed"", ""null"" ]],
				 ""u3"": [ 40, [ ""__unnamed"", ""null"" ]],
				 ""u4"": [ 48, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StartingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LeftChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 RightChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FirstPrototypePte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LastContiguousPte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public __unnamed u2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public __unnamed u3
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public __unnamed u4
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMVAD_FLAGS
 
	public class _MMVAD_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_FLAGS"": [ 4, {
				 ""CommitCharge"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PhysicalMapping"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""ImageMap"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""UserPhysicalPages"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""WriteWatch"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""LargePages"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""MemCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CommitCharge
		{
			get
			{
				// start: 0  end: 19  Mask: 1111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524287) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PhysicalMapping
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageMap
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 UserPhysicalPages
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 WriteWatch
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 24  end: 29  Mask: 11111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 520093696) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 LargePages
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 MemCommit
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateMemory
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _POOL_DESCRIPTOR
 
	public class _POOL_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_DESCRIPTOR"": [ 4136, {
				 ""PoolType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PoolIndex"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""RunningAllocs"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""RunningDeAllocs"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""TotalPages"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TotalBigPages"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Threshold"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""LockAddress"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PendingFrees"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PendingFreeDepth"": [ 36, [ ""Int32"", ""null"" ]],
				 ""ListHeads"": [ 40, [ ""Array"", ""{\""count\"":512,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _POOL_TYPE PoolType { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PoolIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 RunningAllocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 RunningDeAllocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 TotalPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 TotalBigPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Threshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LockAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PendingFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Int32 PendingFreeDepth { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
		public _LIST_ENTRY[] ListHeads
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[512];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<512; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEB_LDR_DATA
 
	public class _PEB_LDR_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB_LDR_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB_LDR_DATA"": [ 40, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Initialized"": [ 4, [ ""Byte"", ""null"" ]],
				 ""SsHandle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InLoadOrderModuleList"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InMemoryOrderModuleList"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InInitializationOrderModuleList"": [ 28, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EntryInProgress"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Initialized{ get { return _StructureData[_BufferOffset +4]; } }
		public UInt32 SsHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY InLoadOrderModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LIST_ENTRY InMemoryOrderModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _LIST_ENTRY InInitializationOrderModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 EntryInProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _DBGKD_GET_VERSION32
 
	public class _DBGKD_GET_VERSION32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_VERSION32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_VERSION32"": [ 40, {
				 ""MajorVersion"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ProtocolVersion"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""KernBase"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PsLoadedModuleList"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MachineType"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""ThCallbackStack"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""NextCallback"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""FramePointer"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""KiCallUserMode"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""KeUserCallbackDispatcher"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""BreakpointWithStatus"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DebuggerDataList"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 ProtocolVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 KernBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 PsLoadedModuleList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt16 MachineType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 ThCallbackStack { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16 NextCallback { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 FramePointer { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 KiCallUserMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 KeUserCallbackDispatcher { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 BreakpointWithStatus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DebuggerDataList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _MM_PAGED_POOL_INFO
 
	public class _MM_PAGED_POOL_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_PAGED_POOL_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_PAGED_POOL_INFO"": [ 36, {
				 ""PagedPoolAllocationMap"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""EndOfPagedPoolBitmap"": [ 4, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""PagedPoolLargeSessionAllocationMap"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""FirstPteForPagedPool"": [ 12, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""LastPteForPagedPool"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""NextPdeForPagedPoolExpansion"": [ 20, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""PagedPoolHint"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PagedPoolCommit"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""AllocatedPagedPool"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PagedPoolAllocationMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndOfPagedPoolBitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PagedPoolLargeSessionAllocationMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FirstPteForPagedPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 LastPteForPagedPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NextPdeForPagedPoolExpansion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PagedPoolHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PagedPoolCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 AllocatedPagedPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _INTERLOCK_SEQ
 
	public class _INTERLOCK_SEQ
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERLOCK_SEQ(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERLOCK_SEQ"": [ 8, {
				 ""Depth"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""FreeEntryOffset"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""OffsetAndDepth"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Sequence"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Exchg"": [ 0, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 FreeEntryOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 OffsetAndDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Sequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int64 Exchg { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _VPB
 
	public class _VPB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VPB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VPB"": [ 88, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""VolumeLabelLength"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RealDevice"": [ 12, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""SerialNumber"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""VolumeLabel"": [ 24, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 VolumeLabelLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 RealDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SerialNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt16[] VolumeLabel
		{
			get
			{
				UInt16[] returnValue = new UInt16[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMSESSION
 
	public class _MMSESSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSESSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 60; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSESSION"": [ 60, {
				 ""SystemSpaceViewLock"": [ 0, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""SystemSpaceViewLockPointer"": [ 32, [ ""Pointer"", ""{\""target\"":\""_FAST_MUTEX\""}"" ]],
				 ""SystemSpaceViewStart"": [ 36, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""SystemSpaceViewTable"": [ 40, [ ""Pointer"", ""{\""target\"":\""_MMVIEW\""}"" ]],
				 ""SystemSpaceHashSize"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SystemSpaceHashEntries"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""SystemSpaceHashKey"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""SystemSpaceBitMap"": [ 56, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]] }]
				 }
				)";
			}
		}
		public _FAST_MUTEX SystemSpaceViewLock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SystemSpaceViewLockPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 SystemSpaceViewStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 SystemSpaceViewTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 SystemSpaceHashSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SystemSpaceHashEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 SystemSpaceHashKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 SystemSpaceBitMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _GENERIC_MAPPING
 
	public class _GENERIC_MAPPING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GENERIC_MAPPING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GENERIC_MAPPING"": [ 16, {
				 ""GenericRead"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GenericWrite"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""GenericExecute"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""GenericAll"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 GenericRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GenericWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 GenericExecute { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 GenericAll { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _KiIoAccessMap
 
	public class _KiIoAccessMap
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KiIoAccessMap(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8228; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KiIoAccessMap"": [ 8228, {
				 ""DirectionMap"": [ 0, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]],
				 ""IoMap"": [ 32, [ ""Array"", ""{\""count\"":8196,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte[] DirectionMap
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public Byte[] IoMap
		{
			get
			{
				Byte[] returnValue = new Byte[8196];
				for(int i=0; i<8196; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 32];
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_RESTORE_BREAKPOINT
 
	public class _DBGKD_RESTORE_BREAKPOINT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_RESTORE_BREAKPOINT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_RESTORE_BREAKPOINT"": [ 4, {
				 ""BreakPointHandle"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EXCEPTION_REGISTRATION_RECORD
 
	public class _EXCEPTION_REGISTRATION_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_REGISTRATION_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_REGISTRATION_RECORD"": [ 8, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_REGISTRATION_RECORD\""}"" ]],
				 ""Handler"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Handler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _POOL_TRACKER_BIG_PAGES
 
	public class _POOL_TRACKER_BIG_PAGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_TRACKER_BIG_PAGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_TRACKER_BIG_PAGES"": [ 12, {
				 ""Va"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Key"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPages"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Va { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NumberOfPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PROCESS_WS_WATCH_INFORMATION
 
	public class _PROCESS_WS_WATCH_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESS_WS_WATCH_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESS_WS_WATCH_INFORMATION"": [ 8, {
				 ""FaultingPc"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FaultingVa"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FaultingPc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FaultingVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MMPTE_SUBSECTION
 
	public class _MMPTE_SUBSECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_SUBSECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_SUBSECTION"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Unused0"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Unused1"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""SubsectionAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused0
		{
			get
			{
				// start: 1  end: 5  Mask: 0000000000011110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 30) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused1
		{
			get
			{
				// start: 11  end: 32  Mask: 11111111111111111111100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294965248) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 SubsectionAddress
		{
			get
			{
				// start: 32  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744069414584320) >> 32;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _VI_DEADLOCK_NODE
 
	public class _VI_DEADLOCK_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_NODE"": [ 104, {
				 ""Parent"": [ 0, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_NODE\""}"" ]],
				 ""ChildrenList"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SiblingsList"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResourceList"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Root"": [ 28, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_RESOURCE\""}"" ]],
				 ""ThreadEntry"": [ 32, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_THREAD\""}"" ]],
				 ""Active"": [ 36, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""OnlyTryAcquireUsed"": [ 36, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""SequenceNumber"": [ 36, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""StackTrace"": [ 40, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""ParentStackTrace"": [ 72, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY ChildrenList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _LIST_ENTRY SiblingsList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 Root { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 ThreadEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Active
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 36);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 OnlyTryAcquireUsed
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 36);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 SequenceNumber
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 36);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32[] StackTrace
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				int size = 4;
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32[] ParentStackTrace
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				int size = 4;
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 72);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CONTEXT
 
	public class _CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 716; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONTEXT"": [ 716, {
				 ""ContextFlags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Dr0"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Dr1"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Dr2"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Dr3"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Dr6"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FloatSave"": [ 28, [ ""_FLOATING_SAVE_AREA"", ""null"" ]],
				 ""SegGs"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""SegFs"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""SegEs"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""SegDs"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""Edi"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""Esi"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""Ebx"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""Edx"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""Ecx"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""Eax"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""Ebp"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""Eip"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""SegCs"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""EFlags"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""Esp"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""SegSs"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""ExtendedRegisters"": [ 204, [ ""Array"", ""{\""count\"":512,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ContextFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Dr0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Dr1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Dr2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Dr3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Dr6 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Dr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _FLOATING_SAVE_AREA FloatSave
		{
			get
			{
				_FLOATING_SAVE_AREA returnValue = new _FLOATING_SAVE_AREA(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 SegGs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 SegFs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 SegEs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 SegDs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 Edi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 Esi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 Ebx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 Edx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 Ecx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 Eax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 Ebp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 Eip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 SegCs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 Esp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 SegSs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public Byte[] ExtendedRegisters
		{
			get
			{
				Byte[] returnValue = new Byte[512];
				for(int i=0; i<512; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 204];
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_OPTIONAL_HEADER
 
	public class _IMAGE_OPTIONAL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_OPTIONAL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_OPTIONAL_HEADER"": [ 224, {
				 ""Magic"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MajorLinkerVersion"": [ 2, [ ""Byte"", ""null"" ]],
				 ""MinorLinkerVersion"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SizeOfCode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SizeOfInitializedData"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SizeOfUninitializedData"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AddressOfEntryPoint"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BaseOfCode"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BaseOfData"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ImageBase"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""SectionAlignment"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""FileAlignment"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""MajorOperatingSystemVersion"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""MinorOperatingSystemVersion"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""MajorImageVersion"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""MinorImageVersion"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""MajorSubsystemVersion"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""MinorSubsystemVersion"": [ 50, [ ""UInt16"", ""null"" ]],
				 ""Win32VersionValue"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""SizeOfHeaders"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Subsystem"": [ 68, [ ""UInt16"", ""null"" ]],
				 ""DllCharacteristics"": [ 70, [ ""UInt16"", ""null"" ]],
				 ""SizeOfStackReserve"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""SizeOfStackCommit"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""SizeOfHeapReserve"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""SizeOfHeapCommit"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""LoaderFlags"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""NumberOfRvaAndSizes"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DataDirectory"": [ 96, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Magic { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte MajorLinkerVersion{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte MinorLinkerVersion{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 SizeOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SizeOfInitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SizeOfUninitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AddressOfEntryPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 BaseOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BaseOfData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ImageBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 SectionAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FileAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt16 MajorOperatingSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public UInt16 MinorOperatingSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public UInt16 MajorImageVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 MinorImageVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt16 MajorSubsystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public UInt16 MinorSubsystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 50); } }
		public UInt32 Win32VersionValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 SizeOfHeaders { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt16 Subsystem { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 68); } }
		public UInt16 DllCharacteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 70); } }
		public UInt32 SizeOfStackReserve { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 SizeOfStackCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 SizeOfHeapReserve { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 SizeOfHeapCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 LoaderFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 NumberOfRvaAndSizes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _IMAGE_DATA_DIRECTORY[] DataDirectory
		{
			get
			{
				_IMAGE_DATA_DIRECTORY[] returnValue = new _IMAGE_DATA_DIRECTORY[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _IMAGE_DATA_DIRECTORY(_StructureData, (i * size) + _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_QUERY_SPECIAL_CALLS
 
	public class _DBGKD_QUERY_SPECIAL_CALLS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_QUERY_SPECIAL_CALLS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_QUERY_SPECIAL_CALLS"": [ 4, {
				 ""NumberOfSpecialCalls"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NumberOfSpecialCalls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region CMP_OFFSET_ARRAY
 
	public class CMP_OFFSET_ARRAY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public CMP_OFFSET_ARRAY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""CMP_OFFSET_ARRAY"": [ 12, {
				 ""FileOffset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DataBuffer"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DataLength"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FileOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DataBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PCI_PDO_EXTENSION
 
	public class _PCI_PDO_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_PDO_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_PDO_EXTENSION"": [ 200, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PCI_PDO_EXTENSION\""}"" ]],
				 ""ExtensionType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""PCI_SIGNATURE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IrpDispatchTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PCI_MJ_DISPATCH_TABLE\""}"" ]],
				 ""DeviceState"": [ 12, [ ""Byte"", ""null"" ]],
				 ""TentativeNextState"": [ 13, [ ""Byte"", ""null"" ]],
				 ""SecondaryExtLock"": [ 16, [ ""_KEVENT"", ""null"" ]],
				 ""Slot"": [ 32, [ ""_PCI_SLOT_NUMBER"", ""null"" ]],
				 ""PhysicalDeviceObject"": [ 36, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ParentFdoExtension"": [ 40, [ ""Pointer"", ""{\""target\"":\""_PCI_FDO_EXTENSION\""}"" ]],
				 ""SecondaryExtension"": [ 44, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""BusInterfaceReferenceCount"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""AgpInterfaceReferenceCount"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""VendorId"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""DeviceId"": [ 58, [ ""UInt16"", ""null"" ]],
				 ""SubsystemVendorId"": [ 60, [ ""UInt16"", ""null"" ]],
				 ""SubsystemId"": [ 62, [ ""UInt16"", ""null"" ]],
				 ""RevisionId"": [ 64, [ ""Byte"", ""null"" ]],
				 ""ProgIf"": [ 65, [ ""Byte"", ""null"" ]],
				 ""SubClass"": [ 66, [ ""Byte"", ""null"" ]],
				 ""BaseClass"": [ 67, [ ""Byte"", ""null"" ]],
				 ""AdditionalResourceCount"": [ 68, [ ""Byte"", ""null"" ]],
				 ""AdjustedInterruptLine"": [ 69, [ ""Byte"", ""null"" ]],
				 ""InterruptPin"": [ 70, [ ""Byte"", ""null"" ]],
				 ""RawInterruptLine"": [ 71, [ ""Byte"", ""null"" ]],
				 ""CapabilitiesPtr"": [ 72, [ ""Byte"", ""null"" ]],
				 ""SavedLatencyTimer"": [ 73, [ ""Byte"", ""null"" ]],
				 ""SavedCacheLineSize"": [ 74, [ ""Byte"", ""null"" ]],
				 ""HeaderType"": [ 75, [ ""Byte"", ""null"" ]],
				 ""NotPresent"": [ 76, [ ""Byte"", ""null"" ]],
				 ""ReportedMissing"": [ 77, [ ""Byte"", ""null"" ]],
				 ""ExpectedWritebackFailure"": [ 78, [ ""Byte"", ""null"" ]],
				 ""NoTouchPmeEnable"": [ 79, [ ""Byte"", ""null"" ]],
				 ""LegacyDriver"": [ 80, [ ""Byte"", ""null"" ]],
				 ""UpdateHardware"": [ 81, [ ""Byte"", ""null"" ]],
				 ""MovedDevice"": [ 82, [ ""Byte"", ""null"" ]],
				 ""DisablePowerDown"": [ 83, [ ""Byte"", ""null"" ]],
				 ""NeedsHotPlugConfiguration"": [ 84, [ ""Byte"", ""null"" ]],
				 ""SwitchedIDEToNativeMode"": [ 85, [ ""Byte"", ""null"" ]],
				 ""BIOSAllowsIDESwitchToNativeMode"": [ 86, [ ""Byte"", ""null"" ]],
				 ""IoSpaceUnderNativeIdeControl"": [ 87, [ ""Byte"", ""null"" ]],
				 ""OnDebugPath"": [ 88, [ ""Byte"", ""null"" ]],
				 ""PowerState"": [ 92, [ ""PCI_POWER_STATE"", ""null"" ]],
				 ""Dependent"": [ 156, [ ""PCI_HEADER_TYPE_DEPENDENT"", ""null"" ]],
				 ""HackFlags"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""Resources"": [ 168, [ ""Pointer"", ""{\""target\"":\""PCI_FUNCTION_RESOURCES\""}"" ]],
				 ""BridgeFdoExtension"": [ 172, [ ""Pointer"", ""{\""target\"":\""_PCI_FDO_EXTENSION\""}"" ]],
				 ""NextBridge"": [ 176, [ ""Pointer"", ""{\""target\"":\""_PCI_PDO_EXTENSION\""}"" ]],
				 ""NextHashEntry"": [ 180, [ ""Pointer"", ""{\""target\"":\""_PCI_PDO_EXTENSION\""}"" ]],
				 ""Lock"": [ 184, [ ""_PCI_LOCK"", ""null"" ]],
				 ""PowerCapabilities"": [ 192, [ ""_PCI_PMC"", ""null"" ]],
				 ""TargetAgpCapabilityId"": [ 194, [ ""Byte"", ""null"" ]],
				 ""CommandEnables"": [ 196, [ ""UInt16"", ""null"" ]],
				 ""InitialCommand"": [ 198, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public PCI_SIGNATURE ExtensionType { get { return (PCI_SIGNATURE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 IrpDispatchTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte DeviceState{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte TentativeNextState{ get { return _StructureData[_BufferOffset +13]; } }
		public _KEVENT SecondaryExtLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _PCI_SLOT_NUMBER Slot
		{
			get
			{
				_PCI_SLOT_NUMBER returnValue = new _PCI_SLOT_NUMBER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 PhysicalDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 ParentFdoExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _SINGLE_LIST_ENTRY SecondaryExtension
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public UInt32 BusInterfaceReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 AgpInterfaceReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt16 VendorId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt16 DeviceId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 58); } }
		public UInt16 SubsystemVendorId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 60); } }
		public UInt16 SubsystemId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 62); } }
		public Byte RevisionId{ get { return _StructureData[_BufferOffset +64]; } }
		public Byte ProgIf{ get { return _StructureData[_BufferOffset +65]; } }
		public Byte SubClass{ get { return _StructureData[_BufferOffset +66]; } }
		public Byte BaseClass{ get { return _StructureData[_BufferOffset +67]; } }
		public Byte AdditionalResourceCount{ get { return _StructureData[_BufferOffset +68]; } }
		public Byte AdjustedInterruptLine{ get { return _StructureData[_BufferOffset +69]; } }
		public Byte InterruptPin{ get { return _StructureData[_BufferOffset +70]; } }
		public Byte RawInterruptLine{ get { return _StructureData[_BufferOffset +71]; } }
		public Byte CapabilitiesPtr{ get { return _StructureData[_BufferOffset +72]; } }
		public Byte SavedLatencyTimer{ get { return _StructureData[_BufferOffset +73]; } }
		public Byte SavedCacheLineSize{ get { return _StructureData[_BufferOffset +74]; } }
		public Byte HeaderType{ get { return _StructureData[_BufferOffset +75]; } }
		public Byte NotPresent{ get { return _StructureData[_BufferOffset +76]; } }
		public Byte ReportedMissing{ get { return _StructureData[_BufferOffset +77]; } }
		public Byte ExpectedWritebackFailure{ get { return _StructureData[_BufferOffset +78]; } }
		public Byte NoTouchPmeEnable{ get { return _StructureData[_BufferOffset +79]; } }
		public Byte LegacyDriver{ get { return _StructureData[_BufferOffset +80]; } }
		public Byte UpdateHardware{ get { return _StructureData[_BufferOffset +81]; } }
		public Byte MovedDevice{ get { return _StructureData[_BufferOffset +82]; } }
		public Byte DisablePowerDown{ get { return _StructureData[_BufferOffset +83]; } }
		public Byte NeedsHotPlugConfiguration{ get { return _StructureData[_BufferOffset +84]; } }
		public Byte SwitchedIDEToNativeMode{ get { return _StructureData[_BufferOffset +85]; } }
		public Byte BIOSAllowsIDESwitchToNativeMode{ get { return _StructureData[_BufferOffset +86]; } }
		public Byte IoSpaceUnderNativeIdeControl{ get { return _StructureData[_BufferOffset +87]; } }
		public Byte OnDebugPath{ get { return _StructureData[_BufferOffset +88]; } }
		public PCI_POWER_STATE PowerState
		{
			get
			{
				PCI_POWER_STATE returnValue = new PCI_POWER_STATE(_StructureData, _BufferOffset + 92);
				return returnValue;
			}
		}
		public PCI_HEADER_TYPE_DEPENDENT Dependent
		{
			get
			{
				PCI_HEADER_TYPE_DEPENDENT returnValue = new PCI_HEADER_TYPE_DEPENDENT(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public UInt64 HackFlags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt32 Resources { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 BridgeFdoExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 NextBridge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 NextHashEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public _PCI_LOCK Lock
		{
			get
			{
				_PCI_LOCK returnValue = new _PCI_LOCK(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _PCI_PMC PowerCapabilities
		{
			get
			{
				_PCI_PMC returnValue = new _PCI_PMC(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public Byte TargetAgpCapabilityId{ get { return _StructureData[_BufferOffset +194]; } }
		public UInt16 CommandEnables { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 196); } }
		public UInt16 InitialCommand { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 198); } }
	}
	#endregion
	#region _HMAP_DIRECTORY
 
	public class _HMAP_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HMAP_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4096; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HMAP_DIRECTORY"": [ 4096, {
				 ""Directory"": [ 0, [ ""Array"", ""{\""count\"":1024,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_HMAP_TABLE\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Directory
		{
			get
			{
				UInt32[] returnValue = new UInt32[1024];
				int size = 4;
				for(int i=0; i<1024; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HEADER
 
	public class _OBJECT_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER"": [ 32, {
				 ""PointerCount"": [ 0, [ ""Int32"", ""null"" ]],
				 ""HandleCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""NextToFree"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Type"": [ 8, [ ""Pointer"", ""{\""target\"":\""_OBJECT_TYPE\""}"" ]],
				 ""NameInfoOffset"": [ 12, [ ""Byte"", ""null"" ]],
				 ""HandleInfoOffset"": [ 13, [ ""Byte"", ""null"" ]],
				 ""QuotaInfoOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ObjectCreateInfo"": [ 16, [ ""Pointer"", ""{\""target\"":\""_OBJECT_CREATE_INFORMATION\""}"" ]],
				 ""QuotaBlockCharged"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityDescriptor"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Body"": [ 24, [ ""_QUAD"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 PointerCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HandleCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NextToFree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte NameInfoOffset{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte HandleInfoOffset{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte QuotaInfoOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt32 ObjectCreateInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 QuotaBlockCharged { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SecurityDescriptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _QUAD Body
		{
			get
			{
				_QUAD returnValue = new _QUAD(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _QUAD
 
	public class _QUAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _QUAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_QUAD"": [ 8, {
				 ""DoNotUseThisField"": [ 0, [ ""Double"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Double DoNotUseThisField { get { return BitConverter.ToDouble(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _SECURITY_DESCRIPTOR
 
	public class _SECURITY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_DESCRIPTOR"": [ 20, {
				 ""Revision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Sbz1"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Control"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Owner"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Group"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Sacl"": [ 12, [ ""Pointer"", ""{\""target\"":\""_ACL\""}"" ]],
				 ""Dacl"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ACL\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Sbz1{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Control { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Owner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Group { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Sacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Dacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTLP_RANGE_LIST_ENTRY
 
	public class _RTLP_RANGE_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_RANGE_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_RANGE_LIST_ENTRY"": [ 40, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Allocated"": [ 16, [ ""__unnamed"", ""null"" ]],
				 ""Merged"": [ 16, [ ""__unnamed"", ""null"" ]],
				 ""Attributes"": [ 24, [ ""Byte"", ""null"" ]],
				 ""PublicFlags"": [ 25, [ ""Byte"", ""null"" ]],
				 ""PrivateFlags"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""ListEntry"": [ 28, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public __unnamed Allocated
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public __unnamed Merged
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte Attributes{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte PublicFlags{ get { return _StructureData[_BufferOffset +25]; } }
		public UInt16 PrivateFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KAPC_STATE
 
	public class _KAPC_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KAPC_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KAPC_STATE"": [ 24, {
				 ""ApcListHead"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Process"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KPROCESS\""}"" ]],
				 ""KernelApcInProgress"": [ 20, [ ""Byte"", ""null"" ]],
				 ""KernelApcPending"": [ 21, [ ""Byte"", ""null"" ]],
				 ""UserApcPending"": [ 22, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY[] ApcListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Process { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte KernelApcInProgress{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte KernelApcPending{ get { return _StructureData[_BufferOffset +21]; } }
		public Byte UserApcPending{ get { return _StructureData[_BufferOffset +22]; } }
	}
	#endregion
	#region _OBJECT_HEADER_CREATOR_INFO
 
	public class _OBJECT_HEADER_CREATOR_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_CREATOR_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_CREATOR_INFO"": [ 16, {
				 ""TypeList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CreatorUniqueProcess"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreatorBackTraceIndex"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 14, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY TypeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 CreatorUniqueProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
	}
	#endregion
	#region _HEAP_STOP_ON_VALUES
 
	public class _HEAP_STOP_ON_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_STOP_ON_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_STOP_ON_VALUES"": [ 24, {
				 ""AllocAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""AllocTag"": [ 4, [ ""_HEAP_STOP_ON_TAG"", ""null"" ]],
				 ""ReAllocAddress"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ReAllocTag"": [ 12, [ ""_HEAP_STOP_ON_TAG"", ""null"" ]],
				 ""FreeAddress"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""FreeTag"": [ 20, [ ""_HEAP_STOP_ON_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AllocAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _HEAP_STOP_ON_TAG AllocTag
		{
			get
			{
				_HEAP_STOP_ON_TAG returnValue = new _HEAP_STOP_ON_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 ReAllocAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _HEAP_STOP_ON_TAG ReAllocTag
		{
			get
			{
				_HEAP_STOP_ON_TAG returnValue = new _HEAP_STOP_ON_TAG(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 FreeAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _HEAP_STOP_ON_TAG FreeTag
		{
			get
			{
				_HEAP_STOP_ON_TAG returnValue = new _HEAP_STOP_ON_TAG(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEVICE_RELATIONS
 
	public class _DEVICE_RELATIONS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_RELATIONS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_RELATIONS"": [ 8, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Objects"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_DEVICE_OBJECT\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] Objects
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				int size = 4;
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KPROCESS
 
	public class _KPROCESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPROCESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 108; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPROCESS"": [ 108, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""ProfileListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DirectoryTableBase"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""LdtDescriptor"": [ 32, [ ""_KGDTENTRY"", ""null"" ]],
				 ""Int21Descriptor"": [ 40, [ ""_KIDTENTRY"", ""null"" ]],
				 ""IopmOffset"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""Iopl"": [ 50, [ ""Byte"", ""null"" ]],
				 ""Unused"": [ 51, [ ""Byte"", ""null"" ]],
				 ""ActiveProcessors"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""KernelTime"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""UserTime"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""ReadyListHead"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SwapListEntry"": [ 72, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""VdmTrapcHandler"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadListHead"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ProcessLock"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""Affinity"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""StackCount"": [ 96, [ ""UInt16"", ""null"" ]],
				 ""BasePriority"": [ 98, [ ""Char"", ""null"" ]],
				 ""ThreadQuantum"": [ 99, [ ""Char"", ""null"" ]],
				 ""AutoAlignment"": [ 100, [ ""Byte"", ""null"" ]],
				 ""State"": [ 101, [ ""Byte"", ""null"" ]],
				 ""ThreadSeed"": [ 102, [ ""Byte"", ""null"" ]],
				 ""DisableBoost"": [ 103, [ ""Byte"", ""null"" ]],
				 ""PowerState"": [ 104, [ ""Byte"", ""null"" ]],
				 ""DisableQuantum"": [ 105, [ ""Byte"", ""null"" ]],
				 ""IdealNode"": [ 106, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 107, [ ""_KEXECUTE_OPTIONS"", ""null"" ]],
				 ""ExecuteOptions"": [ 107, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProfileListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32[] DirectoryTableBase
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public _KGDTENTRY LdtDescriptor
		{
			get
			{
				_KGDTENTRY returnValue = new _KGDTENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _KIDTENTRY Int21Descriptor
		{
			get
			{
				_KIDTENTRY returnValue = new _KIDTENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt16 IopmOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public Byte Iopl{ get { return _StructureData[_BufferOffset +50]; } }
		public Byte Unused{ get { return _StructureData[_BufferOffset +51]; } }
		public UInt32 ActiveProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 KernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 UserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _LIST_ENTRY ReadyListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SwapListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt32 VdmTrapcHandler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt32 ProcessLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 Affinity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt16 StackCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 96); } }
		public Char BasePriority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 98); } }
		public Char ThreadQuantum { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 99); } }
		public Byte AutoAlignment{ get { return _StructureData[_BufferOffset +100]; } }
		public Byte State{ get { return _StructureData[_BufferOffset +101]; } }
		public Byte ThreadSeed{ get { return _StructureData[_BufferOffset +102]; } }
		public Byte DisableBoost{ get { return _StructureData[_BufferOffset +103]; } }
		public Byte PowerState{ get { return _StructureData[_BufferOffset +104]; } }
		public Byte DisableQuantum{ get { return _StructureData[_BufferOffset +105]; } }
		public Byte IdealNode{ get { return _StructureData[_BufferOffset +106]; } }
		public _KEXECUTE_OPTIONS Flags
		{
			get
			{
				_KEXECUTE_OPTIONS returnValue = new _KEXECUTE_OPTIONS(_StructureData, _BufferOffset + 107);
				return returnValue;
			}
		}
		public Byte ExecuteOptions{ get { return _StructureData[_BufferOffset +107]; } }
	}
	#endregion
	#region _HEAP_PSEUDO_TAG_ENTRY
 
	public class _HEAP_PSEUDO_TAG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_PSEUDO_TAG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_PSEUDO_TAG_ENTRY"": [ 12, {
				 ""Allocs"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Frees"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Allocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Frees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _IO_RESOURCE_LIST
 
	public class _IO_RESOURCE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_RESOURCE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_RESOURCE_LIST"": [ 40, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Descriptors"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _IO_RESOURCE_DESCRIPTOR[] Descriptors
		{
			get
			{
				_IO_RESOURCE_DESCRIPTOR[] returnValue = new _IO_RESOURCE_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _IO_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMBANKED_SECTION
 
	public class _MMBANKED_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMBANKED_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMBANKED_SECTION"": [ 40, {
				 ""BasePhysicalPage"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BasedPte"": [ 4, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""BankSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""BankShift"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""BankedRoutine"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentMappedPte"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""BankTemplate"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BasePhysicalPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BasedPte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BankSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 BankShift { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 BankedRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CurrentMappedPte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _MMPTE[] BankTemplate
		{
			get
			{
				_MMPTE[] returnValue = new _MMPTE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MMPTE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_CRITICAL_SECTION
 
	public class _RTL_CRITICAL_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CRITICAL_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CRITICAL_SECTION"": [ 24, {
				 ""DebugInfo"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION_DEBUG\""}"" ]],
				 ""LockCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""RecursionCount"": [ 8, [ ""Int32"", ""null"" ]],
				 ""OwningThread"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LockSemaphore"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SpinCount"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DebugInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 LockCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 RecursionCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 OwningThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 LockSemaphore { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SpinCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _KTRAP_FRAME
 
	public class _KTRAP_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTRAP_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 140; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTRAP_FRAME"": [ 140, {
				 ""DbgEbp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DbgEip"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DbgArgMark"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DbgArgPointer"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""TempSegCs"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TempEsp"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Dr0"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Dr1"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Dr2"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Dr3"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Dr6"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SegGs"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""SegEs"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""SegDs"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Edx"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Ecx"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Eax"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PreviousPreviousMode"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""ExceptionList"": [ 76, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_REGISTRATION_RECORD\""}"" ]],
				 ""SegFs"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Edi"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Esi"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""Ebx"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""Ebp"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""ErrCode"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""Eip"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""SegCs"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""EFlags"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""HardwareEsp"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""HardwareSegSs"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""V86Es"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""V86Ds"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""V86Fs"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""V86Gs"": [ 136, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DbgEbp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DbgEip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DbgArgMark { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DbgArgPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 TempSegCs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 TempEsp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Dr0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Dr1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Dr2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Dr3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Dr6 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Dr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SegGs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 SegEs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 SegDs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 Edx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Ecx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Eax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PreviousPreviousMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 ExceptionList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 SegFs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Edi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 Esi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 Ebx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 Ebp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 ErrCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 Eip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 SegCs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 HardwareEsp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 HardwareSegSs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 V86Es { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 V86Ds { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 V86Fs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 V86Gs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
	}
	#endregion
	#region _KGDTENTRY
 
	public class _KGDTENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KGDTENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KGDTENTRY"": [ 8, {
				 ""LimitLow"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""BaseLow"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""HighWord"": [ 4, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 LimitLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 BaseLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public __unnamed HighWord
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCI_FDO_EXTENSION
 
	public class _PCI_FDO_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_FDO_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_FDO_EXTENSION"": [ 192, {
				 ""List"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""ExtensionType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""PCI_SIGNATURE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IrpDispatchTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PCI_MJ_DISPATCH_TABLE\""}"" ]],
				 ""DeviceState"": [ 12, [ ""Byte"", ""null"" ]],
				 ""TentativeNextState"": [ 13, [ ""Byte"", ""null"" ]],
				 ""SecondaryExtLock"": [ 16, [ ""_KEVENT"", ""null"" ]],
				 ""PhysicalDeviceObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FunctionalDeviceObject"": [ 36, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""AttachedDeviceObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ChildListLock"": [ 44, [ ""_KEVENT"", ""null"" ]],
				 ""ChildPdoList"": [ 60, [ ""Pointer"", ""{\""target\"":\""_PCI_PDO_EXTENSION\""}"" ]],
				 ""BusRootFdoExtension"": [ 64, [ ""Pointer"", ""{\""target\"":\""_PCI_FDO_EXTENSION\""}"" ]],
				 ""ParentFdoExtension"": [ 68, [ ""Pointer"", ""{\""target\"":\""_PCI_FDO_EXTENSION\""}"" ]],
				 ""ChildBridgePdoList"": [ 72, [ ""Pointer"", ""{\""target\"":\""_PCI_PDO_EXTENSION\""}"" ]],
				 ""PciBusInterface"": [ 76, [ ""Pointer"", ""{\""target\"":\""_PCI_BUS_INTERFACE_STANDARD\""}"" ]],
				 ""MaxSubordinateBus"": [ 80, [ ""Byte"", ""null"" ]],
				 ""BusHandler"": [ 84, [ ""Pointer"", ""{\""target\"":\""_BUS_HANDLER\""}"" ]],
				 ""BaseBus"": [ 88, [ ""Byte"", ""null"" ]],
				 ""Fake"": [ 89, [ ""Byte"", ""null"" ]],
				 ""ChildDelete"": [ 90, [ ""Byte"", ""null"" ]],
				 ""Scanned"": [ 91, [ ""Byte"", ""null"" ]],
				 ""ArbitersInitialized"": [ 92, [ ""Byte"", ""null"" ]],
				 ""BrokenVideoHackApplied"": [ 93, [ ""Byte"", ""null"" ]],
				 ""Hibernated"": [ 94, [ ""Byte"", ""null"" ]],
				 ""PowerState"": [ 96, [ ""PCI_POWER_STATE"", ""null"" ]],
				 ""SecondaryExtension"": [ 160, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""ChildWaitWakeCount"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""PreservedConfig"": [ 168, [ ""Pointer"", ""{\""target\"":\""_PCI_COMMON_CONFIG\""}"" ]],
				 ""Lock"": [ 172, [ ""_PCI_LOCK"", ""null"" ]],
				 ""HotPlugParameters"": [ 180, [ ""__unnamed"", ""null"" ]],
				 ""BusHackFlags"": [ 188, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY List
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public PCI_SIGNATURE ExtensionType { get { return (PCI_SIGNATURE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 IrpDispatchTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte DeviceState{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte TentativeNextState{ get { return _StructureData[_BufferOffset +13]; } }
		public _KEVENT SecondaryExtLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 PhysicalDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FunctionalDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 AttachedDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _KEVENT ChildListLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public UInt32 ChildPdoList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 BusRootFdoExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ParentFdoExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 ChildBridgePdoList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 PciBusInterface { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public Byte MaxSubordinateBus{ get { return _StructureData[_BufferOffset +80]; } }
		public UInt32 BusHandler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public Byte BaseBus{ get { return _StructureData[_BufferOffset +88]; } }
		public Byte Fake{ get { return _StructureData[_BufferOffset +89]; } }
		public Byte ChildDelete{ get { return _StructureData[_BufferOffset +90]; } }
		public Byte Scanned{ get { return _StructureData[_BufferOffset +91]; } }
		public Byte ArbitersInitialized{ get { return _StructureData[_BufferOffset +92]; } }
		public Byte BrokenVideoHackApplied{ get { return _StructureData[_BufferOffset +93]; } }
		public Byte Hibernated{ get { return _StructureData[_BufferOffset +94]; } }
		public PCI_POWER_STATE PowerState
		{
			get
			{
				PCI_POWER_STATE returnValue = new PCI_POWER_STATE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SecondaryExtension
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public UInt32 ChildWaitWakeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 PreservedConfig { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public _PCI_LOCK Lock
		{
			get
			{
				_PCI_LOCK returnValue = new _PCI_LOCK(_StructureData, _BufferOffset + 172);
				return returnValue;
			}
		}
		public __unnamed HotPlugParameters
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 180);
				return returnValue;
			}
		}
		public UInt32 BusHackFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
	}
	#endregion
	#region _CM_PARTIAL_RESOURCE_DESCRIPTOR
 
	public class _CM_PARTIAL_RESOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_PARTIAL_RESOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_PARTIAL_RESOURCE_DESCRIPTOR"": [ 16, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ShareDisposition"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""u"": [ 4, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ShareDisposition{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SYSPTES_HEADER
 
	public class _SYSPTES_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SYSPTES_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SYSPTES_HEADER"": [ 12, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Count"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _WAIT_CONTEXT_BLOCK
 
	public class _WAIT_CONTEXT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WAIT_CONTEXT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WAIT_CONTEXT_BLOCK"": [ 40, {
				 ""WaitQueueEntry"": [ 0, [ ""_KDEVICE_QUEUE_ENTRY"", ""null"" ]],
				 ""DeviceRoutine"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceContext"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfMapRegisters"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentIrp"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BufferChainingDpc"": [ 36, [ ""Pointer"", ""{\""target\"":\""_KDPC\""}"" ]] }]
				 }
				)";
			}
		}
		public _KDEVICE_QUEUE_ENTRY WaitQueueEntry
		{
			get
			{
				_KDEVICE_QUEUE_ENTRY returnValue = new _KDEVICE_QUEUE_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 DeviceRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DeviceContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 NumberOfMapRegisters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 CurrentIrp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 BufferChainingDpc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _CM_KEY_CONTROL_BLOCK
 
	public class _CM_KEY_CONTROL_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_CONTROL_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_CONTROL_BLOCK"": [ 80, {
				 ""RefCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ExtFlags"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateAlloc"": [ 4, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Delete"": [ 4, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""DelayedCloseIndex"": [ 4, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""TotalLevels"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""KeyHash"": [ 8, [ ""_CM_KEY_HASH"", ""null"" ]],
				 ""ConvKey"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NextHash"": [ 12, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]],
				 ""KeyHive"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]],
				 ""KeyCell"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ParentKcb"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""NameBlock"": [ 28, [ ""Pointer"", ""{\""target\"":\""_CM_NAME_CONTROL_BLOCK\""}"" ]],
				 ""CachedSecurity"": [ 32, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE\""}"" ]],
				 ""ValueCache"": [ 36, [ ""_CACHED_CHILD_LIST"", ""null"" ]],
				 ""IndexHint"": [ 44, [ ""Pointer"", ""{\""target\"":\""_CM_INDEX_HINT_BLOCK\""}"" ]],
				 ""HashKey"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SubKeyCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""KeyBodyListHead"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KcbLastWriteTime"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""KcbMaxNameLen"": [ 64, [ ""UInt16"", ""null"" ]],
				 ""KcbMaxValueNameLen"": [ 66, [ ""UInt16"", ""null"" ]],
				 ""KcbMaxValueDataLen"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""KcbUserFlags"": [ 72, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""KcbVirtControlFlags"": [ 72, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""KcbDebug"": [ 72, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 72, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExtFlags
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateAlloc
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Delete
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 DelayedCloseIndex
		{
			get
			{
				// start: 10  end: 22  Mask: 1111111111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4193280) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 TotalLevels
		{
			get
			{
				// start: 22  end: 32  Mask: 11111111110000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4290772992) >> 22;
				return (UInt32)value2;
			}
		}
		public _CM_KEY_HASH KeyHash
		{
			get
			{
				_CM_KEY_HASH returnValue = new _CM_KEY_HASH(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 ConvKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NextHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 KeyHive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 KeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ParentKcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NameBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 CachedSecurity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _CACHED_CHILD_LIST ValueCache
		{
			get
			{
				_CACHED_CHILD_LIST returnValue = new _CACHED_CHILD_LIST(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 IndexHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 HashKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SubKeyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _LIST_ENTRY KeyBodyListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LARGE_INTEGER KcbLastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt16 KcbMaxNameLen { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 64); } }
		public UInt16 KcbMaxValueNameLen { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 66); } }
		public UInt32 KcbMaxValueDataLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 KcbUserFlags
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 72);
				var value2 = (value & 15) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 KcbVirtControlFlags
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 72);
				var value2 = (value & 240) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 KcbDebug
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 72);
				var value2 = (value & 65280) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Flags
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 72);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KDPC
 
	public class _KDPC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDPC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDPC"": [ 32, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Number"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Importance"": [ 3, [ ""Byte"", ""null"" ]],
				 ""DpcListEntry"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeferredRoutine"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeferredContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument1"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument2"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Lock"": [ 28, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Number{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Importance{ get { return _StructureData[_BufferOffset +3]; } }
		public _LIST_ENTRY DpcListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 DeferredRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DeferredContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SystemArgument1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 SystemArgument2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _PCI_BUS_INTERFACE_STANDARD
 
	public class _PCI_BUS_INTERFACE_STANDARD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_BUS_INTERFACE_STANDARD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_BUS_INTERFACE_STANDARD"": [ 32, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadConfig"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WriteConfig"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PinToLine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LineToPin"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 InterfaceReference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 InterfaceDereference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ReadConfig { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 WriteConfig { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PinToLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LineToPin { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _WORK_QUEUE_ITEM
 
	public class _WORK_QUEUE_ITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WORK_QUEUE_ITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WORK_QUEUE_ITEM"": [ 16, {
				 ""List"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WorkerRoutine"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Parameter"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 WorkerRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Parameter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _PI_RESOURCE_ARBITER_ENTRY
 
	public class _PI_RESOURCE_ARBITER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PI_RESOURCE_ARBITER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PI_RESOURCE_ARBITER_ENTRY"": [ 56, {
				 ""DeviceArbiterList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResourceType"": [ 8, [ ""Byte"", ""null"" ]],
				 ""ArbiterInterface"": [ 12, [ ""Pointer"", ""{\""target\"":\""_ARBITER_INTERFACE\""}"" ]],
				 ""Level"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ResourceList"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BestResourceList"": [ 28, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BestConfig"": [ 36, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ActiveArbiterList"": [ 44, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""State"": [ 52, [ ""Byte"", ""null"" ]],
				 ""ResourcesChanged"": [ 53, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DeviceArbiterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte ResourceType{ get { return _StructureData[_BufferOffset +8]; } }
		public UInt32 ArbiterInterface { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Level { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _LIST_ENTRY BestResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _LIST_ENTRY BestConfig
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _LIST_ENTRY ActiveArbiterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public Byte State{ get { return _StructureData[_BufferOffset +52]; } }
		public Byte ResourcesChanged{ get { return _StructureData[_BufferOffset +53]; } }
	}
	#endregion
	#region _KTIMER
 
	public class _KTIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER"": [ 40, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""DueTime"": [ 16, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""TimerListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Dpc"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KDPC\""}"" ]],
				 ""Period"": [ 36, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER DueTime
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY TimerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 Dpc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Int32 Period { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _CM_KEY_HASH
 
	public class _CM_KEY_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_HASH"": [ 16, {
				 ""ConvKey"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NextHash"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]],
				 ""KeyHive"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]],
				 ""KeyCell"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ConvKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NextHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 KeyHive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 KeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _IRP
 
	public class _IRP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IRP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IRP"": [ 112, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""MdlAddress"": [ 4, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AssociatedIrp"": [ 12, [ ""__unnamed"", ""null"" ]],
				 ""ThreadListEntry"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""IoStatus"": [ 24, [ ""_IO_STATUS_BLOCK"", ""null"" ]],
				 ""RequestorMode"": [ 32, [ ""Char"", ""null"" ]],
				 ""PendingReturned"": [ 33, [ ""Byte"", ""null"" ]],
				 ""StackCount"": [ 34, [ ""Char"", ""null"" ]],
				 ""CurrentLocation"": [ 35, [ ""Char"", ""null"" ]],
				 ""Cancel"": [ 36, [ ""Byte"", ""null"" ]],
				 ""CancelIrql"": [ 37, [ ""Byte"", ""null"" ]],
				 ""ApcEnvironment"": [ 38, [ ""Char"", ""null"" ]],
				 ""AllocationFlags"": [ 39, [ ""Byte"", ""null"" ]],
				 ""UserIosb"": [ 40, [ ""Pointer"", ""{\""target\"":\""_IO_STATUS_BLOCK\""}"" ]],
				 ""UserEvent"": [ 44, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Overlay"": [ 48, [ ""__unnamed"", ""null"" ]],
				 ""CancelRoutine"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserBuffer"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Tail"": [ 64, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 MdlAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public __unnamed AssociatedIrp
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LIST_ENTRY ThreadListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _IO_STATUS_BLOCK IoStatus
		{
			get
			{
				_IO_STATUS_BLOCK returnValue = new _IO_STATUS_BLOCK(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Char RequestorMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 32); } }
		public Byte PendingReturned{ get { return _StructureData[_BufferOffset +33]; } }
		public Char StackCount { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 34); } }
		public Char CurrentLocation { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 35); } }
		public Byte Cancel{ get { return _StructureData[_BufferOffset +36]; } }
		public Byte CancelIrql{ get { return _StructureData[_BufferOffset +37]; } }
		public Char ApcEnvironment { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 38); } }
		public Byte AllocationFlags{ get { return _StructureData[_BufferOffset +39]; } }
		public UInt32 UserIosb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 UserEvent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public __unnamed Overlay
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 CancelRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 UserBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public __unnamed Tail
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCI_LOCK
 
	public class _PCI_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_LOCK"": [ 8, {
				 ""Atom"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""OldIrql"": [ 4, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Atom { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte OldIrql{ get { return _StructureData[_BufferOffset +4]; } }
	}
	#endregion
	#region _CM_KEY_SECURITY_CACHE_ENTRY
 
	public class _CM_KEY_SECURITY_CACHE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_SECURITY_CACHE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_SECURITY_CACHE_ENTRY"": [ 8, {
				 ""Cell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CachedSecurity"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CachedSecurity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _IMAGE_SECTION_HEADER
 
	public class _IMAGE_SECTION_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_SECTION_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_SECTION_HEADER"": [ 40, {
				 ""Name"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""Misc"": [ 8, [ ""__unnamed"", ""null"" ]],
				 ""VirtualAddress"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfRawData"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PointerToRawData"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PointerToRelocations"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PointerToLinenumbers"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""NumberOfRelocations"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""NumberOfLinenumbers"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""Characteristics"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Name
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public __unnamed Misc
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 VirtualAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SizeOfRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PointerToRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PointerToRelocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PointerToLinenumbers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt16 NumberOfRelocations { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 NumberOfLinenumbers { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public UInt32 Characteristics { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _POP_ACTION_TRIGGER
 
	public class _POP_ACTION_TRIGGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_ACTION_TRIGGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_ACTION_TRIGGER"": [ 12, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""POP_POLICY_DEVICE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 5, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Battery"": [ 8, [ ""__unnamed"", ""null"" ]],
				 ""Wait"": [ 8, [ ""Pointer"", ""{\""target\"":\""_POP_TRIGGER_WAIT\""}"" ]] }]
				 }
				)";
			}
		}
		public POP_POLICY_DEVICE_TYPE Type { get { return (POP_POLICY_DEVICE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5];
				return returnValue;
			}
		}
		public __unnamed Battery
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 Wait { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FAST_IO_DISPATCH
 
	public class _FAST_IO_DISPATCH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_IO_DISPATCH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_IO_DISPATCH"": [ 112, {
				 ""SizeOfFastIoDispatch"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FastIoCheckIfPossible"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoRead"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoWrite"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryBasicInfo"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryStandardInfo"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoLock"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoUnlockSingle"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoUnlockAll"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoUnlockAllByKey"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoDeviceControl"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireFileForNtCreateSection"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseFileForNtCreateSection"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoDetachDevice"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryNetworkOpenInfo"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireForModWrite"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlRead"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlReadComplete"": [ 68, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PrepareMdlWrite"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlWriteComplete"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoReadCompressed"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoWriteCompressed"": [ 84, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlReadCompleteCompressed"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlWriteCompleteCompressed"": [ 92, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryOpen"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseForModWrite"": [ 100, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireForCcFlush"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseForCcFlush"": [ 108, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfFastIoDispatch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FastIoCheckIfPossible { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 FastIoRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FastIoWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 FastIoQueryBasicInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 FastIoQueryStandardInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 FastIoLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FastIoUnlockSingle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FastIoUnlockAll { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FastIoUnlockAllByKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 FastIoDeviceControl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 AcquireFileForNtCreateSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ReleaseFileForNtCreateSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 FastIoDetachDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 FastIoQueryNetworkOpenInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 AcquireForModWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 MdlRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 MdlReadComplete { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PrepareMdlWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 MdlWriteComplete { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 FastIoReadCompressed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 FastIoWriteCompressed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 MdlReadCompleteCompressed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 MdlWriteCompleteCompressed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 FastIoQueryOpen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 ReleaseForModWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 AcquireForCcFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 ReleaseForCcFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
	}
	#endregion
	#region _ETIMER
 
	public class _ETIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETIMER"": [ 152, {
				 ""KeTimer"": [ 0, [ ""_KTIMER"", ""null"" ]],
				 ""TimerApc"": [ 40, [ ""_KAPC"", ""null"" ]],
				 ""TimerDpc"": [ 88, [ ""_KDPC"", ""null"" ]],
				 ""ActiveTimerListEntry"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""Period"": [ 132, [ ""Int32"", ""null"" ]],
				 ""ApcAssociated"": [ 136, [ ""Byte"", ""null"" ]],
				 ""WakeTimer"": [ 137, [ ""Byte"", ""null"" ]],
				 ""WakeTimerListEntry"": [ 140, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KTIMER KeTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KAPC TimerApc
		{
			get
			{
				_KAPC returnValue = new _KAPC(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _KDPC TimerDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _LIST_ENTRY ActiveTimerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public Int32 Period { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 132); } }
		public Byte ApcAssociated{ get { return _StructureData[_BufferOffset +136]; } }
		public Byte WakeTimer{ get { return _StructureData[_BufferOffset +137]; } }
		public _LIST_ENTRY WakeTimerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 140);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_BREAKPOINTEX
 
	public class _DBGKD_BREAKPOINTEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_BREAKPOINTEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_BREAKPOINTEX"": [ 8, {
				 ""BreakPointCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ContinueStatus"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakPointCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 ContinueStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _CM_CELL_REMAP_BLOCK
 
	public class _CM_CELL_REMAP_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_CELL_REMAP_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_CELL_REMAP_BLOCK"": [ 8, {
				 ""OldCell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NewCell"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 OldCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NewCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PCI_PMC
 
	public class _PCI_PMC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_PMC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_PMC"": [ 2, {
				 ""Version"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""PMEClock"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Rsvd1"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""DeviceSpecificInitialization"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Rsvd2"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Support"": [ 1, [ ""_PM_SUPPORT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Version
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte PMEClock
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Rsvd1
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte DeviceSpecificInitialization
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Rsvd2
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
		public _PM_SUPPORT Support
		{
			get
			{
				_PM_SUPPORT returnValue = new _PM_SUPPORT(_StructureData, _BufferOffset + 1);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_CONTINUE
 
	public class _DBGKD_CONTINUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_CONTINUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_CONTINUE"": [ 4, {
				 ""ContinueStatus"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 ContinueStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MMWSLE
 
	public class _MMWSLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMWSLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMWSLE"": [ 4, {
				 ""u1"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed u1
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXCEPTION_POINTERS
 
	public class _EXCEPTION_POINTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_POINTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_POINTERS"": [ 8, {
				 ""ExceptionRecord"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_RECORD\""}"" ]],
				 ""ContextRecord"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ExceptionRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ContextRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KQUEUE
 
	public class _KQUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KQUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KQUEUE"": [ 40, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""EntryListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CurrentCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""MaximumCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ThreadListHead"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY EntryListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 CurrentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MaximumCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_USER_PROCESS_PARAMETERS
 
	public class _RTL_USER_PROCESS_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_USER_PROCESS_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 656; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_USER_PROCESS_PARAMETERS"": [ 656, {
				 ""MaximumLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DebugFlags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ConsoleHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConsoleFlags"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""StandardInput"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StandardOutput"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StandardError"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentDirectory"": [ 36, [ ""_CURDIR"", ""null"" ]],
				 ""DllPath"": [ 48, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ImagePathName"": [ 56, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CommandLine"": [ 64, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Environment"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartingX"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""StartingY"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""CountX"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""CountY"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""CountCharsX"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""CountCharsY"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""FillAttribute"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""WindowFlags"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""ShowWindowFlags"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""WindowTitle"": [ 112, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DesktopInfo"": [ 120, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ShellInfo"": [ 128, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""RuntimeData"": [ 136, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CurrentDirectores"": [ 144, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaximumLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DebugFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ConsoleHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ConsoleFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 StandardInput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 StandardOutput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 StandardError { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _CURDIR CurrentDirectory
		{
			get
			{
				_CURDIR returnValue = new _CURDIR(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _UNICODE_STRING DllPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _UNICODE_STRING ImagePathName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _UNICODE_STRING CommandLine
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 Environment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 StartingX { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 StartingY { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 CountX { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 CountY { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 CountCharsX { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 CountCharsY { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 FillAttribute { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 WindowFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 ShowWindowFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _UNICODE_STRING WindowTitle
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _UNICODE_STRING DesktopInfo
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _UNICODE_STRING ShellInfo
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _UNICODE_STRING RuntimeData
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _RTL_DRIVE_LETTER_CURDIR[] CurrentDirectores
		{
			get
			{
				_RTL_DRIVE_LETTER_CURDIR[] returnValue = new _RTL_DRIVE_LETTER_CURDIR[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _RTL_DRIVE_LETTER_CURDIR(_StructureData, (i * size) + _BufferOffset + 144);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CACHE_MANAGER_CALLBACKS
 
	public class _CACHE_MANAGER_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHE_MANAGER_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHE_MANAGER_CALLBACKS"": [ 16, {
				 ""AcquireForLazyWrite"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseFromLazyWrite"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireForReadAhead"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseFromReadAhead"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AcquireForLazyWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReleaseFromLazyWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 AcquireForReadAhead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ReleaseFromReadAhead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _FILE_BASIC_INFORMATION
 
	public class _FILE_BASIC_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_BASIC_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_BASIC_INFORMATION"": [ 40, {
				 ""CreationTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastAccessTime"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastWriteTime"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ChangeTime"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileAttributes"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER CreationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastAccessTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ChangeTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 FileAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _CELL_DATA
 
	public class _CELL_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CELL_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CELL_DATA"": [ 80, {
				 ""u"": [ 0, [ ""_u"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _u u
		{
			get
			{
				_u returnValue = new _u(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SE_AUDIT_PROCESS_CREATION_INFO
 
	public class _SE_AUDIT_PROCESS_CREATION_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SE_AUDIT_PROCESS_CREATION_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SE_AUDIT_PROCESS_CREATION_INFO"": [ 4, {
				 ""ImageFileName"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_NAME_INFORMATION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ImageFileName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HEAP_ENTRY_EXTRA
 
	public class _HEAP_ENTRY_EXTRA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_ENTRY_EXTRA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_ENTRY_EXTRA"": [ 8, {
				 ""AllocatorBackTraceIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""TagIndex"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Settable"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ZeroInit"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Settable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ZeroInit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _VI_DEADLOCK_RESOURCE
 
	public class _VI_DEADLOCK_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_RESOURCE"": [ 128, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_VI_DEADLOCK_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NodeCount"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""RecursionCount"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ResourceAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadOwner"": [ 12, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_THREAD\""}"" ]],
				 ""ResourceList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HashChainList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""StackTrace"": [ 32, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""LastAcquireTrace"": [ 64, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""LastReleaseTrace"": [ 96, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public _VI_DEADLOCK_RESOURCE_TYPE Type { get { return (_VI_DEADLOCK_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NodeCount
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 RecursionCount
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 ResourceAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ThreadOwner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY HashChainList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32[] StackTrace
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				int size = 4;
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32[] LastAcquireTrace
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				int size = 4;
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32[] LastReleaseTrace
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				int size = 4;
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CLIENT_ID
 
	public class _CLIENT_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CLIENT_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CLIENT_ID"": [ 8, {
				 ""UniqueProcess"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UniqueThread"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 UniqueProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 UniqueThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PEB_FREE_BLOCK
 
	public class _PEB_FREE_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB_FREE_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB_FREE_BLOCK"": [ 8, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PEB_FREE_BLOCK\""}"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PO_DEVICE_NOTIFY
 
	public class _PO_DEVICE_NOTIFY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_DEVICE_NOTIFY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_DEVICE_NOTIFY"": [ 40, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TargetDevice"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""WakeNeeded"": [ 12, [ ""Byte"", ""null"" ]],
				 ""OrderLevel"": [ 13, [ ""Byte"", ""null"" ]],
				 ""DeviceObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Node"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceName"": [ 24, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""DriverName"": [ 28, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""ChildCount"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ActiveChild"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 TargetDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte WakeNeeded{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte OrderLevel{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Node { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DeviceName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DriverName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 ChildCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 ActiveChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _MMPFNLIST
 
	public class _MMPFNLIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFNLIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFNLIST"": [ 16, {
				 ""Total"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ListName"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_MMLISTS\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flink"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Blink"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Total { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _MMLISTS ListName { get { return (_MMLISTS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region PCI_HEADER_TYPE_DEPENDENT
 
	public class PCI_HEADER_TYPE_DEPENDENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PCI_HEADER_TYPE_DEPENDENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PCI_HEADER_TYPE_DEPENDENT"": [ 4, {
				 ""type0"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""type1"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""type2"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed type0
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed type1
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed type2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_GET_SET_BUS_DATA
 
	public class _DBGKD_GET_SET_BUS_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_SET_BUS_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_SET_BUS_DATA"": [ 20, {
				 ""BusDataType"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SlotNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Offset"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BusDataType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _OBJECT_HEADER_NAME_INFO
 
	public class _OBJECT_HEADER_NAME_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_NAME_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_NAME_INFO"": [ 16, {
				 ""Directory"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""Name"": [ 4, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""QueryReferences"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Directory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 QueryReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _KINTERRUPT
 
	public class _KINTERRUPT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KINTERRUPT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 484; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KINTERRUPT"": [ 484, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""InterruptListEntry"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ServiceRoutine"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ServiceContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SpinLock"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""TickCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ActualLock"": [ 28, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""DispatchAddress"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Vector"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Irql"": [ 40, [ ""Byte"", ""null"" ]],
				 ""SynchronizeIrql"": [ 41, [ ""Byte"", ""null"" ]],
				 ""FloatingSave"": [ 42, [ ""Byte"", ""null"" ]],
				 ""Connected"": [ 43, [ ""Byte"", ""null"" ]],
				 ""Number"": [ 44, [ ""Char"", ""null"" ]],
				 ""ShareVector"": [ 45, [ ""Byte"", ""null"" ]],
				 ""Mode"": [ 48, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ServiceCount"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""DispatchCount"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""DispatchCode"": [ 60, [ ""Array"", ""{\""count\"":106,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public _LIST_ENTRY InterruptListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 ServiceRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ServiceContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 TickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ActualLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 DispatchAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Vector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public Byte Irql{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte SynchronizeIrql{ get { return _StructureData[_BufferOffset +41]; } }
		public Byte FloatingSave{ get { return _StructureData[_BufferOffset +42]; } }
		public Byte Connected{ get { return _StructureData[_BufferOffset +43]; } }
		public Char Number { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 44); } }
		public Byte ShareVector{ get { return _StructureData[_BufferOffset +45]; } }
		public _KINTERRUPT_MODE Mode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 ServiceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 DispatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32[] DispatchCode
		{
			get
			{
				UInt32[] returnValue = new UInt32[106];
				for(int i=0; i<106; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 60);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECURITY_CLIENT_CONTEXT
 
	public class _SECURITY_CLIENT_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_CLIENT_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 60; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_CLIENT_CONTEXT"": [ 60, {
				 ""SecurityQos"": [ 0, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]],
				 ""ClientToken"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirectlyAccessClientToken"": [ 16, [ ""Byte"", ""null"" ]],
				 ""DirectAccessEffectiveOnly"": [ 17, [ ""Byte"", ""null"" ]],
				 ""ServerIsRemote"": [ 18, [ ""Byte"", ""null"" ]],
				 ""ClientTokenControl"": [ 20, [ ""_TOKEN_CONTROL"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SECURITY_QUALITY_OF_SERVICE SecurityQos
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ClientToken { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Byte DirectlyAccessClientToken{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte DirectAccessEffectiveOnly{ get { return _StructureData[_BufferOffset +17]; } }
		public Byte ServerIsRemote{ get { return _StructureData[_BufferOffset +18]; } }
		public _TOKEN_CONTROL ClientTokenControl
		{
			get
			{
				_TOKEN_CONTROL returnValue = new _TOKEN_CONTROL(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _BITMAP_RANGE
 
	public class _BITMAP_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BITMAP_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BITMAP_RANGE"": [ 32, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BasePage"": [ 8, [ ""Int64"", ""null"" ]],
				 ""FirstDirtyPage"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""LastDirtyPage"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DirtyPages"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Bitmap"": [ 28, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 BasePage { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 FirstDirtyPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 LastDirtyPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DirtyPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Bitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _PCI_ARBITER_INSTANCE
 
	public class _PCI_ARBITER_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_ARBITER_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_ARBITER_INSTANCE"": [ 224, {
				 ""Header"": [ 0, [ ""PCI_SECONDARY_EXTENSION"", ""null"" ]],
				 ""Interface"": [ 12, [ ""Pointer"", ""{\""target\"":\""_PCI_INTERFACE\""}"" ]],
				 ""BusFdoExtension"": [ 16, [ ""Pointer"", ""{\""target\"":\""_PCI_FDO_EXTENSION\""}"" ]],
				 ""InstanceName"": [ 20, [ ""Array"", ""{\""count\"":24,\""target\"":\""UInt16\""}"" ]],
				 ""CommonInstance"": [ 68, [ ""_ARBITER_INSTANCE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public PCI_SECONDARY_EXTENSION Header
		{
			get
			{
				PCI_SECONDARY_EXTENSION returnValue = new PCI_SECONDARY_EXTENSION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Interface { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 BusFdoExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16[] InstanceName
		{
			get
			{
				UInt16[] returnValue = new UInt16[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public _ARBITER_INSTANCE CommonInstance
		{
			get
			{
				_ARBITER_INSTANCE returnValue = new _ARBITER_INSTANCE(_StructureData, _BufferOffset + 68);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HANDLE_TRACE_DB_ENTRY
 
	public class _HANDLE_TRACE_DB_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TRACE_DB_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TRACE_DB_ENTRY"": [ 80, {
				 ""ClientId"": [ 0, [ ""_CLIENT_ID"", ""null"" ]],
				 ""Handle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Type"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""StackTrace"": [ 16, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public _CLIENT_ID ClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Handle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32[] StackTrace
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				int size = 4;
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPAGING_FILE
 
	public class _MMPAGING_FILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPAGING_FILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPAGING_FILE"": [ 68, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaximumSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MinimumSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""FreeSpace"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CurrentUsage"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PeakUsage"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Hint"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""HighestPage"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Entry"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMMOD_WRITER_MDL_ENTRY\""}}"" ]],
				 ""Bitmap"": [ 40, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""File"": [ 44, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""PageFileName"": [ 48, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PageFileNumber"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Extended"": [ 60, [ ""Byte"", ""null"" ]],
				 ""HintSetToZero"": [ 61, [ ""Byte"", ""null"" ]],
				 ""BootPartition"": [ 62, [ ""Byte"", ""null"" ]],
				 ""FileHandle"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaximumSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MinimumSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FreeSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CurrentUsage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PeakUsage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Hint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 HighestPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32[] Entry
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				int size = 4;
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 Bitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 File { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _UNICODE_STRING PageFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 PageFileNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public Byte Extended{ get { return _StructureData[_BufferOffset +60]; } }
		public Byte HintSetToZero{ get { return _StructureData[_BufferOffset +61]; } }
		public Byte BootPartition{ get { return _StructureData[_BufferOffset +62]; } }
		public UInt32 FileHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _BUS_EXTENSION_LIST
 
	public class _BUS_EXTENSION_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BUS_EXTENSION_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BUS_EXTENSION_LIST"": [ 8, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BusExtension"": [ 4, [ ""Pointer"", ""{\""target\"":\""_PI_BUS_EXTENSION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BusExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PCI_MJ_DISPATCH_TABLE
 
	public class _PCI_MJ_DISPATCH_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_MJ_DISPATCH_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_MJ_DISPATCH_TABLE"": [ 32, {
				 ""PnpIrpMaximumMinorFunction"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PnpIrpDispatchTable"": [ 4, [ ""Pointer"", ""{\""target\"":\""_PCI_MN_DISPATCH_TABLE\""}"" ]],
				 ""PowerIrpMaximumMinorFunction"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PowerIrpDispatchTable"": [ 12, [ ""Pointer"", ""{\""target\"":\""_PCI_MN_DISPATCH_TABLE\""}"" ]],
				 ""SystemControlIrpDispatchStyle"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_PCI_DISPATCH_STYLE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SystemControlIrpDispatchFunction"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OtherIrpDispatchStyle"": [ 24, [ ""Enumeration"", ""{\""enum_name\"":\""_PCI_DISPATCH_STYLE\"",\""target\"":\""UInt32\""}"" ]],
				 ""OtherIrpDispatchFunction"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PnpIrpMaximumMinorFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PnpIrpDispatchTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PowerIrpMaximumMinorFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 PowerIrpDispatchTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _PCI_DISPATCH_STYLE SystemControlIrpDispatchStyle { get { return (_PCI_DISPATCH_STYLE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SystemControlIrpDispatchFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _PCI_DISPATCH_STYLE OtherIrpDispatchStyle { get { return (_PCI_DISPATCH_STYLE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 OtherIrpDispatchFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _POP_TRIGGER_WAIT
 
	public class _POP_TRIGGER_WAIT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_TRIGGER_WAIT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_TRIGGER_WAIT"": [ 32, {
				 ""Event"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""Status"": [ 16, [ ""Int32"", ""null"" ]],
				 ""Link"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Trigger"": [ 28, [ ""Pointer"", ""{\""target\"":\""_POP_ACTION_TRIGGER\""}"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 Trigger { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _IO_TIMER
 
	public class _IO_TIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_TIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_TIMER"": [ 24, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""TimerFlag"": [ 2, [ ""Int16"", ""null"" ]],
				 ""TimerList"": [ 4, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TimerRoutine"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceObject"": [ 20, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 TimerFlag { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public _LIST_ENTRY TimerList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 TimerRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _FXSAVE_FORMAT
 
	public class _FXSAVE_FORMAT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FXSAVE_FORMAT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 520; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FXSAVE_FORMAT"": [ 520, {
				 ""ControlWord"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""StatusWord"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TagWord"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""ErrorOpcode"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ErrorOffset"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ErrorSelector"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DataOffset"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataSelector"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MXCsr"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""MXCsrMask"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""RegisterArea"": [ 32, [ ""Array"", ""{\""count\"":128,\""target\"":\""Byte\""}"" ]],
				 ""Reserved3"": [ 160, [ ""Array"", ""{\""count\"":128,\""target\"":\""Byte\""}"" ]],
				 ""Reserved4"": [ 288, [ ""Array"", ""{\""count\"":224,\""target\"":\""Byte\""}"" ]],
				 ""Align16Byte"": [ 512, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 ControlWord { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 StatusWord { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 TagWord { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 ErrorOpcode { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 ErrorOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ErrorSelector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataSelector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 MXCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MXCsrMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte[] RegisterArea
		{
			get
			{
				Byte[] returnValue = new Byte[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 32];
				return returnValue;
			}
		}
		public Byte[] Reserved3
		{
			get
			{
				Byte[] returnValue = new Byte[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 160];
				return returnValue;
			}
		}
		public Byte[] Reserved4
		{
			get
			{
				Byte[] returnValue = new Byte[224];
				for(int i=0; i<224; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 288];
				return returnValue;
			}
		}
		public Byte[] Align16Byte
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 512];
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMWSLENTRY
 
	public class _MMWSLENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMWSLENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMWSLENTRY"": [ 4, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LockedInWs"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LockedInMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Hashed"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Direct"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""Age"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""VirtualPageNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LockedInWs
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LockedInMemory
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 248) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Hashed
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Direct
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 Age
		{
			get
			{
				// start: 10  end: 12  Mask: 0000110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3072) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 VirtualPageNumber
		{
			get
			{
				// start: 12  end: 32  Mask: 11111111111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294963200) >> 12;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _OBJECT_DIRECTORY
 
	public class _OBJECT_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 164; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_DIRECTORY"": [ 164, {
				 ""HashBuckets"": [ 0, [ ""Array"", ""{\""count\"":37,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_OBJECT_DIRECTORY_ENTRY\""}}"" ]],
				 ""Lock"": [ 148, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DeviceMap"": [ 152, [ ""Pointer"", ""{\""target\"":\""_DEVICE_MAP\""}"" ]],
				 ""SessionId"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 160, [ ""UInt16"", ""null"" ]],
				 ""SymbolicLinkUsageCount"": [ 162, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] HashBuckets
		{
			get
			{
				UInt32[] returnValue = new UInt32[37];
				int size = 4;
				for(int i=0; i<37; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
		public UInt32 DeviceMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 160); } }
		public UInt16 SymbolicLinkUsageCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 162); } }
	}
	#endregion
	#region _OBJECT_CREATE_INFORMATION
 
	public class _OBJECT_CREATE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_CREATE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_CREATE_INFORMATION"": [ 48, {
				 ""Attributes"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RootDirectory"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ParseContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProbeMode"": [ 12, [ ""Char"", ""null"" ]],
				 ""PagedPoolCharge"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""NonPagedPoolCharge"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptorCharge"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptor"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityQos"": [ 32, [ ""Pointer"", ""{\""target\"":\""_SECURITY_QUALITY_OF_SERVICE\""}"" ]],
				 ""SecurityQualityOfService"": [ 36, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RootDirectory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ParseContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Char ProbeMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 12); } }
		public UInt32 PagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NonPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 SecurityDescriptorCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 SecurityDescriptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 SecurityQos { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WMI_CLIENT_CONTEXT
 
	public class _WMI_CLIENT_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_CLIENT_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_CLIENT_CONTEXT"": [ 4, {
				 ""ProcessorNumber"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Alignment"": [ 1, [ ""Byte"", ""null"" ]],
				 ""LoggerId"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte ProcessorNumber{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Alignment{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 LoggerId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _HEAP_LOOKASIDE
 
	public class _HEAP_LOOKASIDE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LOOKASIDE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LOOKASIDE"": [ 48, {
				 ""ListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""Depth"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""MaximumDepth"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""TotalAllocates"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AllocateMisses"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TotalFrees"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""FreeMisses"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""LastTotalAllocates"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateMisses"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Counters"": [ 36, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER ListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 MaximumDepth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 TotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 TotalFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 FreeMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LastTotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LastAllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32[] Counters
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_INTERFACE
 
	public class _ARBITER_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_INTERFACE"": [ 24, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ArbiterHandler"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 InterfaceReference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 InterfaceDereference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ArbiterHandler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _ACL
 
	public class _ACL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACL"": [ 8, {
				 ""AclRevision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Sbz1"": [ 1, [ ""Byte"", ""null"" ]],
				 ""AclSize"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""AceCount"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Sbz2"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte AclRevision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Sbz1{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 AclSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 AceCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Sbz2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region _CALL_PERFORMANCE_DATA
 
	public class _CALL_PERFORMANCE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CALL_PERFORMANCE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 516; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CALL_PERFORMANCE_DATA"": [ 516, {
				 ""SpinLock"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HashTable"": [ 4, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY[] HashTable
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMWSL
 
	public class _MMWSL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMWSL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3324; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMWSL"": [ 3324, {
				 ""Quota"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FirstFree"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FirstDynamic"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LastEntry"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""NextSlot"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Wsle"": [ 20, [ ""Pointer"", ""{\""target\"":\""_MMWSLE\""}"" ]],
				 ""LastInitializedWsle"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""NonDirectCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""HashTable"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMWSLE_HASH\""}"" ]],
				 ""HashTableSize"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""NumberOfCommittedPageTables"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""HashTableStart"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HighestPermittedHashAddress"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfImageWaiters"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""VadBitMapHint"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""UsedPageTableEntries"": [ 60, [ ""Array"", ""{\""count\"":1536,\""target\"":\""UInt16\""}"" ]],
				 ""CommittedPageTables"": [ 3132, [ ""Array"", ""{\""count\"":48,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Quota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FirstFree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 FirstDynamic { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LastEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NextSlot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Wsle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 LastInitializedWsle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NonDirectCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 HashTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 HashTableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 NumberOfCommittedPageTables { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 HashTableStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 HighestPermittedHashAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 NumberOfImageWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 VadBitMapHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt16[] UsedPageTableEntries
		{
			get
			{
				UInt16[] returnValue = new UInt16[1536];
				for(int i=0; i<1536; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 60);
				return returnValue;
			}
		}
		public UInt32[] CommittedPageTables
		{
			get
			{
				UInt32[] returnValue = new UInt32[48];
				for(int i=0; i<48; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 3132);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_DRIVE_LETTER_CURDIR
 
	public class _RTL_DRIVE_LETTER_CURDIR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DRIVE_LETTER_CURDIR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DRIVE_LETTER_CURDIR"": [ 16, {
				 ""Flags"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Length"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TimeStamp"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DosPath"": [ 8, [ ""_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 TimeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _STRING DosPath
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region PCI_FUNCTION_RESOURCES
 
	public class PCI_FUNCTION_RESOURCES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PCI_FUNCTION_RESOURCES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 336; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PCI_FUNCTION_RESOURCES"": [ 336, {
				 ""Limit"": [ 0, [ ""Array"", ""{\""count\"":7,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Current"": [ 224, [ ""Array"", ""{\""count\"":7,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _IO_RESOURCE_DESCRIPTOR[] Limit
		{
			get
			{
				_IO_RESOURCE_DESCRIPTOR[] returnValue = new _IO_RESOURCE_DESCRIPTOR[7];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<7; i++ )
					returnValue[i] = new _IO_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_PARTIAL_RESOURCE_DESCRIPTOR[] Current
		{
			get
			{
				_CM_PARTIAL_RESOURCE_DESCRIPTOR[] returnValue = new _CM_PARTIAL_RESOURCE_DESCRIPTOR[7];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<7; i++ )
					returnValue[i] = new _CM_PARTIAL_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 224);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNODE_HEADER
 
	public class _WNODE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNODE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNODE_HEADER"": [ 48, {
				 ""BufferSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProviderId"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""HistoricalContext"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Version"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Linkage"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CountLost"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""KernelHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TimeStamp"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Guid"": [ 24, [ ""_GUID"", ""null"" ]],
				 ""ClientContext"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 44, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ProviderId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 HistoricalContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Linkage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CountLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 KernelHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _GUID Guid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 ClientContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
	}
	#endregion
	#region _EXCEPTION_RECORD
 
	public class _EXCEPTION_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_RECORD"": [ 80, {
				 ""ExceptionCode"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ExceptionFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExceptionRecord"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_RECORD\""}"" ]],
				 ""ExceptionAddress"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberParameters"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ExceptionInformation"": [ 20, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExceptionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ExceptionRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ExceptionAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NumberParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] ExceptionInformation
		{
			get
			{
				UInt32[] returnValue = new UInt32[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEGMENT
 
	public class _SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEGMENT"": [ 72, {
				 ""ControlArea"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""TotalNumberOfPtes"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NonExtendedPtes"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""WritableUserReferences"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfSegment"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SegmentPteTemplate"": [ 24, [ ""_MMPTE"", ""null"" ]],
				 ""NumberOfCommittedPages"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ExtendInfo"": [ 36, [ ""Pointer"", ""{\""target\"":\""_MMEXTEND_INFO\""}"" ]],
				 ""SystemImageBase"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BasedAddress"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""u1"": [ 48, [ ""__unnamed"", ""null"" ]],
				 ""u2"": [ 52, [ ""__unnamed"", ""null"" ]],
				 ""PrototypePte"": [ 56, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""ThePtes"": [ 64, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalNumberOfPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NonExtendedPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 WritableUserReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 SizeOfSegment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _MMPTE SegmentPteTemplate
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 NumberOfCommittedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 ExtendInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 SystemImageBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 BasedAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public __unnamed u1
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public __unnamed u2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 52);
				return returnValue;
			}
		}
		public UInt32 PrototypePte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _MMPTE[] ThePtes
		{
			get
			{
				_MMPTE[] returnValue = new _MMPTE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MMPTE(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCI_COMMON_EXTENSION
 
	public class _PCI_COMMON_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_COMMON_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_COMMON_EXTENSION"": [ 32, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExtensionType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""PCI_SIGNATURE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IrpDispatchTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PCI_MJ_DISPATCH_TABLE\""}"" ]],
				 ""DeviceState"": [ 12, [ ""Byte"", ""null"" ]],
				 ""TentativeNextState"": [ 13, [ ""Byte"", ""null"" ]],
				 ""SecondaryExtLock"": [ 16, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public PCI_SIGNATURE ExtensionType { get { return (PCI_SIGNATURE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 IrpDispatchTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte DeviceState{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte TentativeNextState{ get { return _StructureData[_BufferOffset +13]; } }
		public _KEVENT SecondaryExtLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PRIVATE_CACHE_MAP
 
	public class _PRIVATE_CACHE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PRIVATE_CACHE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PRIVATE_CACHE_MAP"": [ 88, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Flags"": [ 0, [ ""_PRIVATE_CACHE_MAP_FLAGS"", ""null"" ]],
				 ""UlongFlags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReadAheadMask"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FileObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""FileOffset1"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BeyondLastByte1"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileOffset2"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BeyondLastByte2"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReadAheadOffset"": [ 48, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ReadAheadLength"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ReadAheadSpinLock"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""PrivateLinks"": [ 76, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public _PRIVATE_CACHE_MAP_FLAGS Flags
		{
			get
			{
				_PRIVATE_CACHE_MAP_FLAGS returnValue = new _PRIVATE_CACHE_MAP_FLAGS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 UlongFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReadAheadMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER FileOffset1
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BeyondLastByte1
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER FileOffset2
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BeyondLastByte2
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LARGE_INTEGER[] ReadAheadOffset
		{
			get
			{
				_LARGE_INTEGER[] returnValue = new _LARGE_INTEGER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _LARGE_INTEGER(_StructureData, (i * size) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32[] ReadAheadLength
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 ReadAheadSpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public _LIST_ENTRY PrivateLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 76);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_HANDLE_TABLE
 
	public class _RTL_HANDLE_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HANDLE_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HANDLE_TABLE"": [ 32, {
				 ""MaximumNumberOfHandles"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SizeOfHandleTableEntry"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 8, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""FreeHandles"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_HANDLE_TABLE_ENTRY\""}"" ]],
				 ""CommittedHandles"": [ 20, [ ""Pointer"", ""{\""target\"":\""_RTL_HANDLE_TABLE_ENTRY\""}"" ]],
				 ""UnCommittedHandles"": [ 24, [ ""Pointer"", ""{\""target\"":\""_RTL_HANDLE_TABLE_ENTRY\""}"" ]],
				 ""MaxReservedHandles"": [ 28, [ ""Pointer"", ""{\""target\"":\""_RTL_HANDLE_TABLE_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaximumNumberOfHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SizeOfHandleTableEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 FreeHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 CommittedHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 UnCommittedHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MaxReservedHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _POP_IDLE_HANDLER
 
	public class _POP_IDLE_HANDLER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_IDLE_HANDLER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_IDLE_HANDLER"": [ 32, {
				 ""Latency"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TimeCheck"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DemoteLimit"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PromoteLimit"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PromoteCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Demote"": [ 20, [ ""Byte"", ""null"" ]],
				 ""Promote"": [ 21, [ ""Byte"", ""null"" ]],
				 ""PromotePercent"": [ 22, [ ""Byte"", ""null"" ]],
				 ""DemotePercent"": [ 23, [ ""Byte"", ""null"" ]],
				 ""State"": [ 24, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 25, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""IdleFunction"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DemoteLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 PromoteLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PromoteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte Demote{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte Promote{ get { return _StructureData[_BufferOffset +21]; } }
		public Byte PromotePercent{ get { return _StructureData[_BufferOffset +22]; } }
		public Byte DemotePercent{ get { return _StructureData[_BufferOffset +23]; } }
		public Byte State{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 25];
				return returnValue;
			}
		}
		public UInt32 IdleFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region SYSTEM_POWER_CAPABILITIES
 
	public class SYSTEM_POWER_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public SYSTEM_POWER_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""SYSTEM_POWER_CAPABILITIES"": [ 76, {
				 ""PowerButtonPresent"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SleepButtonPresent"": [ 1, [ ""Byte"", ""null"" ]],
				 ""LidPresent"": [ 2, [ ""Byte"", ""null"" ]],
				 ""SystemS1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SystemS2"": [ 4, [ ""Byte"", ""null"" ]],
				 ""SystemS3"": [ 5, [ ""Byte"", ""null"" ]],
				 ""SystemS4"": [ 6, [ ""Byte"", ""null"" ]],
				 ""SystemS5"": [ 7, [ ""Byte"", ""null"" ]],
				 ""HiberFilePresent"": [ 8, [ ""Byte"", ""null"" ]],
				 ""FullWake"": [ 9, [ ""Byte"", ""null"" ]],
				 ""VideoDimPresent"": [ 10, [ ""Byte"", ""null"" ]],
				 ""ApmPresent"": [ 11, [ ""Byte"", ""null"" ]],
				 ""UpsPresent"": [ 12, [ ""Byte"", ""null"" ]],
				 ""ThermalControl"": [ 13, [ ""Byte"", ""null"" ]],
				 ""ProcessorThrottle"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ProcessorMinThrottle"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ProcessorMaxThrottle"": [ 16, [ ""Byte"", ""null"" ]],
				 ""spare2"": [ 17, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""DiskSpinDown"": [ 21, [ ""Byte"", ""null"" ]],
				 ""spare3"": [ 22, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""SystemBatteriesPresent"": [ 30, [ ""Byte"", ""null"" ]],
				 ""BatteriesAreShortTerm"": [ 31, [ ""Byte"", ""null"" ]],
				 ""BatteryScale"": [ 32, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""AcOnLineWake"": [ 56, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SoftLidWake"": [ 60, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""RtcWake"": [ 64, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""MinDeviceWakeState"": [ 68, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DefaultLowLatencyWake"": [ 72, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte PowerButtonPresent{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte SleepButtonPresent{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte LidPresent{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte SystemS1{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte SystemS2{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte SystemS3{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte SystemS4{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte SystemS5{ get { return _StructureData[_BufferOffset +7]; } }
		public Byte HiberFilePresent{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte FullWake{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte VideoDimPresent{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte ApmPresent{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte UpsPresent{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte ThermalControl{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte ProcessorThrottle{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ProcessorMinThrottle{ get { return _StructureData[_BufferOffset +15]; } }
		public Byte ProcessorMaxThrottle{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte[] spare2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 17];
				return returnValue;
			}
		}
		public Byte DiskSpinDown{ get { return _StructureData[_BufferOffset +21]; } }
		public Byte[] spare3
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 22];
				return returnValue;
			}
		}
		public Byte SystemBatteriesPresent{ get { return _StructureData[_BufferOffset +30]; } }
		public Byte BatteriesAreShortTerm{ get { return _StructureData[_BufferOffset +31]; } }
		public BATTERY_REPORTING_SCALE[] BatteryScale
		{
			get
			{
				BATTERY_REPORTING_SCALE[] returnValue = new BATTERY_REPORTING_SCALE[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new BATTERY_REPORTING_SCALE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE AcOnLineWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _SYSTEM_POWER_STATE SoftLidWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _SYSTEM_POWER_STATE RtcWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _SYSTEM_POWER_STATE MinDeviceWakeState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public _SYSTEM_POWER_STATE DefaultLowLatencyWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _DEVOBJ_EXTENSION
 
	public class _DEVOBJ_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVOBJ_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVOBJ_EXTENSION"": [ 44, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DeviceObject"": [ 4, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""PowerFlags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Dope"": [ 12, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT_POWER_EXTENSION\""}"" ]],
				 ""ExtensionFlags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DeviceNode"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AttachedTo"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""StartIoCount"": [ 28, [ ""Int32"", ""null"" ]],
				 ""StartIoKey"": [ 32, [ ""Int32"", ""null"" ]],
				 ""StartIoFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Vpb"": [ 40, [ ""Pointer"", ""{\""target\"":\""_VPB\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PowerFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Dope { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ExtensionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DeviceNode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 AttachedTo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Int32 StartIoCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public Int32 StartIoKey { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 StartIoFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Vpb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _FLOATING_SAVE_AREA
 
	public class _FLOATING_SAVE_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FLOATING_SAVE_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FLOATING_SAVE_AREA"": [ 112, {
				 ""ControlWord"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StatusWord"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TagWord"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ErrorOffset"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ErrorSelector"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataOffset"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DataSelector"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""RegisterArea"": [ 28, [ ""Array"", ""{\""count\"":80,\""target\"":\""Byte\""}"" ]],
				 ""Cr0NpxState"": [ 108, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ControlWord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StatusWord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TagWord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ErrorOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ErrorSelector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DataSelector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte[] RegisterArea
		{
			get
			{
				Byte[] returnValue = new Byte[80];
				for(int i=0; i<80; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 28];
				return returnValue;
			}
		}
		public UInt32 Cr0NpxState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
	}
	#endregion
	#region _DBGKD_GET_VERSION64
 
	public class _DBGKD_GET_VERSION64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_VERSION64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_VERSION64"": [ 40, {
				 ""MajorVersion"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ProtocolVersion"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""MachineType"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""MaxPacketType"": [ 10, [ ""Byte"", ""null"" ]],
				 ""MaxStateChange"": [ 11, [ ""Byte"", ""null"" ]],
				 ""MaxManipulate"": [ 12, [ ""Byte"", ""null"" ]],
				 ""Simulation"": [ 13, [ ""Byte"", ""null"" ]],
				 ""Unused"": [ 14, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""KernBase"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PsLoadedModuleList"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DebuggerDataList"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 ProtocolVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 MachineType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte MaxPacketType{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte MaxStateChange{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte MaxManipulate{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte Simulation{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt16[] Unused
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 14);
				return returnValue;
			}
		}
		public UInt64 KernBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PsLoadedModuleList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DebuggerDataList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MMVIEW
 
	public class _MMVIEW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVIEW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVIEW"": [ 8, {
				 ""Entry"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ControlArea"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Entry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _TOKEN
 
	public class _TOKEN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN"": [ 168, {
				 ""TokenSource"": [ 0, [ ""_TOKEN_SOURCE"", ""null"" ]],
				 ""TokenId"": [ 16, [ ""_LUID"", ""null"" ]],
				 ""AuthenticationId"": [ 24, [ ""_LUID"", ""null"" ]],
				 ""ParentTokenId"": [ 32, [ ""_LUID"", ""null"" ]],
				 ""ExpirationTime"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TokenLock"": [ 48, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]],
				 ""AuditPolicy"": [ 56, [ ""_SEP_AUDIT_POLICY"", ""null"" ]],
				 ""ModifiedId"": [ 64, [ ""_LUID"", ""null"" ]],
				 ""SessionId"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""UserAndGroupCount"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""RestrictedSidCount"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""PrivilegeCount"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""VariableLength"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""DynamicCharged"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DynamicAvailable"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""DefaultOwnerIndex"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""UserAndGroups"": [ 104, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""RestrictedSids"": [ 108, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""PrimaryGroup"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Privileges"": [ 116, [ ""Pointer"", ""{\""target\"":\""_LUID_AND_ATTRIBUTES\""}"" ]],
				 ""DynamicPart"": [ 120, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""DefaultDacl"": [ 124, [ ""Pointer"", ""{\""target\"":\""_ACL\""}"" ]],
				 ""TokenType"": [ 128, [ ""Enumeration"", ""{\""enum_name\"":\""_TOKEN_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ImpersonationLevel"": [ 132, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""TokenFlags"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""TokenInUse"": [ 140, [ ""Byte"", ""null"" ]],
				 ""ProxyData"": [ 144, [ ""Pointer"", ""{\""target\"":\""_SECURITY_TOKEN_PROXY_DATA\""}"" ]],
				 ""AuditData"": [ 148, [ ""Pointer"", ""{\""target\"":\""_SECURITY_TOKEN_AUDIT_DATA\""}"" ]],
				 ""OriginatingLogonSession"": [ 152, [ ""_LUID"", ""null"" ]],
				 ""VariablePart"": [ 160, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _TOKEN_SOURCE TokenSource
		{
			get
			{
				_TOKEN_SOURCE returnValue = new _TOKEN_SOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LUID TokenId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LUID AuthenticationId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LUID ParentTokenId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ExpirationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 TokenLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _SEP_AUDIT_POLICY AuditPolicy
		{
			get
			{
				_SEP_AUDIT_POLICY returnValue = new _SEP_AUDIT_POLICY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LUID ModifiedId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 UserAndGroupCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 RestrictedSidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 PrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 VariableLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 DynamicCharged { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 DynamicAvailable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 DefaultOwnerIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 UserAndGroups { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 RestrictedSids { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 PrimaryGroup { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 Privileges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 DynamicPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 DefaultDacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public _TOKEN_TYPE TokenType { get { return (_TOKEN_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 TokenFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public Byte TokenInUse{ get { return _StructureData[_BufferOffset +140]; } }
		public UInt32 ProxyData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 AuditData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public _LUID OriginatingLogonSession
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public UInt32 VariablePart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
	}
	#endregion
	#region _TEB
 
	public class _TEB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4024; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB"": [ 4024, {
				 ""NtTib"": [ 0, [ ""_NT_TIB"", ""null"" ]],
				 ""EnvironmentPointer"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ClientId"": [ 32, [ ""_CLIENT_ID"", ""null"" ]],
				 ""ActiveRpcHandle"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadLocalStoragePointer"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessEnvironmentBlock"": [ 48, [ ""Pointer"", ""{\""target\"":\""_PEB\""}"" ]],
				 ""LastErrorValue"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""CountOfOwnedCriticalSections"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""CsrClientThread"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32ThreadInfo"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""User32Reserved"": [ 68, [ ""Array"", ""{\""count\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""UserReserved"": [ 172, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WOW32Reserved"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentLocale"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""FpSoftwareStatusRegister"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""SystemReserved1"": [ 204, [ ""Array"", ""{\""count\"":54,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""ExceptionCode"": [ 420, [ ""Int32"", ""null"" ]],
				 ""ActivationContextStack"": [ 424, [ ""_ACTIVATION_CONTEXT_STACK"", ""null"" ]],
				 ""SpareBytes1"": [ 444, [ ""Array"", ""{\""count\"":24,\""target\"":\""Byte\""}"" ]],
				 ""GdiTebBatch"": [ 468, [ ""_GDI_TEB_BATCH"", ""null"" ]],
				 ""RealClientId"": [ 1716, [ ""_CLIENT_ID"", ""null"" ]],
				 ""GdiCachedProcessHandle"": [ 1724, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GdiClientPID"": [ 1728, [ ""UInt32"", ""null"" ]],
				 ""GdiClientTID"": [ 1732, [ ""UInt32"", ""null"" ]],
				 ""GdiThreadLocalInfo"": [ 1736, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32ClientInfo"": [ 1740, [ ""Array"", ""{\""count\"":62,\""target\"":\""UInt32\""}"" ]],
				 ""glDispatchTable"": [ 1988, [ ""Array"", ""{\""count\"":233,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""glReserved1"": [ 2920, [ ""Array"", ""{\""count\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""glReserved2"": [ 3036, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glSectionInfo"": [ 3040, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glSection"": [ 3044, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glTable"": [ 3048, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glCurrentRC"": [ 3052, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glContext"": [ 3056, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LastStatusValue"": [ 3060, [ ""UInt32"", ""null"" ]],
				 ""StaticUnicodeString"": [ 3064, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""StaticUnicodeBuffer"": [ 3072, [ ""Array"", ""{\""count\"":261,\""target\"":\""UInt16\""}"" ]],
				 ""DeallocationStack"": [ 3596, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsSlots"": [ 3600, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""TlsLinks"": [ 3856, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Vdm"": [ 3864, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForNtRpc"": [ 3868, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DbgSsReserved"": [ 3872, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""HardErrorsAreDisabled"": [ 3880, [ ""UInt32"", ""null"" ]],
				 ""Instrumentation"": [ 3884, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""WinSockData"": [ 3948, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GdiBatchCount"": [ 3952, [ ""UInt32"", ""null"" ]],
				 ""InDbgPrint"": [ 3956, [ ""Byte"", ""null"" ]],
				 ""FreeStackOnTermination"": [ 3957, [ ""Byte"", ""null"" ]],
				 ""HasFiberData"": [ 3958, [ ""Byte"", ""null"" ]],
				 ""IdealProcessor"": [ 3959, [ ""Byte"", ""null"" ]],
				 ""Spare3"": [ 3960, [ ""UInt32"", ""null"" ]],
				 ""ReservedForPerf"": [ 3964, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForOle"": [ 3968, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WaitingOnLoaderLock"": [ 3972, [ ""UInt32"", ""null"" ]],
				 ""Wx86Thread"": [ 3976, [ ""_Wx86ThreadState"", ""null"" ]],
				 ""TlsExpansionSlots"": [ 3988, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""ImpersonationLocale"": [ 3992, [ ""UInt32"", ""null"" ]],
				 ""IsImpersonating"": [ 3996, [ ""UInt32"", ""null"" ]],
				 ""NlsCache"": [ 4000, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""pShimData"": [ 4004, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HeapVirtualAffinity"": [ 4008, [ ""UInt32"", ""null"" ]],
				 ""CurrentTransactionHandle"": [ 4012, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveFrame"": [ 4016, [ ""Pointer"", ""{\""target\"":\""_TEB_ACTIVE_FRAME\""}"" ]],
				 ""SafeThunkCall"": [ 4020, [ ""Byte"", ""null"" ]],
				 ""BooleanSpare"": [ 4021, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _NT_TIB NtTib
		{
			get
			{
				_NT_TIB returnValue = new _NT_TIB(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 EnvironmentPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _CLIENT_ID ClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 ActiveRpcHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ThreadLocalStoragePointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ProcessEnvironmentBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 LastErrorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 CountOfOwnedCriticalSections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 CsrClientThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Win32ThreadInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32[] User32Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[26];
				for(int i=0; i<26; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 68);
				return returnValue;
			}
		}
		public UInt32[] UserReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 172);
				return returnValue;
			}
		}
		public UInt32 WOW32Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 CurrentLocale { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 FpSoftwareStatusRegister { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32[] SystemReserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[54];
				int size = 4;
				for(int i=0; i<54; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 204);
				return returnValue;
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 420); } }
		public _ACTIVATION_CONTEXT_STACK ActivationContextStack
		{
			get
			{
				_ACTIVATION_CONTEXT_STACK returnValue = new _ACTIVATION_CONTEXT_STACK(_StructureData, _BufferOffset + 424);
				return returnValue;
			}
		}
		public Byte[] SpareBytes1
		{
			get
			{
				Byte[] returnValue = new Byte[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 444];
				return returnValue;
			}
		}
		public _GDI_TEB_BATCH GdiTebBatch
		{
			get
			{
				_GDI_TEB_BATCH returnValue = new _GDI_TEB_BATCH(_StructureData, _BufferOffset + 468);
				return returnValue;
			}
		}
		public _CLIENT_ID RealClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 1716);
				return returnValue;
			}
		}
		public UInt32 GdiCachedProcessHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1724); } }
		public UInt32 GdiClientPID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1728); } }
		public UInt32 GdiClientTID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1732); } }
		public UInt32 GdiThreadLocalInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1736); } }
		public UInt32[] Win32ClientInfo
		{
			get
			{
				UInt32[] returnValue = new UInt32[62];
				for(int i=0; i<62; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 1740);
				return returnValue;
			}
		}
		public UInt32[] glDispatchTable
		{
			get
			{
				UInt32[] returnValue = new UInt32[233];
				int size = 4;
				for(int i=0; i<233; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 1988);
				return returnValue;
			}
		}
		public UInt32[] glReserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[29];
				for(int i=0; i<29; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 2920);
				return returnValue;
			}
		}
		public UInt32 glReserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3036); } }
		public UInt32 glSectionInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3040); } }
		public UInt32 glSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3044); } }
		public UInt32 glTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3048); } }
		public UInt32 glCurrentRC { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3052); } }
		public UInt32 glContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3056); } }
		public UInt32 LastStatusValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3060); } }
		public _UNICODE_STRING StaticUnicodeString
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 3064);
				return returnValue;
			}
		}
		public UInt16[] StaticUnicodeBuffer
		{
			get
			{
				UInt16[] returnValue = new UInt16[261];
				for(int i=0; i<261; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 3072);
				return returnValue;
			}
		}
		public UInt32 DeallocationStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3596); } }
		public UInt32[] TlsSlots
		{
			get
			{
				UInt32[] returnValue = new UInt32[64];
				int size = 4;
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 3600);
				return returnValue;
			}
		}
		public _LIST_ENTRY TlsLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 3856);
				return returnValue;
			}
		}
		public UInt32 Vdm { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3864); } }
		public UInt32 ReservedForNtRpc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3868); } }
		public UInt32[] DbgSsReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				int size = 4;
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 3872);
				return returnValue;
			}
		}
		public UInt32 HardErrorsAreDisabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3880); } }
		public UInt32[] Instrumentation
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				int size = 4;
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 3884);
				return returnValue;
			}
		}
		public UInt32 WinSockData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3948); } }
		public UInt32 GdiBatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3952); } }
		public Byte InDbgPrint{ get { return _StructureData[_BufferOffset +3956]; } }
		public Byte FreeStackOnTermination{ get { return _StructureData[_BufferOffset +3957]; } }
		public Byte HasFiberData{ get { return _StructureData[_BufferOffset +3958]; } }
		public Byte IdealProcessor{ get { return _StructureData[_BufferOffset +3959]; } }
		public UInt32 Spare3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3960); } }
		public UInt32 ReservedForPerf { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3964); } }
		public UInt32 ReservedForOle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3968); } }
		public UInt32 WaitingOnLoaderLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3972); } }
		public _Wx86ThreadState Wx86Thread
		{
			get
			{
				_Wx86ThreadState returnValue = new _Wx86ThreadState(_StructureData, _BufferOffset + 3976);
				return returnValue;
			}
		}
		public UInt32 TlsExpansionSlots { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3988); } }
		public UInt32 ImpersonationLocale { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3992); } }
		public UInt32 IsImpersonating { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3996); } }
		public UInt32 NlsCache { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4000); } }
		public UInt32 pShimData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4004); } }
		public UInt32 HeapVirtualAffinity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4008); } }
		public UInt32 CurrentTransactionHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4012); } }
		public UInt32 ActiveFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4016); } }
		public Byte SafeThunkCall{ get { return _StructureData[_BufferOffset +4020]; } }
		public Byte[] BooleanSpare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4021];
				return returnValue;
			}
		}
	}
	#endregion
	#region PCI_SECONDARY_EXTENSION
 
	public class PCI_SECONDARY_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PCI_SECONDARY_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PCI_SECONDARY_EXTENSION"": [ 12, {
				 ""List"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""ExtensionType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""PCI_SIGNATURE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Destructor"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY List
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public PCI_SIGNATURE ExtensionType { get { return (PCI_SIGNATURE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Destructor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PCI_COMMON_CONFIG
 
	public class _PCI_COMMON_CONFIG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_COMMON_CONFIG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_COMMON_CONFIG"": [ 256, {
				 ""VendorID"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""DeviceID"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Command"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Status"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""RevisionID"": [ 8, [ ""Byte"", ""null"" ]],
				 ""ProgIf"": [ 9, [ ""Byte"", ""null"" ]],
				 ""SubClass"": [ 10, [ ""Byte"", ""null"" ]],
				 ""BaseClass"": [ 11, [ ""Byte"", ""null"" ]],
				 ""CacheLineSize"": [ 12, [ ""Byte"", ""null"" ]],
				 ""LatencyTimer"": [ 13, [ ""Byte"", ""null"" ]],
				 ""HeaderType"": [ 14, [ ""Byte"", ""null"" ]],
				 ""BIST"": [ 15, [ ""Byte"", ""null"" ]],
				 ""u"": [ 16, [ ""__unnamed"", ""null"" ]],
				 ""DeviceSpecific"": [ 64, [ ""Array"", ""{\""count\"":192,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 VendorID { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 DeviceID { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Command { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Status { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Byte RevisionID{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte ProgIf{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte SubClass{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte BaseClass{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte CacheLineSize{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte LatencyTimer{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte HeaderType{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte BIST{ get { return _StructureData[_BufferOffset +15]; } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte[] DeviceSpecific
		{
			get
			{
				Byte[] returnValue = new Byte[192];
				for(int i=0; i<192; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 64];
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_FREE_ENTRY_EXTRA
 
	public class _HEAP_FREE_ENTRY_EXTRA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_FREE_ENTRY_EXTRA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_FREE_ENTRY_EXTRA"": [ 4, {
				 ""TagIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""FreeBackTraceIndex"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 FreeBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _X86_DBGKD_CONTROL_SET
 
	public class _X86_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _X86_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_X86_DBGKD_CONTROL_SET"": [ 16, {
				 ""TraceFlag"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TraceFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Dr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentSymbolStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CurrentSymbolEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _SECTION_IMAGE_INFORMATION
 
	public class _SECTION_IMAGE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECTION_IMAGE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECTION_IMAGE_INFORMATION"": [ 48, {
				 ""TransferAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ZeroBits"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MaximumStackSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CommittedStackSize"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SubSystemType"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SubSystemMinorVersion"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""SubSystemMajorVersion"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""SubSystemVersion"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""GpValue"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ImageCharacteristics"": [ 28, [ ""UInt16"", ""null"" ]],
				 ""DllCharacteristics"": [ 30, [ ""UInt16"", ""null"" ]],
				 ""Machine"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""ImageContainsCode"": [ 34, [ ""Byte"", ""null"" ]],
				 ""Spare1"": [ 35, [ ""Byte"", ""null"" ]],
				 ""LoaderFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""ImageFileSize"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 44, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TransferAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ZeroBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MaximumStackSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CommittedStackSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SubSystemType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16 SubSystemMinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 SubSystemMajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 SubSystemVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 GpValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt16 ImageCharacteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 28); } }
		public UInt16 DllCharacteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 30); } }
		public UInt16 Machine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public Byte ImageContainsCode{ get { return _StructureData[_BufferOffset +34]; } }
		public Byte Spare1{ get { return _StructureData[_BufferOffset +35]; } }
		public UInt32 LoaderFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 ImageFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 44);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POOL_TRACKER_TABLE
 
	public class _POOL_TRACKER_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_TRACKER_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_TRACKER_TABLE"": [ 28, {
				 ""Key"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NonPagedAllocs"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NonPagedFrees"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NonPagedBytes"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PagedAllocs"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PagedFrees"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PagedBytes"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NonPagedAllocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NonPagedFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NonPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PagedAllocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PagedFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MDL
 
	public class _MDL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MDL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MDL"": [ 28, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Size"": [ 4, [ ""Int16"", ""null"" ]],
				 ""MdlFlags"": [ 6, [ ""Int16"", ""null"" ]],
				 ""Process"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""MappedSystemVa"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartVa"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ByteCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ByteOffset"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 4); } }
		public Int16 MdlFlags { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 Process { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MappedSystemVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 StartVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ByteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ByteOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _KNODE
 
	public class _KNODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KNODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KNODE"": [ 48, {
				 ""ProcessorMask"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Color"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MmShiftedColor"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""FreeCount"": [ 12, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DeadStackList"": [ 24, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PfnDereferenceSListHead"": [ 32, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PfnDeferredList"": [ 40, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]],
				 ""Seed"": [ 44, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 45, [ ""_flags"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ProcessorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Color { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MmShiftedColor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32[] FreeCount
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public _SLIST_HEADER DeadStackList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _SLIST_HEADER PfnDereferenceSListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 PfnDeferredList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Byte Seed{ get { return _StructureData[_BufferOffset +44]; } }
		public _flags Flags
		{
			get
			{
				_flags returnValue = new _flags(_StructureData, _BufferOffset + 45);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PHYSICAL_MEMORY_DESCRIPTOR
 
	public class _PHYSICAL_MEMORY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PHYSICAL_MEMORY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PHYSICAL_MEMORY_DESCRIPTOR"": [ 16, {
				 ""NumberOfRuns"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPages"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Run"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NumberOfRuns { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NumberOfPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _PHYSICAL_MEMORY_RUN[] Run
		{
			get
			{
				_PHYSICAL_MEMORY_RUN[] returnValue = new _PHYSICAL_MEMORY_RUN[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PHYSICAL_MEMORY_RUN(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PI_BUS_EXTENSION
 
	public class _PI_BUS_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PI_BUS_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PI_BUS_EXTENSION"": [ 68, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NumberCSNs"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ReadDataPort"": [ 8, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""DataPortMapped"": [ 12, [ ""Byte"", ""null"" ]],
				 ""AddressPort"": [ 16, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""AddrPortMapped"": [ 20, [ ""Byte"", ""null"" ]],
				 ""CommandPort"": [ 24, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""CmdPortMapped"": [ 28, [ ""Byte"", ""null"" ]],
				 ""NextSlotNumber"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DeviceList"": [ 36, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""CardList"": [ 40, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""PhysicalBusDevice"": [ 44, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FunctionalBusDevice"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""AttachedDevice"": [ 52, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""BusNumber"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""SystemPowerState"": [ 60, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DevicePowerState"": [ 64, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NumberCSNs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ReadDataPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte DataPortMapped{ get { return _StructureData[_BufferOffset +12]; } }
		public UInt32 AddressPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte AddrPortMapped{ get { return _StructureData[_BufferOffset +20]; } }
		public UInt32 CommandPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte CmdPortMapped{ get { return _StructureData[_BufferOffset +28]; } }
		public UInt32 NextSlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _SINGLE_LIST_ENTRY DeviceList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY CardList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 PhysicalBusDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 FunctionalBusDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 AttachedDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _SYSTEM_POWER_STATE SystemPowerState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _DEVICE_POWER_STATE DevicePowerState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _VI_DEADLOCK_THREAD
 
	public class _VI_DEADLOCK_THREAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_THREAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_THREAD"": [ 28, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""CurrentSpinNode"": [ 4, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_NODE\""}"" ]],
				 ""CurrentOtherNode"": [ 8, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_NODE\""}"" ]],
				 ""ListEntry"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NodeCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PagingCount"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Thread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CurrentSpinNode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentOtherNode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 NodeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PagingCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MMEXTEND_INFO
 
	public class _MMEXTEND_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMEXTEND_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMEXTEND_INFO"": [ 16, {
				 ""CommittedSize"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ReferenceCount"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CommittedSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _IMAGE_DEBUG_DIRECTORY
 
	public class _IMAGE_DEBUG_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_DEBUG_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_DEBUG_DIRECTORY"": [ 28, {
				 ""Characteristics"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TimeDateStamp"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MajorVersion"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Type"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfData"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AddressOfRawData"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PointerToRawData"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Characteristics { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SizeOfData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 AddressOfRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PointerToRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PCI_INTERFACE
 
	public class _PCI_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_INTERFACE"": [ 28, {
				 ""InterfaceType"": [ 0, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]],
				 ""MinSize"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""MinVersion"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""MaxVersion"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""ReferenceCount"": [ 12, [ ""Int32"", ""null"" ]],
				 ""Signature"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""PCI_SIGNATURE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Constructor"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Initializer"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 InterfaceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 MinSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 MinVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 MaxVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public PCI_SIGNATURE Signature { get { return (PCI_SIGNATURE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Constructor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Initializer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _FILE_NETWORK_OPEN_INFORMATION
 
	public class _FILE_NETWORK_OPEN_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_NETWORK_OPEN_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_NETWORK_OPEN_INFORMATION"": [ 56, {
				 ""CreationTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastAccessTime"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastWriteTime"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ChangeTime"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AllocationSize"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""EndOfFile"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileAttributes"": [ 48, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER CreationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastAccessTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ChangeTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER AllocationSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER EndOfFile
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 FileAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _MMVAD
 
	public class _MMVAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD"": [ 40, {
				 ""StartingVpn"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EndingVpn"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Parent"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""LeftChild"": [ 12, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""RightChild"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""u"": [ 20, [ ""__unnamed"", ""null"" ]],
				 ""ControlArea"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""FirstPrototypePte"": [ 28, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""LastContiguousPte"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""u2"": [ 36, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StartingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LeftChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 RightChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FirstPrototypePte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LastContiguousPte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public __unnamed u2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMMOD_WRITER_MDL_ENTRY
 
	public class _MMMOD_WRITER_MDL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMMOD_WRITER_MDL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMMOD_WRITER_MDL_ENTRY"": [ 88, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WriteOffset"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""u"": [ 16, [ ""__unnamed"", ""null"" ]],
				 ""Irp"": [ 24, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""LastPageToWrite"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PagingListHead"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMMOD_WRITER_LISTHEAD\""}"" ]],
				 ""CurrentList"": [ 36, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""PagingFile"": [ 40, [ ""Pointer"", ""{\""target\"":\""_MMPAGING_FILE\""}"" ]],
				 ""File"": [ 44, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ControlArea"": [ 48, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""FileResource"": [ 52, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]],
				 ""Mdl"": [ 56, [ ""_MDL"", ""null"" ]],
				 ""Page"": [ 84, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER WriteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Irp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LastPageToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PagingListHead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 CurrentList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 PagingFile { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 File { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ControlArea { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 FileResource { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _MDL Mdl
		{
			get
			{
				_MDL returnValue = new _MDL(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32[] Page
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 84);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_POWER_ACTION
 
	public class _POP_POWER_ACTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_POWER_ACTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_POWER_ACTION"": [ 64, {
				 ""Updates"": [ 0, [ ""Byte"", ""null"" ]],
				 ""State"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Shutdown"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Action"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_ACTION\"",\""target\"":\""UInt32\""}"" ]],
				 ""LightestState"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 16, [ ""Int32"", ""null"" ]],
				 ""IrpMinor"": [ 20, [ ""Byte"", ""null"" ]],
				 ""SystemState"": [ 24, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NextSystemState"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ShutdownBugCode"": [ 32, [ ""Pointer"", ""{\""target\"":\""_POP_SHUTDOWN_BUG_CHECK\""}"" ]],
				 ""DevState"": [ 36, [ ""Pointer"", ""{\""target\"":\""_POP_DEVICE_SYS_STATE\""}"" ]],
				 ""HiberContext"": [ 40, [ ""Pointer"", ""{\""target\"":\""_POP_HIBER_CONTEXT\""}"" ]],
				 ""LastWakeState"": [ 44, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""WakeTime"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""SleepTime"": [ 56, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Updates{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte State{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Shutdown{ get { return _StructureData[_BufferOffset +2]; } }
		public POWER_ACTION Action { get { return (POWER_ACTION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SYSTEM_POWER_STATE LightestState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Byte IrpMinor{ get { return _StructureData[_BufferOffset +20]; } }
		public _SYSTEM_POWER_STATE SystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _SYSTEM_POWER_STATE NextSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 ShutdownBugCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DevState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 HiberContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _SYSTEM_POWER_STATE LastWakeState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 WakeTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 SleepTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _IO_STATUS_BLOCK
 
	public class _IO_STATUS_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_STATUS_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_STATUS_BLOCK"": [ 8, {
				 ""Status"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Pointer"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Information"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Pointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Information { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LPCP_MESSAGE
 
	public class _LPCP_MESSAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_MESSAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_MESSAGE"": [ 48, {
				 ""Entry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeEntry"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Reserved0"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SenderPort"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RepliedToThread"": [ 12, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""PortContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Request"": [ 24, [ ""_PORT_MESSAGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY FreeEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Reserved0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SenderPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 RepliedToThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PortContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _PORT_MESSAGE Request
		{
			get
			{
				_PORT_MESSAGE returnValue = new _PORT_MESSAGE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMVAD_SHORT
 
	public class _MMVAD_SHORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_SHORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_SHORT"": [ 24, {
				 ""StartingVpn"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EndingVpn"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Parent"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""LeftChild"": [ 12, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""RightChild"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMVAD\""}"" ]],
				 ""u"": [ 20, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StartingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LeftChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 RightChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ACCESS_STATE
 
	public class _ACCESS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACCESS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 116; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACCESS_STATE"": [ 116, {
				 ""OperationID"": [ 0, [ ""_LUID"", ""null"" ]],
				 ""SecurityEvaluated"": [ 8, [ ""Byte"", ""null"" ]],
				 ""GenerateAudit"": [ 9, [ ""Byte"", ""null"" ]],
				 ""GenerateOnClose"": [ 10, [ ""Byte"", ""null"" ]],
				 ""PrivilegesAllocated"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""RemainingDesiredAccess"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PreviouslyGrantedAccess"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""OriginalDesiredAccess"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SubjectSecurityContext"": [ 28, [ ""_SECURITY_SUBJECT_CONTEXT"", ""null"" ]],
				 ""SecurityDescriptor"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AuxData"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Privileges"": [ 52, [ ""__unnamed"", ""null"" ]],
				 ""AuditPrivileges"": [ 96, [ ""Byte"", ""null"" ]],
				 ""ObjectName"": [ 100, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ObjectTypeName"": [ 108, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LUID OperationID
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte SecurityEvaluated{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte GenerateAudit{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte GenerateOnClose{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte PrivilegesAllocated{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 RemainingDesiredAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PreviouslyGrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 OriginalDesiredAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext
		{
			get
			{
				_SECURITY_SUBJECT_CONTEXT returnValue = new _SECURITY_SUBJECT_CONTEXT(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 SecurityDescriptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 AuxData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public __unnamed Privileges
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 52);
				return returnValue;
			}
		}
		public Byte AuditPrivileges{ get { return _StructureData[_BufferOffset +96]; } }
		public _UNICODE_STRING ObjectName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 100);
				return returnValue;
			}
		}
		public _UNICODE_STRING ObjectTypeName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 108);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PNP_DEVICE_EVENT_ENTRY
 
	public class _PNP_DEVICE_EVENT_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_EVENT_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_EVENT_ENTRY"": [ 88, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Argument"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CallerEvent"": [ 12, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Callback"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VetoType"": [ 24, [ ""Pointer"", ""{\""target\"":\""_PNP_VETO_TYPE\""}"" ]],
				 ""VetoName"": [ 28, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""Data"": [ 32, [ ""_PLUGPLAY_EVENT_BLOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Argument { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CallerEvent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Callback { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 VetoType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 VetoName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _PLUGPLAY_EVENT_BLOCK Data
		{
			get
			{
				_PLUGPLAY_EVENT_BLOCK returnValue = new _PLUGPLAY_EVENT_BLOCK(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PRIVATE_CACHE_MAP_FLAGS
 
	public class _PRIVATE_CACHE_MAP_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PRIVATE_CACHE_MAP_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PRIVATE_CACHE_MAP_FLAGS"": [ 4, {
				 ""DontUse"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadAheadActive"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ReadAheadEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""Available"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DontUse
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadAheadActive
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadAheadEnabled
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 Available
		{
			get
			{
				// start: 18  end: 32  Mask: 11111111111111000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294705152) >> 18;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PNP_DEVICE_EVENT_LIST
 
	public class _PNP_DEVICE_EVENT_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_EVENT_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_EVENT_LIST"": [ 76, {
				 ""Status"": [ 0, [ ""Int32"", ""null"" ]],
				 ""EventQueueMutex"": [ 4, [ ""_KMUTANT"", ""null"" ]],
				 ""Lock"": [ 36, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""List"": [ 68, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _KMUTANT EventQueueMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _FAST_MUTEX Lock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 68);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KPROCESSOR_STATE
 
	public class _KPROCESSOR_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPROCESSOR_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 800; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPROCESSOR_STATE"": [ 800, {
				 ""ContextFrame"": [ 0, [ ""_CONTEXT"", ""null"" ]],
				 ""SpecialRegisters"": [ 716, [ ""_KSPECIAL_REGISTERS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _CONTEXT ContextFrame
		{
			get
			{
				_CONTEXT returnValue = new _CONTEXT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KSPECIAL_REGISTERS SpecialRegisters
		{
			get
			{
				_KSPECIAL_REGISTERS returnValue = new _KSPECIAL_REGISTERS(_StructureData, _BufferOffset + 716);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPTE_TRANSITION
 
	public class _MMPTE_TRANSITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_TRANSITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_TRANSITION"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Write"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Owner"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""WriteThrough"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""CacheDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFrameNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":38,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":38,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Write
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Owner
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 WriteThrough
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 CacheDisable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Transition
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFrameNumber
		{
			get
			{
				// start: 12  end: 38  Mask: 00000011111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 274877902848) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 38  end: 64  Mask: 0000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446743798831644672) >> 38;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _TOKEN_SOURCE
 
	public class _TOKEN_SOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_SOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_SOURCE"": [ 16, {
				 ""SourceName"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Char\""}"" ]],
				 ""SourceIdentifier"": [ 8, [ ""_LUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Char[] SourceName
		{
			get
			{
				Char[] returnValue = new Char[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LUID SourceIdentifier
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _STRING
 
	public class _STRING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _STRING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_STRING"": [ 8, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaximumLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Buffer"": [ 4, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaximumLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Buffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MMVAD_FLAGS2
 
	public class _MMVAD_FLAGS2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_FLAGS2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_FLAGS2"": [ 4, {
				 ""FileOffset"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""SecNoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""OneSecured"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""MultipleSecured"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""ReadOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""LongVad"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""ExtendableFile"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""Inherit"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""CopyOnWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FileOffset
		{
			get
			{
				// start: 0  end: 24  Mask: 111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777215) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 SecNoChange
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 OneSecured
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 MultipleSecured
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadOnly
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 LongVad
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 ExtendableFile
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 Inherit
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 CopyOnWrite
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _flags
 
	public class _flags
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _flags(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_flags"": [ 1, {
				 ""Removable"": [ 0, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Removable{ get { return _StructureData[_BufferOffset +0]; } }
	}
	#endregion
	#region _CM_KEY_SECURITY_CACHE
 
	public class _CM_KEY_SECURITY_CACHE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_SECURITY_CACHE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_SECURITY_CACHE"": [ 40, {
				 ""Cell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ConvKey"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DescriptorLength"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Descriptor"": [ 20, [ ""_SECURITY_DESCRIPTOR_RELATIVE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ConvKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 DescriptorLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _SECURITY_DESCRIPTOR_RELATIVE Descriptor
		{
			get
			{
				_SECURITY_DESCRIPTOR_RELATIVE returnValue = new _SECURITY_DESCRIPTOR_RELATIVE(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROCESSOR_POWER_POLICY_INFO
 
	public class _PROCESSOR_POWER_POLICY_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_POWER_POLICY_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_POWER_POLICY_INFO"": [ 20, {
				 ""TimeCheck"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DemoteLimit"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PromoteLimit"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DemotePercent"": [ 12, [ ""Byte"", ""null"" ]],
				 ""PromotePercent"": [ 13, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 14, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""AllowDemotion"": [ 16, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""AllowPromotion"": [ 16, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 16, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DemoteLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PromoteLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte DemotePercent{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte PromotePercent{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 14];
				return returnValue;
			}
		}
		public UInt32 AllowDemotion
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 16);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 AllowPromotion
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 16);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 16);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _ARBITER_INSTANCE
 
	public class _ARBITER_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 156; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_INSTANCE"": [ 156, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MutexEvent"": [ 4, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Name"": [ 8, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""ResourceType"": [ 12, [ ""Int32"", ""null"" ]],
				 ""Allocation"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_RANGE_LIST\""}"" ]],
				 ""PossibleAllocation"": [ 20, [ ""Pointer"", ""{\""target\"":\""_RTL_RANGE_LIST\""}"" ]],
				 ""OrderingList"": [ 24, [ ""_ARBITER_ORDERING_LIST"", ""null"" ]],
				 ""ReservedList"": [ 32, [ ""_ARBITER_ORDERING_LIST"", ""null"" ]],
				 ""ReferenceCount"": [ 40, [ ""Int32"", ""null"" ]],
				 ""Interface"": [ 44, [ ""Pointer"", ""{\""target\"":\""_ARBITER_INTERFACE\""}"" ]],
				 ""AllocationStackMaxSize"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""AllocationStack"": [ 52, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ALLOCATION_STATE\""}"" ]],
				 ""UnpackRequirement"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PackResource"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnpackResource"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ScoreRequirement"": [ 68, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TestAllocation"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RetestAllocation"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommitAllocation"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RollbackAllocation"": [ 84, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BootAllocation"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryArbitrate"": [ 92, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryConflict"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AddReserved"": [ 100, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartArbiter"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreprocessEntry"": [ 108, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateEntry"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetNextAllocationRange"": [ 116, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FindSuitableRange"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AddAllocation"": [ 124, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BacktrackAllocation"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OverrideConflict"": [ 132, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TransactionInProgress"": [ 136, [ ""Byte"", ""null"" ]],
				 ""Extension"": [ 140, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BusDeviceObject"": [ 144, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ConflictCallbackContext"": [ 148, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConflictCallback"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MutexEvent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Name { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 ResourceType { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Allocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PossibleAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _ARBITER_ORDERING_LIST OrderingList
		{
			get
			{
				_ARBITER_ORDERING_LIST returnValue = new _ARBITER_ORDERING_LIST(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _ARBITER_ORDERING_LIST ReservedList
		{
			get
			{
				_ARBITER_ORDERING_LIST returnValue = new _ARBITER_ORDERING_LIST(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Interface { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 AllocationStackMaxSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 AllocationStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 UnpackRequirement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 PackResource { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 UnpackResource { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ScoreRequirement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 TestAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 RetestAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 CommitAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 RollbackAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 BootAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 QueryArbitrate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 QueryConflict { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 AddReserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 StartArbiter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 PreprocessEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 AllocateEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 GetNextAllocationRange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 FindSuitableRange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 AddAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 BacktrackAllocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 OverrideConflict { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public Byte TransactionInProgress{ get { return _StructureData[_BufferOffset +136]; } }
		public UInt32 Extension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 BusDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 ConflictCallbackContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 ConflictCallback { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _BUS_HANDLER
 
	public class _BUS_HANDLER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BUS_HANDLER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 108; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BUS_HANDLER"": [ 108, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ConfigurationType"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_BUS_DATA_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ParentHandler"": [ 20, [ ""Pointer"", ""{\""target\"":\""_BUS_HANDLER\""}"" ]],
				 ""BusData"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceControlExtensionSize"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""BusAddresses"": [ 32, [ ""Pointer"", ""{\""target\"":\""_SUPPORTED_RANGES\""}"" ]],
				 ""Reserved"": [ 36, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""GetBusData"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetBusData"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AdjustResourceList"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AssignSlotResources"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetInterruptVector"": [ 68, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TranslateBusAddress"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare1"": [ 76, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare2"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare3"": [ 84, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare4"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare5"": [ 92, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare6"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare7"": [ 100, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare8"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _BUS_DATA_TYPE ConfigurationType { get { return (_BUS_DATA_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ParentHandler { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BusData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DeviceControlExtensionSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 BusAddresses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 GetBusData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 SetBusData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 AdjustResourceList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 AssignSlotResources { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 GetInterruptVector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 TranslateBusAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 Spare1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 Spare2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Spare3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 Spare4 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 Spare5 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 Spare6 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 Spare7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 Spare8 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _PCI_MN_DISPATCH_TABLE
 
	public class _PCI_MN_DISPATCH_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_MN_DISPATCH_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_MN_DISPATCH_TABLE"": [ 8, {
				 ""DispatchStyle"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PCI_DISPATCH_STYLE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DispatchFunction"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _PCI_DISPATCH_STYLE DispatchStyle { get { return (_PCI_DISPATCH_STYLE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DispatchFunction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _POP_DEVICE_SYS_STATE
 
	public class _POP_DEVICE_SYS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_DEVICE_SYS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1568; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_DEVICE_SYS_STATE"": [ 1568, {
				 ""IrpMinor"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SystemState"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Event"": [ 8, [ ""_KEVENT"", ""null"" ]],
				 ""SpinLock"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Thread"": [ 28, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""GetNewDeviceList"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Order"": [ 36, [ ""_PO_DEVICE_NOTIFY_ORDER"", ""null"" ]],
				 ""Status"": [ 620, [ ""Int32"", ""null"" ]],
				 ""FailedDevice"": [ 624, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Waking"": [ 628, [ ""Byte"", ""null"" ]],
				 ""Cancelled"": [ 629, [ ""Byte"", ""null"" ]],
				 ""IgnoreErrors"": [ 630, [ ""Byte"", ""null"" ]],
				 ""IgnoreNotImplemented"": [ 631, [ ""Byte"", ""null"" ]],
				 ""WaitAny"": [ 632, [ ""Byte"", ""null"" ]],
				 ""WaitAll"": [ 633, [ ""Byte"", ""null"" ]],
				 ""PresentIrpQueue"": [ 636, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Head"": [ 644, [ ""_POP_DEVICE_POWER_IRP"", ""null"" ]],
				 ""PowerIrpState"": [ 688, [ ""Array"", ""{\""count\"":20,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public Byte IrpMinor{ get { return _StructureData[_BufferOffset +0]; } }
		public _SYSTEM_POWER_STATE SystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 SpinLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Thread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte GetNewDeviceList{ get { return _StructureData[_BufferOffset +32]; } }
		public _PO_DEVICE_NOTIFY_ORDER Order
		{
			get
			{
				_PO_DEVICE_NOTIFY_ORDER returnValue = new _PO_DEVICE_NOTIFY_ORDER(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 620); } }
		public UInt32 FailedDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 624); } }
		public Byte Waking{ get { return _StructureData[_BufferOffset +628]; } }
		public Byte Cancelled{ get { return _StructureData[_BufferOffset +629]; } }
		public Byte IgnoreErrors{ get { return _StructureData[_BufferOffset +630]; } }
		public Byte IgnoreNotImplemented{ get { return _StructureData[_BufferOffset +631]; } }
		public Byte WaitAny{ get { return _StructureData[_BufferOffset +632]; } }
		public Byte WaitAll{ get { return _StructureData[_BufferOffset +633]; } }
		public _LIST_ENTRY PresentIrpQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 636);
				return returnValue;
			}
		}
		public _POP_DEVICE_POWER_IRP Head
		{
			get
			{
				_POP_DEVICE_POWER_IRP returnValue = new _POP_DEVICE_POWER_IRP(_StructureData, _BufferOffset + 644);
				return returnValue;
			}
		}
		public _POP_DEVICE_POWER_IRP[] PowerIrpState
		{
			get
			{
				_POP_DEVICE_POWER_IRP[] returnValue = new _POP_DEVICE_POWER_IRP[20];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<20; i++ )
					returnValue[i] = new _POP_DEVICE_POWER_IRP(_StructureData, (i * size) + _BufferOffset + 688);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_DUMP_CONTROL
 
	public class _OBJECT_DUMP_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_DUMP_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_DUMP_CONTROL"": [ 8, {
				 ""Stream"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Detail"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Stream { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Detail { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _SECURITY_SUBJECT_CONTEXT
 
	public class _SECURITY_SUBJECT_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_SUBJECT_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_SUBJECT_CONTEXT"": [ 16, {
				 ""ClientToken"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImpersonationLevel"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""PrimaryToken"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessAuditId"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ClientToken { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PrimaryToken { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ProcessAuditId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _HEAP_STOP_ON_TAG
 
	public class _HEAP_STOP_ON_TAG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_STOP_ON_TAG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_STOP_ON_TAG"": [ 4, {
				 ""HeapAndTagIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TagIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""HeapIndex"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HeapAndTagIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 HeapIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _ACTIVATION_CONTEXT_STACK
 
	public class _ACTIVATION_CONTEXT_STACK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACTIVATION_CONTEXT_STACK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACTIVATION_CONTEXT_STACK"": [ 20, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NextCookieSequenceNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ActiveFrame"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FrameListCache"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NextCookieSequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ActiveFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY FrameListCache
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMWSLE_HASH
 
	public class _MMWSLE_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMWSLE_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMWSLE_HASH"": [ 8, {
				 ""Key"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Index"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Index { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _CM_NAME_CONTROL_BLOCK
 
	public class _CM_NAME_CONTROL_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_NAME_CONTROL_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_NAME_CONTROL_BLOCK"": [ 16, {
				 ""Compressed"": [ 0, [ ""Byte"", ""null"" ]],
				 ""RefCount"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""NameHash"": [ 4, [ ""_CM_NAME_HASH"", ""null"" ]],
				 ""ConvKey"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NextHash"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]],
				 ""NameLength"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 14, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Compressed{ get { return _StructureData[_BufferOffset +0]; } }
		public UInt16 RefCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _CM_NAME_HASH NameHash
		{
			get
			{
				_CM_NAME_HASH returnValue = new _CM_NAME_HASH(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 ConvKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NextHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 14);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECURITY_TOKEN_PROXY_DATA
 
	public class _SECURITY_TOKEN_PROXY_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_TOKEN_PROXY_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_TOKEN_PROXY_DATA"": [ 24, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProxyClass"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_PROXY_CLASS\"",\""target\"":\""UInt32\""}"" ]],
				 ""PathInfo"": [ 8, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ContainerMask"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ObjectMask"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PROXY_CLASS ProxyClass { get { return (_PROXY_CLASS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _UNICODE_STRING PathInfo
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 ContainerMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ObjectMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _HANDLE_TABLE_ENTRY
 
	public class _HANDLE_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE_ENTRY"": [ 8, {
				 ""Object"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ObAttributes"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InfoTable"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE_ENTRY_INFO\""}"" ]],
				 ""Value"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GrantedAccess"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""GrantedAccessIndex"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""CreatorBackTraceIndex"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""NextFreeTableEntry"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Object { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ObAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 InfoTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Value { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 GrantedAccessIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Int32 NextFreeTableEntry { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LPCP_PORT_OBJECT
 
	public class _LPCP_PORT_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_PORT_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 164; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_PORT_OBJECT"": [ 164, {
				 ""ConnectionPort"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LPCP_PORT_OBJECT\""}"" ]],
				 ""ConnectedPort"": [ 4, [ ""Pointer"", ""{\""target\"":\""_LPCP_PORT_OBJECT\""}"" ]],
				 ""MsgQueue"": [ 8, [ ""_LPCP_PORT_QUEUE"", ""null"" ]],
				 ""Creator"": [ 24, [ ""_CLIENT_ID"", ""null"" ]],
				 ""ClientSectionBase"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ServerSectionBase"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PortContext"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ClientThread"": [ 44, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""SecurityQos"": [ 48, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]],
				 ""StaticSecurity"": [ 60, [ ""_SECURITY_CLIENT_CONTEXT"", ""null"" ]],
				 ""LpcReplyChainHead"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LpcDataInfoChainHead"": [ 128, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ServerProcess"": [ 136, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""MappingProcess"": [ 136, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""MaxMessageLength"": [ 140, [ ""UInt16"", ""null"" ]],
				 ""MaxConnectionInfoLength"": [ 142, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""WaitEvent"": [ 148, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ConnectionPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ConnectedPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LPCP_PORT_QUEUE MsgQueue
		{
			get
			{
				_LPCP_PORT_QUEUE returnValue = new _LPCP_PORT_QUEUE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _CLIENT_ID Creator
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 ClientSectionBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 ServerSectionBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 PortContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ClientThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _SECURITY_QUALITY_OF_SERVICE SecurityQos
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _SECURITY_CLIENT_CONTEXT StaticSecurity
		{
			get
			{
				_SECURITY_CLIENT_CONTEXT returnValue = new _SECURITY_CLIENT_CONTEXT(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
		public _LIST_ENTRY LpcReplyChainHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _LIST_ENTRY LpcDataInfoChainHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 ServerProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 MappingProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt16 MaxMessageLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 140); } }
		public UInt16 MaxConnectionInfoLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 142); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public _KEVENT WaitEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
	}
	#endregion
	#region PCI_POWER_STATE
 
	public class PCI_POWER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PCI_POWER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PCI_POWER_STATE"": [ 64, {
				 ""CurrentSystemState"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""CurrentDeviceState"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SystemWakeLevel"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceWakeLevel"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SystemStateMapping"": [ 16, [ ""Array"", ""{\""size\"":28,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}}"" ]],
				 ""WaitWakeIrp"": [ 44, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""SavedCancelRoutine"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Paging"": [ 52, [ ""Int32"", ""null"" ]],
				 ""Hibernate"": [ 56, [ ""Int32"", ""null"" ]],
				 ""CrashDump"": [ 60, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SYSTEM_POWER_STATE CurrentSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DEVICE_POWER_STATE CurrentDeviceState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SYSTEM_POWER_STATE SystemWakeLevel { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _DEVICE_POWER_STATE DeviceWakeLevel { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _DEVICE_POWER_STATE[] SystemStateMapping
		{
			get
			{
				_DEVICE_POWER_STATE[] returnValue = new _DEVICE_POWER_STATE[7];
				int size = 4;
				for(int i=0; i<7; i++ )
					returnValue[i] = (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 WaitWakeIrp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SavedCancelRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public Int32 Paging { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 52); } }
		public Int32 Hibernate { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public Int32 CrashDump { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _POOL_HACKER
 
	public class _POOL_HACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_HACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_HACKER"": [ 40, {
				 ""Header"": [ 0, [ ""_POOL_HEADER"", ""null"" ]],
				 ""Contents"": [ 8, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _POOL_HEADER Header
		{
			get
			{
				_POOL_HEADER returnValue = new _POOL_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] Contents
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_INDEX_HINT_BLOCK
 
	public class _CM_INDEX_HINT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_INDEX_HINT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_INDEX_HINT_BLOCK"": [ 8, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HashKey"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] HashKey
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TOKEN_CONTROL
 
	public class _TOKEN_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_CONTROL"": [ 40, {
				 ""TokenId"": [ 0, [ ""_LUID"", ""null"" ]],
				 ""AuthenticationId"": [ 8, [ ""_LUID"", ""null"" ]],
				 ""ModifiedId"": [ 16, [ ""_LUID"", ""null"" ]],
				 ""TokenSource"": [ 24, [ ""_TOKEN_SOURCE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LUID TokenId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LUID AuthenticationId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LUID ModifiedId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _TOKEN_SOURCE TokenSource
		{
			get
			{
				_TOKEN_SOURCE returnValue = new _TOKEN_SOURCE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SCSI_REQUEST_BLOCK
 
	public class _SCSI_REQUEST_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SCSI_REQUEST_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SCSI_REQUEST_BLOCK"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _IO_STACK_LOCATION
 
	public class _IO_STACK_LOCATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_STACK_LOCATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_STACK_LOCATION"": [ 36, {
				 ""MajorFunction"": [ 0, [ ""Byte"", ""null"" ]],
				 ""MinorFunction"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Control"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Parameters"": [ 4, [ ""__unnamed"", ""null"" ]],
				 ""DeviceObject"": [ 20, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FileObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""CompletionRoutine"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte MajorFunction{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte MinorFunction{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Control{ get { return _StructureData[_BufferOffset +3]; } }
		public __unnamed Parameters
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 CompletionRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _IO_RESOURCE_DESCRIPTOR
 
	public class _IO_RESOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_RESOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_RESOURCE_DESCRIPTOR"": [ 32, {
				 ""Option"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Type"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ShareDisposition"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Spare1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Spare2"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""u"": [ 8, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Option{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Type{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ShareDisposition{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Spare1{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Spare2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LUID_AND_ATTRIBUTES
 
	public class _LUID_AND_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LUID_AND_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LUID_AND_ATTRIBUTES"": [ 12, {
				 ""Luid"": [ 0, [ ""_LUID"", ""null"" ]],
				 ""Attributes"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LUID Luid
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_VERIFIER_POOL_HEADER
 
	public class _MI_VERIFIER_POOL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_VERIFIER_POOL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_VERIFIER_POOL_HEADER"": [ 8, {
				 ""ListIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Verifier"": [ 4, [ ""Pointer"", ""{\""target\"":\""_MI_VERIFIER_DRIVER_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ListIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Verifier { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _CM_KEY_BODY
 
	public class _CM_KEY_BODY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_BODY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_BODY"": [ 68, {
				 ""Type"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""KeyControlBlock"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""NotifyBlock"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_NOTIFY_BLOCK\""}"" ]],
				 ""ProcessID"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Callers"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""CallerAddress"": [ 20, [ ""Array"", ""{\""count\"":10,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""KeyBodyList"": [ 60, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 KeyControlBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NotifyBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ProcessID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Callers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] CallerAddress
		{
			get
			{
				UInt32[] returnValue = new UInt32[10];
				int size = 4;
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public _LIST_ENTRY KeyBodyList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PORT_MESSAGE
 
	public class _PORT_MESSAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PORT_MESSAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PORT_MESSAGE"": [ 24, {
				 ""u1"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""u2"": [ 4, [ ""__unnamed"", ""null"" ]],
				 ""ClientId"": [ 8, [ ""_CLIENT_ID"", ""null"" ]],
				 ""DoNotUseThisField"": [ 8, [ ""Double"", ""null"" ]],
				 ""MessageId"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ClientViewSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CallbackId"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed u1
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed u2
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _CLIENT_ID ClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Double DoNotUseThisField { get { return BitConverter.ToDouble(_StructureData, _BufferOffset + 8); } }
		public UInt32 MessageId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ClientViewSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CallbackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _DBGKD_ANY_CONTROL_SET
 
	public class _DBGKD_ANY_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_ANY_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_ANY_CONTROL_SET"": [ 28, {
				 ""X86ControlSet"": [ 0, [ ""_X86_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""AlphaControlSet"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""IA64ControlSet"": [ 0, [ ""_IA64_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""Amd64ControlSet"": [ 0, [ ""_AMD64_DBGKD_CONTROL_SET"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _X86_DBGKD_CONTROL_SET X86ControlSet
		{
			get
			{
				_X86_DBGKD_CONTROL_SET returnValue = new _X86_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 AlphaControlSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _IA64_DBGKD_CONTROL_SET IA64ControlSet
		{
			get
			{
				_IA64_DBGKD_CONTROL_SET returnValue = new _IA64_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _AMD64_DBGKD_CONTROL_SET Amd64ControlSet
		{
			get
			{
				_AMD64_DBGKD_CONTROL_SET returnValue = new _AMD64_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_ORDERING_LIST
 
	public class _ARBITER_ORDERING_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ORDERING_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ORDERING_LIST"": [ 8, {
				 ""Count"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Maximum"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Orderings"": [ 4, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ORDERING\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Maximum { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Orderings { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HBASE_BLOCK
 
	public class _HBASE_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HBASE_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4096; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HBASE_BLOCK"": [ 4096, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Sequence1"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Sequence2"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TimeStamp"": [ 12, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Major"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Minor"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Format"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""RootCell"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Cluster"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""FileName"": [ 48, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]],
				 ""Reserved1"": [ 112, [ ""Array"", ""{\""count\"":99,\""target\"":\""UInt32\""}"" ]],
				 ""CheckSum"": [ 508, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 512, [ ""Array"", ""{\""count\"":894,\""target\"":\""UInt32\""}"" ]],
				 ""BootType"": [ 4088, [ ""UInt32"", ""null"" ]],
				 ""BootRecover"": [ 4092, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Sequence1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Sequence2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 Major { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Minor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Format { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 RootCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Cluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Byte[] FileName
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 48];
				return returnValue;
			}
		}
		public UInt32[] Reserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[99];
				for(int i=0; i<99; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 508); } }
		public UInt32[] Reserved2
		{
			get
			{
				UInt32[] returnValue = new UInt32[894];
				for(int i=0; i<894; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 512);
				return returnValue;
			}
		}
		public UInt32 BootType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4088); } }
		public UInt32 BootRecover { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4092); } }
	}
	#endregion
	#region _DUAL
 
	public class _DUAL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUAL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 220; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUAL"": [ 220, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Map"": [ 4, [ ""Pointer"", ""{\""target\"":\""_HMAP_DIRECTORY\""}"" ]],
				 ""SmallDir"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HMAP_TABLE\""}"" ]],
				 ""Guard"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""FreeDisplay"": [ 16, [ ""Array"", ""{\""count\"":24,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""FreeSummary"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""FreeBins"": [ 212, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Map { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SmallDir { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Guard { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _RTL_BITMAP[] FreeDisplay
		{
			get
			{
				_RTL_BITMAP[] returnValue = new _RTL_BITMAP[24];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<24; i++ )
					returnValue[i] = new _RTL_BITMAP(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 FreeSummary { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public _LIST_ENTRY FreeBins
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 212);
				return returnValue;
			}
		}
	}
	#endregion
	#region _COMPRESSED_DATA_INFO
 
	public class _COMPRESSED_DATA_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _COMPRESSED_DATA_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_COMPRESSED_DATA_INFO"": [ 12, {
				 ""CompressionFormatAndEngine"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""CompressionUnitShift"": [ 2, [ ""Byte"", ""null"" ]],
				 ""ChunkShift"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ClusterShift"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 5, [ ""Byte"", ""null"" ]],
				 ""NumberOfChunks"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""CompressedChunkSizes"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 CompressionFormatAndEngine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte CompressionUnitShift{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte ChunkShift{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ClusterShift{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 NumberOfChunks { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32[] CompressedChunkSizes
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LPCP_PORT_QUEUE
 
	public class _LPCP_PORT_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_PORT_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_PORT_QUEUE"": [ 16, {
				 ""NonPagedPortQueue"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LPCP_NONPAGED_PORT_QUEUE\""}"" ]],
				 ""Semaphore"": [ 4, [ ""Pointer"", ""{\""target\"":\""_KSEMAPHORE\""}"" ]],
				 ""ReceiveHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NonPagedPortQueue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Semaphore { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY ReceiveHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _INITIAL_PRIVILEGE_SET
 
	public class _INITIAL_PRIVILEGE_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INITIAL_PRIVILEGE_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INITIAL_PRIVILEGE_SET"": [ 44, {
				 ""PrivilegeCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Control"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Privilege"": [ 8, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Control { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LUID_AND_ATTRIBUTES[] Privilege
		{
			get
			{
				_LUID_AND_ATTRIBUTES[] returnValue = new _LUID_AND_ATTRIBUTES[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _LUID_AND_ATTRIBUTES(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_HIBER_CONTEXT
 
	public class _POP_HIBER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_HIBER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_HIBER_CONTEXT"": [ 224, {
				 ""WriteToFile"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ReserveLoaderMemory"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ReserveFreeMemory"": [ 2, [ ""Byte"", ""null"" ]],
				 ""VerifyOnWake"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Reset"": [ 4, [ ""Byte"", ""null"" ]],
				 ""HiberFlags"": [ 5, [ ""Byte"", ""null"" ]],
				 ""LinkFile"": [ 6, [ ""Byte"", ""null"" ]],
				 ""LinkFileHandle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Lock"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MapFrozen"": [ 16, [ ""Byte"", ""null"" ]],
				 ""MemoryMap"": [ 20, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""ClonedRanges"": [ 28, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ClonedRangeCount"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""NextCloneRange"": [ 40, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""NextPreserve"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""LoaderMdl"": [ 48, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Clones"": [ 52, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""NextClone"": [ 56, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""NoClones"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Spares"": [ 64, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""PagesOut"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""IoPage"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentMcb"": [ 84, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DumpStack"": [ 88, [ ""Pointer"", ""{\""target\"":\""_DUMP_STACK_CONTEXT\""}"" ]],
				 ""WakeState"": [ 92, [ ""Pointer"", ""{\""target\"":\""_KPROCESSOR_STATE\""}"" ]],
				 ""NoRanges"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""HiberVa"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""HiberPte"": [ 104, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Status"": [ 112, [ ""Int32"", ""null"" ]],
				 ""MemoryImage"": [ 116, [ ""Pointer"", ""{\""target\"":\""PO_MEMORY_IMAGE\""}"" ]],
				 ""TableHead"": [ 120, [ ""Pointer"", ""{\""target\"":\""_PO_MEMORY_RANGE_ARRAY\""}"" ]],
				 ""CompressionWorkspace"": [ 124, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""CompressedWriteBuffer"": [ 128, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""PerformanceStats"": [ 132, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""CompressionBlock"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DmaIO"": [ 140, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TemporaryHeap"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PerfInfo"": [ 152, [ ""_PO_HIBER_PERF"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte WriteToFile{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ReserveLoaderMemory{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ReserveFreeMemory{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte VerifyOnWake{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte Reset{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte HiberFlags{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte LinkFile{ get { return _StructureData[_BufferOffset +6]; } }
		public UInt32 LinkFileHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Byte MapFrozen{ get { return _StructureData[_BufferOffset +16]; } }
		public _RTL_BITMAP MemoryMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _LIST_ENTRY ClonedRanges
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 ClonedRangeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 NextCloneRange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 NextPreserve { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 LoaderMdl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Clones { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 NextClone { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 NoClones { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Spares { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 PagesOut { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 IoPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 CurrentMcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 DumpStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 WakeState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 NoRanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 HiberVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public _LARGE_INTEGER HiberPte
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 MemoryImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 TableHead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 CompressionWorkspace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 CompressedWriteBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 PerformanceStats { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 CompressionBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 DmaIO { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 TemporaryHeap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public _PO_HIBER_PERF PerfInfo
		{
			get
			{
				_PO_HIBER_PERF returnValue = new _PO_HIBER_PERF(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TEB_ACTIVE_FRAME_CONTEXT
 
	public class _TEB_ACTIVE_FRAME_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB_ACTIVE_FRAME_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB_ACTIVE_FRAME_CONTEXT"": [ 8, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FrameName"": [ 4, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FrameName { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _TEB_ACTIVE_FRAME
 
	public class _TEB_ACTIVE_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB_ACTIVE_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB_ACTIVE_FRAME"": [ 12, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Previous"": [ 4, [ ""Pointer"", ""{\""target\"":\""_TEB_ACTIVE_FRAME\""}"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""_TEB_ACTIVE_FRAME_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Previous { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FILE_GET_QUOTA_INFORMATION
 
	public class _FILE_GET_QUOTA_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_GET_QUOTA_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_GET_QUOTA_INFORMATION"": [ 20, {
				 ""NextEntryOffset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SidLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Sid"": [ 8, [ ""_SID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NextEntryOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SidLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SID Sid
		{
			get
			{
				_SID returnValue = new _SID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMADDRESS_LIST
 
	public class _MMADDRESS_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMADDRESS_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMADDRESS_LIST"": [ 8, {
				 ""StartVpn"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EndVpn"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StartVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _OBJECT_NAME_INFORMATION
 
	public class _OBJECT_NAME_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_NAME_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_NAME_INFORMATION"": [ 8, {
				 ""Name"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECURITY_QUALITY_OF_SERVICE
 
	public class _SECURITY_QUALITY_OF_SERVICE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_QUALITY_OF_SERVICE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_QUALITY_OF_SERVICE"": [ 12, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ImpersonationLevel"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""ContextTrackingMode"": [ 8, [ ""Byte"", ""null"" ]],
				 ""EffectiveOnly"": [ 9, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte ContextTrackingMode{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte EffectiveOnly{ get { return _StructureData[_BufferOffset +9]; } }
	}
	#endregion
	#region _DUMP_STACK_CONTEXT
 
	public class _DUMP_STACK_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUMP_STACK_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUMP_STACK_CONTEXT"": [ 176, {
				 ""Init"": [ 0, [ ""_DUMP_INITIALIZATION_CONTEXT"", ""null"" ]],
				 ""PartitionOffset"": [ 112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""DumpPointers"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PointersLength"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""ModulePrefix"": [ 128, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""DriverList"": [ 132, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InitMsg"": [ 140, [ ""_STRING"", ""null"" ]],
				 ""ProgMsg"": [ 148, [ ""_STRING"", ""null"" ]],
				 ""DoneMsg"": [ 156, [ ""_STRING"", ""null"" ]],
				 ""FileObject"": [ 164, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UsageType"": [ 168, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_USAGE_NOTIFICATION_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _DUMP_INITIALIZATION_CONTEXT Init
		{
			get
			{
				_DUMP_INITIALIZATION_CONTEXT returnValue = new _DUMP_INITIALIZATION_CONTEXT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PartitionOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 DumpPointers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 PointersLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 ModulePrefix { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public _LIST_ENTRY DriverList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 132);
				return returnValue;
			}
		}
		public _STRING InitMsg
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 140);
				return returnValue;
			}
		}
		public _STRING ProgMsg
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
		public _STRING DoneMsg
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public _DEVICE_USAGE_NOTIFICATION_TYPE UsageType { get { return (_DEVICE_USAGE_NOTIFICATION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
	}
	#endregion
	#region _FILE_STANDARD_INFORMATION
 
	public class _FILE_STANDARD_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_STANDARD_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_STANDARD_INFORMATION"": [ 24, {
				 ""AllocationSize"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""EndOfFile"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""NumberOfLinks"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DeletePending"": [ 20, [ ""Byte"", ""null"" ]],
				 ""Directory"": [ 21, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER AllocationSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER EndOfFile
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 NumberOfLinks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte DeletePending{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte Directory{ get { return _StructureData[_BufferOffset +21]; } }
	}
	#endregion
	#region _POP_SHUTDOWN_BUG_CHECK
 
	public class _POP_SHUTDOWN_BUG_CHECK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_SHUTDOWN_BUG_CHECK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_SHUTDOWN_BUG_CHECK"": [ 20, {
				 ""Code"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Parameter1"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Parameter2"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Parameter3"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Parameter4"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Code { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Parameter1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Parameter2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Parameter3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Parameter4 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PCI_SLOT_NUMBER
 
	public class _PCI_SLOT_NUMBER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_SLOT_NUMBER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_SLOT_NUMBER"": [ 4, {
				 ""u"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _Wx86ThreadState
 
	public class _Wx86ThreadState
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _Wx86ThreadState(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_Wx86ThreadState"": [ 12, {
				 ""CallBx86Eip"": [ 0, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""DeallocationCpu"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UseKnownWx86Dll"": [ 8, [ ""Byte"", ""null"" ]],
				 ""OleStubInvoked"": [ 9, [ ""Char"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CallBx86Eip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DeallocationCpu { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte UseKnownWx86Dll{ get { return _StructureData[_BufferOffset +8]; } }
		public Char OleStubInvoked { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 9); } }
	}
	#endregion
	#region _DRIVER_EXTENSION
 
	public class _DRIVER_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DRIVER_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DRIVER_EXTENSION"": [ 28, {
				 ""DriverObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DRIVER_OBJECT\""}"" ]],
				 ""AddDevice"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Count"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ServiceKeyName"": [ 12, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ClientDriverExtension"": [ 20, [ ""Pointer"", ""{\""target\"":\""_IO_CLIENT_EXTENSION\""}"" ]],
				 ""FsFilterCallbacks"": [ 24, [ ""Pointer"", ""{\""target\"":\""_FS_FILTER_CALLBACKS\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DriverObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 AddDevice { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _UNICODE_STRING ServiceKeyName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 ClientDriverExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 FsFilterCallbacks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _CM_NOTIFY_BLOCK
 
	public class _CM_NOTIFY_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_NOTIFY_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_NOTIFY_BLOCK"": [ 44, {
				 ""HiveList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PostList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KeyControlBlock"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""KeyBody"": [ 20, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_BODY\""}"" ]],
				 ""Filter"": [ 24, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""WatchTree"": [ 24, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""NotifyPending"": [ 24, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""SubjectContext"": [ 28, [ ""_SECURITY_SUBJECT_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY HiveList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY PostList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 KeyControlBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 KeyBody { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Filter
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 24);
				var value2 = (value & 1073741823) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 WatchTree
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 24);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 NotifyPending
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 24);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public _SECURITY_SUBJECT_CONTEXT SubjectContext
		{
			get
			{
				_SECURITY_SUBJECT_CONTEXT returnValue = new _SECURITY_SUBJECT_CONTEXT(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SID
 
	public class _SID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID"": [ 12, {
				 ""Revision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SubAuthorityCount"": [ 1, [ ""Byte"", ""null"" ]],
				 ""IdentifierAuthority"": [ 2, [ ""_SID_IDENTIFIER_AUTHORITY"", ""null"" ]],
				 ""SubAuthority"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte SubAuthorityCount{ get { return _StructureData[_BufferOffset +1]; } }
		public _SID_IDENTIFIER_AUTHORITY IdentifierAuthority
		{
			get
			{
				_SID_IDENTIFIER_AUTHORITY returnValue = new _SID_IDENTIFIER_AUTHORITY(_StructureData, _BufferOffset + 2);
				return returnValue;
			}
		}
		public UInt32[] SubAuthority
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_HANDLE_TABLE_ENTRY
 
	public class _RTL_HANDLE_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HANDLE_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HANDLE_TABLE_ENTRY"": [ 4, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NextFree"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_HANDLE_TABLE_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NextFree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _INTERFACE
 
	public class _INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERFACE"": [ 16, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Context { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 InterfaceReference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 InterfaceDereference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _SUPPORTED_RANGES
 
	public class _SUPPORTED_RANGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SUPPORTED_RANGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SUPPORTED_RANGES"": [ 160, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Sorted"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""NoIO"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""IO"": [ 8, [ ""_SUPPORTED_RANGE"", ""null"" ]],
				 ""NoMemory"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Memory"": [ 48, [ ""_SUPPORTED_RANGE"", ""null"" ]],
				 ""NoPrefetchMemory"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""PrefetchMemory"": [ 88, [ ""_SUPPORTED_RANGE"", ""null"" ]],
				 ""NoDma"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""Dma"": [ 128, [ ""_SUPPORTED_RANGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Sorted{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 NoIO { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SUPPORTED_RANGE IO
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 NoMemory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _SUPPORTED_RANGE Memory
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 NoPrefetchMemory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public _SUPPORTED_RANGE PrefetchMemory
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 NoDma { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public _SUPPORTED_RANGE Dma
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SID_IDENTIFIER_AUTHORITY
 
	public class _SID_IDENTIFIER_AUTHORITY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID_IDENTIFIER_AUTHORITY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID_IDENTIFIER_AUTHORITY"": [ 6, {
				 ""Value"": [ 0, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Value
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECURITY_DESCRIPTOR_RELATIVE
 
	public class _SECURITY_DESCRIPTOR_RELATIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_DESCRIPTOR_RELATIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_DESCRIPTOR_RELATIVE"": [ 20, {
				 ""Revision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Sbz1"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Control"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Owner"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Group"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Sacl"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Dacl"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Sbz1{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Control { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Owner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Group { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Sacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Dacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PM_SUPPORT
 
	public class _PM_SUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PM_SUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PM_SUPPORT"": [ 1, {
				 ""Rsvd2"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""D1"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""D2"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PMED0"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""PMED1"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""PMED2"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""PMED3Hot"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""PMED3Cold"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Rsvd2
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte D1
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte D2
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte PMED0
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte PMED1
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte PMED2
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte PMED3Hot
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte PMED3Cold
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _ARBITER_PARAMETERS
 
	public class _ARBITER_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_PARAMETERS"": [ 16, {
				 ""Parameters"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed Parameters
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECURITY_TOKEN_AUDIT_DATA
 
	public class _SECURITY_TOKEN_AUDIT_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_TOKEN_AUDIT_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_TOKEN_AUDIT_DATA"": [ 12, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GrantMask"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DenyMask"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GrantMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DenyMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HANDLE_TABLE_ENTRY_INFO
 
	public class _HANDLE_TABLE_ENTRY_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE_ENTRY_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE_ENTRY_INFO"": [ 4, {
				 ""AuditMask"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AuditMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _POWER_SEQUENCE
 
	public class _POWER_SEQUENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POWER_SEQUENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POWER_SEQUENCE"": [ 12, {
				 ""SequenceD1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SequenceD2"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SequenceD3"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SequenceD1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SequenceD2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SequenceD3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _IMAGE_DATA_DIRECTORY
 
	public class _IMAGE_DATA_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_DATA_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_DATA_DIRECTORY"": [ 8, {
				 ""VirtualAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 VirtualAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MI_VERIFIER_DRIVER_ENTRY
 
	public class _MI_VERIFIER_DRIVER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_VERIFIER_DRIVER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_VERIFIER_DRIVER_ENTRY"": [ 96, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Loads"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Unloads"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""BaseName"": [ 16, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""StartAddress"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EndAddress"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Signature"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""VerifierPoolLock"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""PoolHash"": [ 48, [ ""Pointer"", ""{\""target\"":\""_VI_POOL_ENTRY\""}"" ]],
				 ""PoolHashSize"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""PoolHashFree"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""PoolHashReserved"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""CurrentPagedPoolAllocations"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""CurrentNonPagedPoolAllocations"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PeakPagedPoolAllocations"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""PeakNonPagedPoolAllocations"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""PagedBytes"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""NonPagedBytes"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""PeakPagedBytes"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""PeakNonPagedBytes"": [ 92, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Loads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Unloads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _UNICODE_STRING BaseName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 StartAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 EndAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 VerifierPoolLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 PoolHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 PoolHashSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 PoolHashFree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 PoolHashReserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CurrentPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 CurrentNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PeakPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 PeakNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 PagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 NonPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 PeakPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 PeakNonPagedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
	}
	#endregion
	#region _CURDIR
 
	public class _CURDIR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CURDIR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CURDIR"": [ 12, {
				 ""DosPath"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Handle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING DosPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Handle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MMMOD_WRITER_LISTHEAD
 
	public class _MMMOD_WRITER_LISTHEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMMOD_WRITER_LISTHEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMMOD_WRITER_LISTHEAD"": [ 24, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Event"": [ 8, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PO_HIBER_PERF
 
	public class _PO_HIBER_PERF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_HIBER_PERF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_HIBER_PERF"": [ 72, {
				 ""IoTicks"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""InitTicks"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CopyTicks"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""StartCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ElapsedTime"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""IoTime"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""CopyTime"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""InitTime"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""PagesWritten"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""PagesProcessed"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""BytesCopied"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""DumpCount"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""FileRuns"": [ 64, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 InitTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CopyTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 StartCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 ElapsedTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 IoTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 CopyTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 InitTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 PagesWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 PagesProcessed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 BytesCopied { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 DumpCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 FileRuns { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _GDI_TEB_BATCH
 
	public class _GDI_TEB_BATCH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GDI_TEB_BATCH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1248; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GDI_TEB_BATCH"": [ 1248, {
				 ""Offset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HDC"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""Array"", ""{\""count\"":310,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HDC { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32[] Buffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[310];
				for(int i=0; i<310; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region PO_MEMORY_IMAGE
 
	public class PO_MEMORY_IMAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PO_MEMORY_IMAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PO_MEMORY_IMAGE"": [ 168, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LengthSelf"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PageSelf"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PageSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ImageType"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SystemTime"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""InterruptTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""FeatureFlags"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""HiberFlags"": [ 52, [ ""Byte"", ""null"" ]],
				 ""spare"": [ 53, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""NoHiberPtes"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""HiberVa"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""HiberPte"": [ 64, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""NoFreePages"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""FreeMapCheck"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""WakeCheck"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""TotalPages"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""FirstTablePage"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""LastFilePage"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""PerfInfo"": [ 96, [ ""_PO_HIBER_PERF"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LengthSelf { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PageSelf { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PageSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ImageType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _LARGE_INTEGER SystemTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 InterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 FeatureFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public Byte HiberFlags{ get { return _StructureData[_BufferOffset +52]; } }
		public Byte[] spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 53];
				return returnValue;
			}
		}
		public UInt32 NoHiberPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 HiberVa { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _LARGE_INTEGER HiberPte
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 NoFreePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 FreeMapCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 WakeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 TotalPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 FirstTablePage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 LastFilePage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _PO_HIBER_PERF PerfInfo
		{
			get
			{
				_PO_HIBER_PERF returnValue = new _PO_HIBER_PERF(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region BATTERY_REPORTING_SCALE
 
	public class BATTERY_REPORTING_SCALE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public BATTERY_REPORTING_SCALE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""BATTERY_REPORTING_SCALE"": [ 8, {
				 ""Granularity"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Capacity"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Granularity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Capacity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KDEVICE_QUEUE_ENTRY
 
	public class _KDEVICE_QUEUE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDEVICE_QUEUE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDEVICE_QUEUE_ENTRY"": [ 16, {
				 ""DeviceListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SortKey"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Inserted"": [ 12, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DeviceListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SortKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte Inserted{ get { return _StructureData[_BufferOffset +12]; } }
	}
	#endregion
	#region _DEVICE_CAPABILITIES
 
	public class _DEVICE_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_CAPABILITIES"": [ 64, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DeviceD1"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DeviceD2"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LockSupported"": [ 4, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""EjectSupported"": [ 4, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Removable"": [ 4, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""DockDevice"": [ 4, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""UniqueID"": [ 4, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""SilentInstall"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""RawDeviceOK"": [ 4, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SurpriseRemovalOK"": [ 4, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD0"": [ 4, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD1"": [ 4, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD2"": [ 4, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD3"": [ 4, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""HardwareDisabled"": [ 4, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""NonDynamic"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""WarmEjectSupported"": [ 4, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""NoDisplayInUI"": [ 4, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""Address"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UINumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DeviceState"": [ 16, [ ""Array"", ""{\""size\"":28,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}}"" ]],
				 ""SystemWake"": [ 44, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceWake"": [ 48, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""D1Latency"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""D2Latency"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""D3Latency"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DeviceD1
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DeviceD2
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LockSupported
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 EjectSupported
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Removable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 DockDevice
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 UniqueID
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 SilentInstall
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 RawDeviceOK
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SurpriseRemovalOK
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD0
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD1
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD2
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD3
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 HardwareDisabled
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 NonDynamic
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 WarmEjectSupported
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 NoDisplayInUI
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 18  end: 32  Mask: 11111111111111000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294705152) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 Address { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 UINumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _DEVICE_POWER_STATE[] DeviceState
		{
			get
			{
				_DEVICE_POWER_STATE[] returnValue = new _DEVICE_POWER_STATE[7];
				int size = 4;
				for(int i=0; i<7; i++ )
					returnValue[i] = (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE SystemWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _DEVICE_POWER_STATE DeviceWake { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 D1Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 D2Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 D3Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _RTL_RANGE_LIST
 
	public class _RTL_RANGE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RANGE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RANGE_LIST"": [ 20, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Count"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Stamp"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Stamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTL_CRITICAL_SECTION_DEBUG
 
	public class _RTL_CRITICAL_SECTION_DEBUG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CRITICAL_SECTION_DEBUG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CRITICAL_SECTION_DEBUG"": [ 32, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""CreatorBackTraceIndex"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""CriticalSection"": [ 4, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION\""}"" ]],
				 ""ProcessLocksList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EntryCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ContentionCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Spare"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 CriticalSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY ProcessLocksList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 EntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ContentionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32[] Spare
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEP_AUDIT_POLICY
 
	public class _SEP_AUDIT_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_AUDIT_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_AUDIT_POLICY"": [ 8, {
				 ""PolicyElements"": [ 0, [ ""_SEP_AUDIT_POLICY_CATEGORIES"", ""null"" ]],
				 ""PolicyOverlay"": [ 0, [ ""_SEP_AUDIT_POLICY_OVERLAY"", ""null"" ]],
				 ""Overlay"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SEP_AUDIT_POLICY_CATEGORIES PolicyElements
		{
			get
			{
				_SEP_AUDIT_POLICY_CATEGORIES returnValue = new _SEP_AUDIT_POLICY_CATEGORIES(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SEP_AUDIT_POLICY_OVERLAY PolicyOverlay
		{
			get
			{
				_SEP_AUDIT_POLICY_OVERLAY returnValue = new _SEP_AUDIT_POLICY_OVERLAY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Overlay { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PLUGPLAY_EVENT_BLOCK
 
	public class _PLUGPLAY_EVENT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PLUGPLAY_EVENT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PLUGPLAY_EVENT_BLOCK"": [ 56, {
				 ""EventGuid"": [ 0, [ ""_GUID"", ""null"" ]],
				 ""EventCategory"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_PLUGPLAY_EVENT_CATEGORY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Result"": [ 20, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""Flags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TotalSize"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""u"": [ 36, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GUID EventGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PLUGPLAY_EVENT_CATEGORY EventCategory { get { return (_PLUGPLAY_EVENT_CATEGORY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Result { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public __unnamed u
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CACHED_CHILD_LIST
 
	public class _CACHED_CHILD_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHED_CHILD_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHED_CHILD_LIST"": [ 8, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ValueList"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""RealKcb"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ValueList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 RealKcb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PO_MEMORY_RANGE_ARRAY
 
	public class _PO_MEMORY_RANGE_ARRAY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_MEMORY_RANGE_ARRAY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_MEMORY_RANGE_ARRAY"": [ 16, {
				 ""Range"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""Link"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed Range
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed Link
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ADAPTER_OBJECT
 
	public class _ADAPTER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ADAPTER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ADAPTER_OBJECT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _DUMP_INITIALIZATION_CONTEXT
 
	public class _DUMP_INITIALIZATION_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUMP_INITIALIZATION_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUMP_INITIALIZATION_CONTEXT"": [ 112, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MemoryBlock"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommonBuffer"": [ 12, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""PhysicalAddress"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""StallRoutine"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OpenRoutine"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WriteRoutine"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FinishRoutine"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AdapterObject"": [ 56, [ ""Pointer"", ""{\""target\"":\""_ADAPTER_OBJECT\""}"" ]],
				 ""MappedRegisterBase"": [ 60, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PortConfiguration"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CrashDump"": [ 68, [ ""Byte"", ""null"" ]],
				 ""MaximumTransferSize"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""CommonBufferSize"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""TargetAddress"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WritePendingRoutine"": [ 84, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PartitionStyle"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""DiskInfo"": [ 92, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MemoryBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32[] CommonBuffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				int size = 4;
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LARGE_INTEGER[] PhysicalAddress
		{
			get
			{
				_LARGE_INTEGER[] returnValue = new _LARGE_INTEGER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _LARGE_INTEGER(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 StallRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 OpenRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 WriteRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 FinishRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 AdapterObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 MappedRegisterBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 PortConfiguration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public Byte CrashDump{ get { return _StructureData[_BufferOffset +68]; } }
		public UInt32 MaximumTransferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 CommonBufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 TargetAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 WritePendingRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 PartitionStyle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public __unnamed DiskInfo
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 92);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_CLIENT_EXTENSION
 
	public class _IO_CLIENT_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_CLIENT_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_CLIENT_EXTENSION"": [ 8, {
				 ""NextExtension"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IO_CLIENT_EXTENSION\""}"" ]],
				 ""ClientIdentificationAddress"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NextExtension { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ClientIdentificationAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KEXECUTE_OPTIONS
 
	public class _KEXECUTE_OPTIONS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KEXECUTE_OPTIONS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KEXECUTE_OPTIONS"": [ 1, {
				 ""ExecuteDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ExecuteEnable"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""DisableThunkEmulation"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Permanent"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""ExecuteDispatchEnable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ImageDispatchEnable"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte ExecuteDisable
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ExecuteEnable
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte DisableThunkEmulation
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Permanent
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte ExecuteDispatchEnable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ImageDispatchEnable
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Spare
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _CM_NAME_HASH
 
	public class _CM_NAME_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_NAME_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_NAME_HASH"": [ 12, {
				 ""ConvKey"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NextHash"": [ 4, [ ""Pointer"", ""{\""target\"":\""_CM_NAME_HASH\""}"" ]],
				 ""NameLength"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 10, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ConvKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NextHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 10);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_ALLOCATION_STATE
 
	public class _ARBITER_ALLOCATION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ALLOCATION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ALLOCATION_STATE"": [ 56, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CurrentMinimum"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CurrentMaximum"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Entry"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ARBITER_LIST_ENTRY\""}"" ]],
				 ""CurrentAlternative"": [ 36, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ALTERNATIVE\""}"" ]],
				 ""AlternativeCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Alternatives"": [ 44, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ALTERNATIVE\""}"" ]],
				 ""Flags"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""RangeAttributes"": [ 50, [ ""Byte"", ""null"" ]],
				 ""RangeAvailableAttributes"": [ 51, [ ""Byte"", ""null"" ]],
				 ""WorkSpace"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CurrentMinimum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CurrentMaximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Entry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 CurrentAlternative { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 AlternativeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Alternatives { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public Byte RangeAttributes{ get { return _StructureData[_BufferOffset +50]; } }
		public Byte RangeAvailableAttributes{ get { return _StructureData[_BufferOffset +51]; } }
		public UInt32 WorkSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _SEP_AUDIT_POLICY_OVERLAY
 
	public class _SEP_AUDIT_POLICY_OVERLAY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_AUDIT_POLICY_OVERLAY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_AUDIT_POLICY_OVERLAY"": [ 8, {
				 ""PolicyBits"": [ 0, [ ""BitField"", ""{\""end_bit\"":36,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""SetBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":37,\""start_bit\"":36,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PolicyBits
		{
			get
			{
				// start: 0  end: 36  Mask: 000011111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 68719476735) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 SetBit
		{
			get
			{
				// start: 36  end: 37  Mask: 0000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 68719476736) >> 36;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _PCI_HEADER_TYPE_0
 
	public class _PCI_HEADER_TYPE_0
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_HEADER_TYPE_0(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_HEADER_TYPE_0"": [ 48, {
				 ""BaseAddresses"": [ 0, [ ""Array"", ""{\""count\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""CIS"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SubVendorID"": [ 28, [ ""UInt16"", ""null"" ]],
				 ""SubSystemID"": [ 30, [ ""UInt16"", ""null"" ]],
				 ""ROMBaseAddress"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CapabilitiesPtr"": [ 36, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 37, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Reserved2"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""InterruptLine"": [ 44, [ ""Byte"", ""null"" ]],
				 ""InterruptPin"": [ 45, [ ""Byte"", ""null"" ]],
				 ""MinimumGrant"": [ 46, [ ""Byte"", ""null"" ]],
				 ""MaximumLatency"": [ 47, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] BaseAddresses
		{
			get
			{
				UInt32[] returnValue = new UInt32[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 CIS { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt16 SubVendorID { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 28); } }
		public UInt16 SubSystemID { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 30); } }
		public UInt32 ROMBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte CapabilitiesPtr{ get { return _StructureData[_BufferOffset +36]; } }
		public Byte[] Reserved1
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 37];
				return returnValue;
			}
		}
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Byte InterruptLine{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte InterruptPin{ get { return _StructureData[_BufferOffset +45]; } }
		public Byte MinimumGrant{ get { return _StructureData[_BufferOffset +46]; } }
		public Byte MaximumLatency{ get { return _StructureData[_BufferOffset +47]; } }
	}
	#endregion
	#region _PO_DEVICE_NOTIFY_ORDER
 
	public class _PO_DEVICE_NOTIFY_ORDER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_DEVICE_NOTIFY_ORDER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 584; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_DEVICE_NOTIFY_ORDER"": [ 584, {
				 ""DevNodeSequence"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""WarmEjectPdoPointer"": [ 4, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT*\""}"" ]],
				 ""OrderLevel"": [ 8, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DevNodeSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 WarmEjectPdoPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _PO_NOTIFY_ORDER_LEVEL[] OrderLevel
		{
			get
			{
				_PO_NOTIFY_ORDER_LEVEL[] returnValue = new _PO_NOTIFY_ORDER_LEVEL[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _PO_NOTIFY_ORDER_LEVEL(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FS_FILTER_CALLBACKS
 
	public class _FS_FILTER_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_CALLBACKS"": [ 56, {
				 ""SizeOfFsFilterCallbacks"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PreAcquireForSectionSynchronization"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostAcquireForSectionSynchronization"": [ 12, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreReleaseForSectionSynchronization"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostReleaseForSectionSynchronization"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreAcquireForCcFlush"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostAcquireForCcFlush"": [ 28, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreReleaseForCcFlush"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostReleaseForCcFlush"": [ 36, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreAcquireForModifiedPageWriter"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostAcquireForModifiedPageWriter"": [ 44, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreReleaseForModifiedPageWriter"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostReleaseForModifiedPageWriter"": [ 52, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfFsFilterCallbacks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PreAcquireForSectionSynchronization { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 PostAcquireForSectionSynchronization { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PreReleaseForSectionSynchronization { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PostReleaseForSectionSynchronization { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PreAcquireForCcFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PostAcquireForCcFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PreReleaseForCcFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 PostReleaseForCcFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 PreAcquireForModifiedPageWriter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 PostAcquireForModifiedPageWriter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 PreReleaseForModifiedPageWriter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 PostReleaseForModifiedPageWriter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _IA64_DBGKD_CONTROL_SET
 
	public class _IA64_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IA64_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IA64_DBGKD_CONTROL_SET"": [ 20, {
				 ""Continue"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 4, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 12, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Continue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 CurrentSymbolStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4); } }
		public UInt64 CurrentSymbolEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DEVICE_MAP
 
	public class _DEVICE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_MAP"": [ 48, {
				 ""DosDevicesDirectory"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""GlobalDosDevicesDirectory"": [ 4, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""ReferenceCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DriveMap"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DriveType"": [ 16, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DosDevicesDirectory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GlobalDosDevicesDirectory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DriveMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Byte[] DriveType
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 16];
				return returnValue;
			}
		}
	}
	#endregion
	#region _u
 
	public class _u
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _u(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_u"": [ 80, {
				 ""KeyNode"": [ 0, [ ""_CM_KEY_NODE"", ""null"" ]],
				 ""KeyValue"": [ 0, [ ""_CM_KEY_VALUE"", ""null"" ]],
				 ""KeySecurity"": [ 0, [ ""_CM_KEY_SECURITY"", ""null"" ]],
				 ""KeyIndex"": [ 0, [ ""_CM_KEY_INDEX"", ""null"" ]],
				 ""ValueData"": [ 0, [ ""_CM_BIG_DATA"", ""null"" ]],
				 ""KeyList"": [ 0, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""KeyString"": [ 0, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public _CM_KEY_NODE KeyNode
		{
			get
			{
				_CM_KEY_NODE returnValue = new _CM_KEY_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_KEY_VALUE KeyValue
		{
			get
			{
				_CM_KEY_VALUE returnValue = new _CM_KEY_VALUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_KEY_SECURITY KeySecurity
		{
			get
			{
				_CM_KEY_SECURITY returnValue = new _CM_KEY_SECURITY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_KEY_INDEX KeyIndex
		{
			get
			{
				_CM_KEY_INDEX returnValue = new _CM_KEY_INDEX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_BIG_DATA ValueData
		{
			get
			{
				_CM_BIG_DATA returnValue = new _CM_BIG_DATA(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] KeyList
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16[] KeyString
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_CONFLICT_INFO
 
	public class _ARBITER_CONFLICT_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_CONFLICT_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_CONFLICT_INFO"": [ 24, {
				 ""OwningObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Start"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 OwningObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PO_NOTIFY_ORDER_LEVEL
 
	public class _PO_NOTIFY_ORDER_LEVEL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_NOTIFY_ORDER_LEVEL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_NOTIFY_ORDER_LEVEL"": [ 72, {
				 ""LevelReady"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""DeviceCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ActiveCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""WaitSleep"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReadySleep"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Pending"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Complete"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReadyS0"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WaitS0"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT LevelReady
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 DeviceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ActiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LIST_ENTRY WaitSleep
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY ReadySleep
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY Pending
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY Complete
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY ReadyS0
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY WaitS0
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCI_HEADER_TYPE_2
 
	public class _PCI_HEADER_TYPE_2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_HEADER_TYPE_2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_HEADER_TYPE_2"": [ 48, {
				 ""SocketRegistersBaseAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CapabilitiesPtr"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 5, [ ""Byte"", ""null"" ]],
				 ""SecondaryStatus"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""PrimaryBus"": [ 8, [ ""Byte"", ""null"" ]],
				 ""SecondaryBus"": [ 9, [ ""Byte"", ""null"" ]],
				 ""SubordinateBus"": [ 10, [ ""Byte"", ""null"" ]],
				 ""SecondaryLatency"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Range"": [ 12, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""InterruptLine"": [ 44, [ ""Byte"", ""null"" ]],
				 ""InterruptPin"": [ 45, [ ""Byte"", ""null"" ]],
				 ""BridgeControl"": [ 46, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SocketRegistersBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte CapabilitiesPtr{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 SecondaryStatus { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Byte PrimaryBus{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte SecondaryBus{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte SubordinateBus{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte SecondaryLatency{ get { return _StructureData[_BufferOffset +11]; } }
		public __unnamed[] Range
		{
			get
			{
				__unnamed[] returnValue = new __unnamed[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new __unnamed(_StructureData, (i * size) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public Byte InterruptLine{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte InterruptPin{ get { return _StructureData[_BufferOffset +45]; } }
		public UInt16 BridgeControl { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
	}
	#endregion
	#region _SEP_AUDIT_POLICY_CATEGORIES
 
	public class _SEP_AUDIT_POLICY_CATEGORIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_AUDIT_POLICY_CATEGORIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_AUDIT_POLICY_CATEGORIES"": [ 8, {
				 ""System"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Logon"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ObjectAccess"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""PrivilegeUse"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""DetailedTracking"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""PolicyChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""AccountManagement"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""DirectoryServiceAccess"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""AccountLogon"": [ 4, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 System
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 15) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Logon
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 240) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ObjectAccess
		{
			get
			{
				// start: 8  end: 12  Mask: 0000111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3840) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivilegeUse
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 DetailedTracking
		{
			get
			{
				// start: 16  end: 20  Mask: 11110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 983040) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 PolicyChange
		{
			get
			{
				// start: 20  end: 24  Mask: 111100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 15728640) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 AccountManagement
		{
			get
			{
				// start: 24  end: 28  Mask: 1111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 251658240) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 DirectoryServiceAccess
		{
			get
			{
				// start: 28  end: 32  Mask: 11110000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4026531840) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 AccountLogon
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 15) >> 0;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _CM_KEY_VALUE
 
	public class _CM_KEY_VALUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_VALUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_VALUE"": [ 24, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""NameLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DataLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Data"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""Spare"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 20, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Data { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 Spare { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _AMD64_DBGKD_CONTROL_SET
 
	public class _AMD64_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AMD64_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AMD64_DBGKD_CONTROL_SET"": [ 28, {
				 ""TraceFlag"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 4, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 12, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 20, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TraceFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Dr7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4); } }
		public UInt64 CurrentSymbolStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 12); } }
		public UInt64 CurrentSymbolEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _FS_FILTER_CALLBACK_DATA
 
	public class _FS_FILTER_CALLBACK_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_CALLBACK_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_CALLBACK_DATA"": [ 36, {
				 ""SizeOfFsFilterCallbackData"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Operation"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 5, [ ""Byte"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FileObject"": [ 12, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""Parameters"": [ 16, [ ""_FS_FILTER_PARAMETERS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfFsFilterCallbackData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Operation{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt32 DeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FileObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _FS_FILTER_PARAMETERS Parameters
		{
			get
			{
				_FS_FILTER_PARAMETERS returnValue = new _FS_FILTER_PARAMETERS(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_DIRECTORY_ENTRY
 
	public class _OBJECT_DIRECTORY_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_DIRECTORY_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_DIRECTORY_ENTRY"": [ 8, {
				 ""ChainLink"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY_ENTRY\""}"" ]],
				 ""Object"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ChainLink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Object { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _VI_POOL_ENTRY
 
	public class _VI_POOL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_POOL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_POOL_ENTRY"": [ 16, {
				 ""InUse"": [ 0, [ ""_VI_POOL_ENTRY_INUSE"", ""null"" ]],
				 ""FreeListNext"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _VI_POOL_ENTRY_INUSE InUse
		{
			get
			{
				_VI_POOL_ENTRY_INUSE returnValue = new _VI_POOL_ENTRY_INUSE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 FreeListNext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _POP_DEVICE_POWER_IRP
 
	public class _POP_DEVICE_POWER_IRP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_DEVICE_POWER_IRP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_DEVICE_POWER_IRP"": [ 44, {
				 ""Free"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 4, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Notify"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PO_DEVICE_NOTIFY\""}"" ]],
				 ""Pending"": [ 12, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Complete"": [ 20, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Abort"": [ 28, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Failed"": [ 36, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY Free
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Irp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Notify { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY Pending
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LIST_ENTRY Complete
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _LIST_ENTRY Abort
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _LIST_ENTRY Failed
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_RANGE
 
	public class _RTL_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RANGE"": [ 32, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""UserData"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Owner"": [ 20, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Attributes"": [ 24, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 25, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 UserData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Owner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Byte Attributes{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +25]; } }
	}
	#endregion
	#region _PCI_HEADER_TYPE_1
 
	public class _PCI_HEADER_TYPE_1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_HEADER_TYPE_1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_HEADER_TYPE_1"": [ 48, {
				 ""BaseAddresses"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""PrimaryBus"": [ 8, [ ""Byte"", ""null"" ]],
				 ""SecondaryBus"": [ 9, [ ""Byte"", ""null"" ]],
				 ""SubordinateBus"": [ 10, [ ""Byte"", ""null"" ]],
				 ""SecondaryLatency"": [ 11, [ ""Byte"", ""null"" ]],
				 ""IOBase"": [ 12, [ ""Byte"", ""null"" ]],
				 ""IOLimit"": [ 13, [ ""Byte"", ""null"" ]],
				 ""SecondaryStatus"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""MemoryBase"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""MemoryLimit"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""PrefetchBase"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""PrefetchLimit"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""PrefetchBaseUpper32"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PrefetchLimitUpper32"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""IOBaseUpper16"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""IOLimitUpper16"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""CapabilitiesPtr"": [ 36, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 37, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""ROMBaseAddress"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""InterruptLine"": [ 44, [ ""Byte"", ""null"" ]],
				 ""InterruptPin"": [ 45, [ ""Byte"", ""null"" ]],
				 ""BridgeControl"": [ 46, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] BaseAddresses
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte PrimaryBus{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte SecondaryBus{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte SubordinateBus{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte SecondaryLatency{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte IOBase{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte IOLimit{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt16 SecondaryStatus { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt16 MemoryBase { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 MemoryLimit { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16 PrefetchBase { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 PrefetchLimit { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 PrefetchBaseUpper32 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PrefetchLimitUpper32 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt16 IOBaseUpper16 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 IOLimitUpper16 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public Byte CapabilitiesPtr{ get { return _StructureData[_BufferOffset +36]; } }
		public Byte[] Reserved1
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 37];
				return returnValue;
			}
		}
		public UInt32 ROMBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Byte InterruptLine{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte InterruptPin{ get { return _StructureData[_BufferOffset +45]; } }
		public UInt16 BridgeControl { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
	}
	#endregion
	#region _PRIVILEGE_SET
 
	public class _PRIVILEGE_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PRIVILEGE_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PRIVILEGE_SET"": [ 20, {
				 ""PrivilegeCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Control"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Privilege"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Control { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LUID_AND_ATTRIBUTES[] Privilege
		{
			get
			{
				_LUID_AND_ATTRIBUTES[] returnValue = new _LUID_AND_ATTRIBUTES[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _LUID_AND_ATTRIBUTES(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_SECURITY_CONTEXT
 
	public class _IO_SECURITY_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_SECURITY_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_SECURITY_CONTEXT"": [ 16, {
				 ""SecurityQos"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SECURITY_QUALITY_OF_SERVICE\""}"" ]],
				 ""AccessState"": [ 4, [ ""Pointer"", ""{\""target\"":\""_ACCESS_STATE\""}"" ]],
				 ""DesiredAccess"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""FullCreateOptions"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SecurityQos { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 AccessState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DesiredAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FullCreateOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _KSPECIAL_REGISTERS
 
	public class _KSPECIAL_REGISTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSPECIAL_REGISTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 84; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSPECIAL_REGISTERS"": [ 84, {
				 ""Cr0"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Cr2"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Cr3"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Cr4"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""KernelDr0"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""KernelDr1"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""KernelDr2"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""KernelDr3"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""KernelDr6"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""KernelDr7"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Gdtr"": [ 40, [ ""_DESCRIPTOR"", ""null"" ]],
				 ""Idtr"": [ 48, [ ""_DESCRIPTOR"", ""null"" ]],
				 ""Tr"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""Ldtr"": [ 58, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 60, [ ""Array"", ""{\""count\"":6,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cr0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Cr2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Cr3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Cr4 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 KernelDr0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 KernelDr1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 KernelDr2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 KernelDr3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 KernelDr6 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 KernelDr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _DESCRIPTOR Gdtr
		{
			get
			{
				_DESCRIPTOR returnValue = new _DESCRIPTOR(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _DESCRIPTOR Idtr
		{
			get
			{
				_DESCRIPTOR returnValue = new _DESCRIPTOR(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt16 Tr { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt16 Ldtr { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 58); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 60);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MAILSLOT_CREATE_PARAMETERS
 
	public class _MAILSLOT_CREATE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MAILSLOT_CREATE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MAILSLOT_CREATE_PARAMETERS"": [ 24, {
				 ""MailslotQuota"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaximumMessageSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ReadTimeout"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimeoutSpecified"": [ 16, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MailslotQuota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaximumMessageSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER ReadTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte TimeoutSpecified{ get { return _StructureData[_BufferOffset +16]; } }
	}
	#endregion
	#region _NAMED_PIPE_CREATE_PARAMETERS
 
	public class _NAMED_PIPE_CREATE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NAMED_PIPE_CREATE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NAMED_PIPE_CREATE_PARAMETERS"": [ 40, {
				 ""NamedPipeType"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReadMode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CompletionMode"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaximumInstances"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""InboundQuota"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""OutboundQuota"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DefaultTimeout"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimeoutSpecified"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NamedPipeType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReadMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CompletionMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MaximumInstances { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 InboundQuota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 OutboundQuota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LARGE_INTEGER DefaultTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte TimeoutSpecified{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _CM_BIG_DATA
 
	public class _CM_BIG_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_BIG_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_BIG_DATA"": [ 8, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""List"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 List { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _SUPPORTED_RANGE
 
	public class _SUPPORTED_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SUPPORTED_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SUPPORTED_RANGE"": [ 32, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SUPPORTED_RANGE\""}"" ]],
				 ""SystemAddressSpace"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SystemBase"": [ 8, [ ""Int64"", ""null"" ]],
				 ""Base"": [ 16, [ ""Int64"", ""null"" ]],
				 ""Limit"": [ 24, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SystemAddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int64 SystemBase { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public Int64 Base { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 16); } }
		public Int64 Limit { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _CM_KEY_NODE
 
	public class _CM_KEY_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_NODE"": [ 80, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""LastWriteTime"": [ 4, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Spare"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Parent"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SubKeyCounts"": [ 20, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SubKeyLists"": [ 28, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ValueList"": [ 36, [ ""_CHILD_LIST"", ""null"" ]],
				 ""ChildHiveReference"": [ 28, [ ""_CM_KEY_REFERENCE"", ""null"" ]],
				 ""Security"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Class"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""MaxNameLen"": [ 52, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""UserFlags"": [ 52, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""VirtControlFlags"": [ 52, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""Debug"": [ 52, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""MaxClassLen"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""MaxValueNameLen"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""MaxValueDataLen"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""WorkVar"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""NameLength"": [ 72, [ ""UInt16"", ""null"" ]],
				 ""ClassLength"": [ 74, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 76, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 Spare { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] SubKeyCounts
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32[] SubKeyLists
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 28);
				return returnValue;
			}
		}
		public _CHILD_LIST ValueList
		{
			get
			{
				_CHILD_LIST returnValue = new _CHILD_LIST(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _CM_KEY_REFERENCE ChildHiveReference
		{
			get
			{
				_CM_KEY_REFERENCE returnValue = new _CM_KEY_REFERENCE(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 Security { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Class { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 MaxNameLen
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 UserFlags
		{
			get
			{
				// start: 16  end: 20  Mask: 11110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 983040) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 VirtControlFlags
		{
			get
			{
				// start: 20  end: 24  Mask: 111100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 15728640) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 Debug
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 MaxClassLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 MaxValueNameLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 MaxValueDataLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 WorkVar { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 72); } }
		public UInt16 ClassLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 74); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 76);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_ORDERING
 
	public class _ARBITER_ORDERING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ORDERING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ORDERING"": [ 16, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _ARBITER_LIST_ENTRY
 
	public class _ARBITER_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_LIST_ENTRY"": [ 56, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AlternativeCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Alternatives"": [ 12, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""PhysicalDeviceObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RequestSource"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_ARBITER_REQUEST_SOURCE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""WorkSpace"": [ 28, [ ""Int32"", ""null"" ]],
				 ""InterfaceType"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SlotNumber"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Assignment"": [ 44, [ ""Pointer"", ""{\""target\"":\""_CM_PARTIAL_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""SelectedAlternative"": [ 48, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""Result"": [ 52, [ ""Enumeration"", ""{\""enum_name\"":\""_ARBITER_RESULT\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 AlternativeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Alternatives { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PhysicalDeviceObject { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _ARBITER_REQUEST_SOURCE RequestSource { get { return (_ARBITER_REQUEST_SOURCE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Int32 WorkSpace { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 SlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Assignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SelectedAlternative { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _ARBITER_RESULT Result { get { return (_ARBITER_RESULT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _LPCP_NONPAGED_PORT_QUEUE
 
	public class _LPCP_NONPAGED_PORT_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_NONPAGED_PORT_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_NONPAGED_PORT_QUEUE"": [ 24, {
				 ""Semaphore"": [ 0, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""BackPointer"": [ 20, [ ""Pointer"", ""{\""target\"":\""_LPCP_PORT_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public _KSEMAPHORE Semaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 BackPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _CM_KEY_INDEX
 
	public class _CM_KEY_INDEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_INDEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_INDEX"": [ 8, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""List"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32[] List
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KEY_REFERENCE
 
	public class _CM_KEY_REFERENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_REFERENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_REFERENCE"": [ 8, {
				 ""KeyCell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""KeyHive"": [ 4, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 KeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 KeyHive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _ARBITER_ALTERNATIVE
 
	public class _ARBITER_ALTERNATIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ALTERNATIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ALTERNATIVE"": [ 48, {
				 ""Minimum"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Maximum"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Length"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Alignment"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Priority"": [ 24, [ ""Int32"", ""null"" ]],
				 ""Flags"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Descriptor"": [ 32, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""Reserved"": [ 36, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Minimum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Maximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Alignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Int32 Priority { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Descriptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FS_FILTER_PARAMETERS
 
	public class _FS_FILTER_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_PARAMETERS"": [ 20, {
				 ""AcquireForModifiedPageWriter"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""ReleaseForModifiedPageWriter"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""AcquireForSectionSynchronization"": [ 0, [ ""__unnamed"", ""null"" ]],
				 ""Others"": [ 0, [ ""__unnamed"", ""null"" ]] }]
				 }
				)";
			}
		}
		public __unnamed AcquireForModifiedPageWriter
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed ReleaseForModifiedPageWriter
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed AcquireForSectionSynchronization
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public __unnamed Others
		{
			get
			{
				__unnamed returnValue = new __unnamed(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DESCRIPTOR
 
	public class _DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DESCRIPTOR"": [ 8, {
				 ""Pad"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Limit"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Base"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Pad { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Limit { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Base { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _VI_POOL_ENTRY_INUSE
 
	public class _VI_POOL_ENTRY_INUSE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_POOL_ENTRY_INUSE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_POOL_ENTRY_INUSE"": [ 16, {
				 ""VirtualAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallingAddress"": [ 4, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfBytes"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Tag"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 VirtualAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CallingAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NumberOfBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Tag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _CHILD_LIST
 
	public class _CHILD_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CHILD_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CHILD_LIST"": [ 8, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 List { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _CM_KEY_SECURITY
 
	public class _CM_KEY_SECURITY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_SECURITY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_SECURITY"": [ 40, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Flink"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Blink"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DescriptorLength"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Descriptor"": [ 20, [ ""_SECURITY_DESCRIPTOR_RELATIVE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DescriptorLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _SECURITY_DESCRIPTOR_RELATIVE Descriptor
		{
			get
			{
				_SECURITY_DESCRIPTOR_RELATIVE returnValue = new _SECURITY_DESCRIPTOR_RELATIVE(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
}
